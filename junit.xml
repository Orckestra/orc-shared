<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="2022" failures="0" time="105.369">
  <testsuite name="table helpers buildHeaderAndRowFromConfig" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:28:52" time="20.871" tests="27">
    <testcase classname="table helpers buildHeaderAndRowFromConfig Throws an error if columnDefinitions has more than one sortField" name="table helpers buildHeaderAndRowFromConfig Throws an error if columnDefinitions has more than one sortField" time="0.024">
    </testcase>
    <testcase classname="table helpers buildHeaderAndRowFromConfig build simple table headers" name="table helpers buildHeaderAndRowFromConfig build simple table headers" time="0.009">
    </testcase>
    <testcase classname="table helpers buildHeaderAndRowFromConfig build table headers and rows as expected" name="table helpers buildHeaderAndRowFromConfig build table headers and rows as expected" time="0.191">
    </testcase>
    <testcase classname="table helpers buildHeaderAndRowFromConfig build table headers and rows as expected with another key field" name="table helpers buildHeaderAndRowFromConfig build table headers and rows as expected with another key field" time="0.083">
    </testcase>
    <testcase classname="table helpers buildHeaderAndRowFromConfig build table rows as expected with transform" name="table helpers buildHeaderAndRowFromConfig build table rows as expected with transform" time="0.042">
    </testcase>
    <testcase classname="table helpers buildHeaderAndRowFromConfig build table rows as expected with a custom builder" name="table helpers buildHeaderAndRowFromConfig build table rows as expected with a custom builder" time="0.003">
    </testcase>
    <testcase classname="table helpers buildHeaderAndRowFromConfig build table rows as expected with a custom builder returning not valid component" name="table helpers buildHeaderAndRowFromConfig build table rows as expected with a custom builder returning not valid component" time="0.045">
    </testcase>
    <testcase classname="table helpers buildHeaderAndRowFromConfig build table rows as expected with currency" name="table helpers buildHeaderAndRowFromConfig build table rows as expected with currency" time="0.016">
    </testcase>
    <testcase classname="table helpers buildHeaderAndRowFromConfig build table rows as expected with currency from elements" name="table helpers buildHeaderAndRowFromConfig build table rows as expected with currency from elements" time="0.006">
    </testcase>
    <testcase classname="table helpers buildHeaderAndRowFromConfig build table rows as expected with date" name="table helpers buildHeaderAndRowFromConfig build table rows as expected with date" time="0.005">
    </testcase>
    <testcase classname="table helpers buildHeaderAndRowFromConfig build table rows as expected with datetime" name="table helpers buildHeaderAndRowFromConfig build table rows as expected with datetime" time="0.007">
    </testcase>
    <testcase classname="table helpers buildHeaderAndRowFromConfig build table rows as expected with select" name="table helpers buildHeaderAndRowFromConfig build table rows as expected with select" time="0.006">
    </testcase>
    <testcase classname="table helpers buildHeaderAndRowFromConfig build table rows as expected with select with transform" name="table helpers buildHeaderAndRowFromConfig build table rows as expected with select with transform" time="0.002">
    </testcase>
    <testcase classname="table helpers buildHeaderAndRowFromConfig build table rows as expected with switch" name="table helpers buildHeaderAndRowFromConfig build table rows as expected with switch" time="0.427">
    </testcase>
    <testcase classname="table helpers buildHeaderAndRowFromConfig build table rows as expected with transform" name="table helpers buildHeaderAndRowFromConfig build table rows as expected with transform" time="0.237">
    </testcase>
    <testcase classname="table helpers buildHeaderAndRowFromConfig build table rows as expected with switch caption" name="table helpers buildHeaderAndRowFromConfig build table rows as expected with switch caption" time="0.202">
    </testcase>
    <testcase classname="table helpers buildHeaderAndRowFromConfig build table rows as expected with reversed switch" name="table helpers buildHeaderAndRowFromConfig build table rows as expected with reversed switch" time="0.219">
    </testcase>
    <testcase classname="table helpers buildHeaderAndRowFromConfig build table rows as expected with textInput" name="table helpers buildHeaderAndRowFromConfig build table rows as expected with textInput" time="0.158">
    </testcase>
    <testcase classname="table helpers buildHeaderAndRowFromConfig build table rows as expected with textInput and transformed disabled and error" name="table helpers buildHeaderAndRowFromConfig build table rows as expected with textInput and transformed disabled and error" time="0.137">
    </testcase>
    <testcase classname="table helpers buildHeaderAndRowFromConfig build table rows as expected when value is null and switch caption should not be shown" name="table helpers buildHeaderAndRowFromConfig build table rows as expected when value is null and switch caption should not be shown" time="0.002">
    </testcase>
    <testcase classname="table helpers buildHeaderAndRowFromConfig build table rows as expected without tooltip as required" name="table helpers buildHeaderAndRowFromConfig build table rows as expected without tooltip as required" time="0.063">
    </testcase>
    <testcase classname="table helpers buildHeaderAndRowFromConfig build table rows as expected with radio" name="table helpers buildHeaderAndRowFromConfig build table rows as expected with radio" time="0.004">
    </testcase>
    <testcase classname="table helpers buildHeaderAndRowFromConfig build table rows as expected with radio and transform" name="table helpers buildHeaderAndRowFromConfig build table rows as expected with radio and transform" time="0.01">
    </testcase>
    <testcase classname="table helpers buildHeaderAndRowFromConfig build table headers and rows as expected when not in readonly mode" name="table helpers buildHeaderAndRowFromConfig build table headers and rows as expected when not in readonly mode" time="0.07">
    </testcase>
    <testcase classname="table helpers buildHeaderAndRowFromConfig build table headers and rows as expected when not in readonly mode with editing builder" name="table helpers buildHeaderAndRowFromConfig build table headers and rows as expected when not in readonly mode with editing builder" time="0.052">
    </testcase>
    <testcase classname="table helpers buildHeaderAndRowFromConfig build table headers and rows as expected when not in readonly mode with editing builder depending on field name" name="table helpers buildHeaderAndRowFromConfig build table headers and rows as expected when not in readonly mode with editing builder depending on field name" time="0.067">
    </testcase>
    <testcase classname="table helpers buildHeaderAndRowFromConfig build table headers and rows as expected when a column should not be visible" name="table helpers buildHeaderAndRowFromConfig build table headers and rows as expected when a column should not be visible" time="0.036">
    </testcase>
  </testsuite>
  <testsuite name="useNavigationState" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:28:52" time="21.144" tests="24">
    <testcase classname="useNavigationState provides state information about navigation without pages" name="useNavigationState provides state information about navigation without pages" time="0.402">
    </testcase>
    <testcase classname="useNavigationState provides state information about navigation" name="useNavigationState provides state information about navigation" time="0.332">
    </testcase>
    <testcase classname="useNavigationState provides state information about navigation when redirection is needed" name="useNavigationState provides state information about navigation when redirection is needed" time="0.317">
    </testcase>
    <testcase classname="useNavigationState provides state information about navigation when redirection is needed and currentScopeDefinition is undefined" name="useNavigationState provides state information about navigation when redirection is needed and currentScopeDefinition is undefined" time="0.285">
    </testcase>
    <testcase classname="useNavigationState handles incomplete paths" name="useNavigationState handles incomplete paths" time="0.103">
    </testcase>
    <testcase classname="useNavigationState with segments makes sure segment hrefs are correct" name="useNavigationState with segments makes sure segment hrefs are correct" time="0.155">
    </testcase>
    <testcase classname="useNavigationState tab label values gets a state value for a tab via selector" name="useNavigationState tab label values gets a state value for a tab via selector" time="0.17">
    </testcase>
    <testcase classname="useNavigationState tab label values handles if selector does not follow required function type" name="useNavigationState tab label values handles if selector does not follow required function type" time="0.2">
    </testcase>
    <testcase classname="useNavigationState tab label values gets a state value for a tab via data path (deprecated)" name="useNavigationState tab label values gets a state value for a tab via data path (deprecated)" time="0.13">
    </testcase>
    <testcase classname="useNavigationState provides a close handler for tabs" name="useNavigationState provides a close handler for tabs" time="0.123">
    </testcase>
    <testcase classname="useNavigationState Tab closing handler is not invoked when entity selector returns invalid entity" name="useNavigationState Tab closing handler is not invoked when entity selector returns invalid entity" time="0.087">
    </testcase>
    <testcase classname="useNavigationState Tab closing handler is not invoked when entity selector returns undefined" name="useNavigationState Tab closing handler is not invoked when entity selector returns undefined" time="0.091">
    </testcase>
    <testcase classname="useNavigationState Tab closing handler is not invoked when entity selector returns invalid entity id" name="useNavigationState Tab closing handler is not invoked when entity selector returns invalid entity id" time="0.105">
    </testcase>
    <testcase classname="useNavigationState Ensure tab closing handler is invoked when closing a tab" name="useNavigationState Ensure tab closing handler is invoked when closing a tab" time="0.081">
    </testcase>
    <testcase classname="useNavigationState Ensure tab closing handler is invoked when explicitly closing a tab" name="useNavigationState Ensure tab closing handler is invoked when explicitly closing a tab" time="0.125">
    </testcase>
    <testcase classname="useNavigationState navigates to module page if closing current tab" name="useNavigationState navigates to module page if closing current tab" time="0.082">
    </testcase>
    <testcase classname="getPageData extracts the module page data for an empty path" name="getPageData extracts the module page data for an empty path" time="0.002">
    </testcase>
    <testcase classname="getPageData extracts the data for a nested segment page" name="getPageData extracts the data for a nested segment page" time="0.001">
    </testcase>
    <testcase classname="getPageData extracts the data for a nested subpage" name="getPageData extracts the data for a nested subpage" time="0.002">
    </testcase>
    <testcase classname="getPageData handles variable path steps" name="getPageData handles variable path steps" time="0.001">
    </testcase>
    <testcase classname="getPageData handles variable path steps which uses &apos;path to regex&apos;" name="getPageData handles variable path steps which uses &apos;path to regex&apos;" time="0.002">
    </testcase>
    <testcase classname="getPageData handles multiple variable path steps" name="getPageData handles multiple variable path steps" time="0.002">
    </testcase>
    <testcase classname="getPageData handles missing data with multiple variable path steps" name="getPageData handles missing data with multiple variable path steps" time="0">
    </testcase>
    <testcase classname="getPageData handles missing page data" name="getPageData handles missing page data" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="useStyles" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:28:52" time="29.241" tests="36">
    <testcase classname="useStyles build tableHeader styles as expected" name="useStyles build tableHeader styles as expected" time="0.172">
    </testcase>
    <testcase classname="useStyles build stickyHeaderHead styles as expected" name="useStyles build stickyHeaderHead styles as expected" time="0.036">
    </testcase>
    <testcase classname="useStyles build stickyHeaderTable styles as expected" name="useStyles build stickyHeaderTable styles as expected" time="0.029">
    </testcase>
    <testcase classname="useStyles build stickyHeaderTableScroll styles as expected" name="useStyles build stickyHeaderTableScroll styles as expected" time="0.031">
    </testcase>
    <testcase classname="useStyles build stickyHeaderTableScroll styles as expected" name="useStyles build stickyHeaderTableScroll styles as expected" time="0.032">
    </testcase>
    <testcase classname="useStyles build tableRow styles as expected" name="useStyles build tableRow styles as expected" time="0.03">
    </testcase>
    <testcase classname="Memoize components Updates table row props" name="Memoize components Updates table row props" time="0.071">
    </testcase>
    <testcase classname="Memoize components Updates table row props if context is different" name="Memoize components Updates table row props if context is different" time="0.011">
    </testcase>
    <testcase classname="Memoize components Updates table row props when row in editing mode" name="Memoize components Updates table row props when row in editing mode" time="0.008">
    </testcase>
    <testcase classname="Memoize components Updates table row props if context is different and deepPropsComparation is set" name="Memoize components Updates table row props if context is different and deepPropsComparation is set" time="0.013">
    </testcase>
    <testcase classname="Memoize components Updates table body props" name="Memoize components Updates table body props" time="0.022">
    </testcase>
    <testcase classname="Memoize components Updates table props when rows changes" name="Memoize components Updates table props when rows changes" time="0.055">
    </testcase>
    <testcase classname="Memoize components Updates table props when sortField in headers change" name="Memoize components Updates table props when sortField in headers change" time="0.065">
    </testcase>
    <testcase classname="Memoize components Updates table props when sorting direction in headers changes" name="Memoize components Updates table props when sorting direction in headers changes" time="0.026">
    </testcase>
    <testcase classname="Memoize components Not updates table props when prev, next or both header.sortOptions are undefined" name="Memoize components Not updates table props when prev, next or both header.sortOptions are undefined" time="0.029">
    </testcase>
    <testcase classname="Memoize components Updates table props when changed and deep comparation enabled" name="Memoize components Updates table props when changed and deep comparation enabled" time="0.039">
    </testcase>
    <testcase classname="Memoize components Updates table props when not changed and deep comparation enabled" name="Memoize components Updates table props when not changed and deep comparation enabled" time="0.028">
    </testcase>
    <testcase classname="Memoize components Updates table props when columns amount changed and deep comparation enabled" name="Memoize components Updates table props when columns amount changed and deep comparation enabled" time="0.038">
    </testcase>
    <testcase classname="Table Fails if tableProps has wrong type" name="Table Fails if tableProps has wrong type" time="0.136">
    </testcase>
    <testcase classname="Table Renders Table" name="Table Renders Table" time="0.116">
    </testcase>
    <testcase classname="Table Renders Table in editing mode" name="Table Renders Table in editing mode" time="0.113">
    </testcase>
    <testcase classname="Table Renders Table with enabled sticky header" name="Table Renders Table with enabled sticky header" time="0.14">
    </testcase>
    <testcase classname="Table Renders Table with enabled sticky header and select mode" name="Table Renders Table with enabled sticky header and select mode" time="0.406">
    </testcase>
    <testcase classname="Table Renders Table with selection enabled" name="Table Renders Table with selection enabled" time="0.205">
    </testcase>
    <testcase classname="Table Renders Table with deep comparation" name="Table Renders Table with deep comparation" time="0.075">
    </testcase>
    <testcase classname="Table Table row selection handler is invoked" name="Table Table row selection handler is invoked" time="0.1">
    </testcase>
    <testcase classname="Table Table throws if one selected row props is missing" name="Table Table throws if one selected row props is missing" time="0.007">
    </testcase>
    <testcase classname="Table Table throws if the other selected row props is missing" name="Table Table throws if the other selected row props is missing" time="0.007">
    </testcase>
    <testcase classname="Table Table header selection handler is invoked" name="Table Table header selection handler is invoked" time="0.137">
    </testcase>
    <testcase classname="Table onRowClick is invoked when clicking on a table row" name="Table onRowClick is invoked when clicking on a table row" time="0.1">
    </testcase>
    <testcase classname="Table handle onresize event" name="Table handle onresize event" time="0.378">
    </testcase>
    <testcase classname="Table handle scrolling event" name="Table handle scrolling event" time="0.091">
    </testcase>
    <testcase classname="Table handle scrolling event when list has reached the end" name="Table handle scrolling event when list has reached the end" time="0.084">
    </testcase>
    <testcase classname="Table Renders Table with placeholder if rows are empty" name="Table Renders Table with placeholder if rows are empty" time="0.063">
    </testcase>
    <testcase classname="Table Renders Table with tableInfo if provided" name="Table Renders Table with tableInfo if provided" time="0.067">
    </testcase>
    <testcase classname="Table Renders Table rows with custom classes if provided and allowed" name="Table Renders Table rows with custom classes if provided and allowed" time="0.049">
    </testcase>
  </testsuite>
  <testsuite name="Preferences" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:28:52" time="29.415" tests="8">
    <testcase classname="Preferences renders a form dialog" name="Preferences renders a form dialog" time="0.626">
    </testcase>
    <testcase classname="Preferences shows view state fields, saves language change" name="Preferences shows view state fields, saves language change" time="0.219">
    </testcase>
    <testcase classname="Preferences stop events propagation with clickOutsideHandler" name="Preferences stop events propagation with clickOutsideHandler" time="0.028">
    </testcase>
    <testcase classname="Preferences shows view state fields, saves application change" name="Preferences shows view state fields, saves application change" time="0.184">
    </testcase>
    <testcase classname="Preferences clears and closes" name="Preferences clears and closes" time="0.179">
    </testcase>
    <testcase classname="Preferences handles missing current values" name="Preferences handles missing current values" time="0.154">
    </testcase>
    <testcase classname="Preferences createGetUpdater returns an update function" name="Preferences createGetUpdater returns an update function" time="0.007">
    </testcase>
    <testcase classname="Preferences createGetUpdater memoizes on update function and field name" name="Preferences createGetUpdater memoizes on update function and field name" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="AppFrame" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:28:52" time="31.912" tests="14">
    <testcase classname="AppFrame renders a viewport with scope selector, top bar and sidebar" name="AppFrame renders a viewport with scope selector, top bar and sidebar" time="0.77">
    </testcase>
    <testcase classname="AppFrame renders a viewport with scope selector, top bar and sidebar when no current application" name="AppFrame renders a viewport with scope selector, top bar and sidebar when no current application" time="0.314">
    </testcase>
    <testcase classname="AppFrame renders a viewport with scope selector, top bar and sidebar when no applications at all" name="AppFrame renders a viewport with scope selector, top bar and sidebar when no applications at all" time="0.237">
    </testcase>
    <testcase classname="AppFrame renders a viewport without scope selector" name="AppFrame renders a viewport without scope selector" time="0.208">
    </testcase>
    <testcase classname="AppFrame renders a viewport with cursor pointer event disabled" name="AppFrame renders a viewport with cursor pointer event disabled" time="0.379">
    </testcase>
    <testcase classname="AppFrame provides open flag, toggle and reset functions" name="AppFrame provides open flag, toggle and reset functions" time="0.498">
    </testcase>
    <testcase classname="AppFrame loads applications if not found" name="AppFrame loads applications if not found" time="0.084">
    </testcase>
    <testcase classname="AppFrame loads version info if no help url yet" name="AppFrame loads version info if no help url yet" time="0.071">
    </testcase>
    <testcase classname="AppFrame Display dialog to refresh the application when login is needed " name="AppFrame Display dialog to refresh the application when login is needed " time="0.408">
    </testcase>
    <testcase classname="AppFrame Invoke page reload when refresh button is clicked" name="AppFrame Invoke page reload when refresh button is clicked" time="0.295">
    </testcase>
    <testcase classname="ViewPort does not translate when closed" name="ViewPort does not translate when closed" time="0.012">
    </testcase>
    <testcase classname="ViewPort translates to the side when open" name="ViewPort translates to the side when open" time="0.003">
    </testcase>
    <testcase classname="Base pointer-events should be to default when preferences is hidden" name="Base pointer-events should be to default when preferences is hidden" time="0.004">
    </testcase>
    <testcase classname="Base pointer-events should be none when preferences is shown" name="Base pointer-events should be none when preferences is shown" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="InputField" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:28:52" time="32.618" tests="73">
    <testcase classname="InputField gives error message if given no type" name="InputField gives error message if given no type" time="0.198">
    </testcase>
    <testcase classname="InputField input type Button renders the input as a form field" name="InputField input type Button renders the input as a form field" time="0.096">
    </testcase>
    <testcase classname="InputField input type Button identifies fields in named forms" name="InputField input type Button identifies fields in named forms" time="0.058">
    </testcase>
    <testcase classname="InputField input type Button renders a required field" name="InputField input type Button renders a required field" time="0.085">
    </testcase>
    <testcase classname="InputField input type Button renders a required and empty field" name="InputField input type Button renders a required and empty field" time="0.077">
    </testcase>
    <testcase classname="InputField input type Button renders a required and empty field in a named form" name="InputField input type Button renders a required and empty field in a named form" time="0.065">
    </testcase>
    <testcase classname="InputField input type Button modifies the field name if inside a list" name="InputField input type Button modifies the field name if inside a list" time="0.057">
    </testcase>
    <testcase classname="InputField input type CheckboxInput renders the input as a form field" name="InputField input type CheckboxInput renders the input as a form field" time="0.095">
    </testcase>
    <testcase classname="InputField input type CheckboxInput identifies fields in named forms" name="InputField input type CheckboxInput identifies fields in named forms" time="0.07">
    </testcase>
    <testcase classname="InputField input type CheckboxInput modifies the field name if inside a list" name="InputField input type CheckboxInput modifies the field name if inside a list" time="0.082">
    </testcase>
    <testcase classname="InputField input type DateInput renders the input as a form field" name="InputField input type DateInput renders the input as a form field" time="0.162">
    </testcase>
    <testcase classname="InputField input type DateInput identifies fields in named forms" name="InputField input type DateInput identifies fields in named forms" time="0.115">
    </testcase>
    <testcase classname="InputField input type DateInput renders a required field" name="InputField input type DateInput renders a required field" time="0.14">
    </testcase>
    <testcase classname="InputField input type DateInput renders a required and empty field" name="InputField input type DateInput renders a required and empty field" time="0.118">
    </testcase>
    <testcase classname="InputField input type DateInput renders a required and empty field in a named form" name="InputField input type DateInput renders a required and empty field in a named form" time="0.137">
    </testcase>
    <testcase classname="InputField input type DateInput modifies the field name if inside a list" name="InputField input type DateInput modifies the field name if inside a list" time="0.107">
    </testcase>
    <testcase classname="InputField input type EmailInput renders the input as a form field" name="InputField input type EmailInput renders the input as a form field" time="0.07">
    </testcase>
    <testcase classname="InputField input type EmailInput identifies fields in named forms" name="InputField input type EmailInput identifies fields in named forms" time="0.051">
    </testcase>
    <testcase classname="InputField input type EmailInput renders a required field" name="InputField input type EmailInput renders a required field" time="0.072">
    </testcase>
    <testcase classname="InputField input type EmailInput renders a required and empty field" name="InputField input type EmailInput renders a required and empty field" time="0.079">
    </testcase>
    <testcase classname="InputField input type EmailInput renders a required and empty field in a named form" name="InputField input type EmailInput renders a required and empty field in a named form" time="0.104">
    </testcase>
    <testcase classname="InputField input type EmailInput modifies the field name if inside a list" name="InputField input type EmailInput modifies the field name if inside a list" time="0.062">
    </testcase>
    <testcase classname="InputField input type LineLabel renders the input as a form field" name="InputField input type LineLabel renders the input as a form field" time="0.056">
    </testcase>
    <testcase classname="InputField input type LineLabel identifies fields in named forms" name="InputField input type LineLabel identifies fields in named forms" time="0.052">
    </testcase>
    <testcase classname="InputField input type LineLabel modifies the field name if inside a list" name="InputField input type LineLabel modifies the field name if inside a list" time="0.056">
    </testcase>
    <testcase classname="InputField input type MultiSelector renders the input as a form field" name="InputField input type MultiSelector renders the input as a form field" time="0.197">
    </testcase>
    <testcase classname="InputField input type MultiSelector identifies fields in named forms" name="InputField input type MultiSelector identifies fields in named forms" time="0.167">
    </testcase>
    <testcase classname="InputField input type MultiSelector renders a required field" name="InputField input type MultiSelector renders a required field" time="0.136">
    </testcase>
    <testcase classname="InputField input type MultiSelector renders a required and empty field" name="InputField input type MultiSelector renders a required and empty field" time="0.109">
    </testcase>
    <testcase classname="InputField input type MultiSelector renders a required and empty field in a named form" name="InputField input type MultiSelector renders a required and empty field in a named form" time="0.101">
    </testcase>
    <testcase classname="InputField input type MultiSelector modifies the field name if inside a list" name="InputField input type MultiSelector modifies the field name if inside a list" time="0.093">
    </testcase>
    <testcase classname="InputField input type NumberInput renders the input as a form field" name="InputField input type NumberInput renders the input as a form field" time="0.117">
    </testcase>
    <testcase classname="InputField input type NumberInput identifies fields in named forms" name="InputField input type NumberInput identifies fields in named forms" time="0.059">
    </testcase>
    <testcase classname="InputField input type NumberInput renders a required field" name="InputField input type NumberInput renders a required field" time="0.067">
    </testcase>
    <testcase classname="InputField input type NumberInput renders a required and empty field" name="InputField input type NumberInput renders a required and empty field" time="0.083">
    </testcase>
    <testcase classname="InputField input type NumberInput renders a required and empty field in a named form" name="InputField input type NumberInput renders a required and empty field in a named form" time="0.09">
    </testcase>
    <testcase classname="InputField input type NumberInput modifies the field name if inside a list" name="InputField input type NumberInput modifies the field name if inside a list" time="0.06">
    </testcase>
    <testcase classname="InputField input type ReadOnly renders the input as a form field" name="InputField input type ReadOnly renders the input as a form field" time="0.057">
    </testcase>
    <testcase classname="InputField input type ReadOnly identifies fields in named forms" name="InputField input type ReadOnly identifies fields in named forms" time="0.075">
    </testcase>
    <testcase classname="InputField input type ReadOnly modifies the field name if inside a list" name="InputField input type ReadOnly modifies the field name if inside a list" time="0.048">
    </testcase>
    <testcase classname="InputField input type Selector renders the input as a form field" name="InputField input type Selector renders the input as a form field" time="0.084">
    </testcase>
    <testcase classname="InputField input type Selector identifies fields in named forms" name="InputField input type Selector identifies fields in named forms" time="0.096">
    </testcase>
    <testcase classname="InputField input type Selector renders a required field" name="InputField input type Selector renders a required field" time="0.1">
    </testcase>
    <testcase classname="InputField input type Selector renders a required and empty field" name="InputField input type Selector renders a required and empty field" time="0.111">
    </testcase>
    <testcase classname="InputField input type Selector renders a required and empty field in a named form" name="InputField input type Selector renders a required and empty field in a named form" time="0.086">
    </testcase>
    <testcase classname="InputField input type Selector modifies the field name if inside a list" name="InputField input type Selector modifies the field name if inside a list" time="0.078">
    </testcase>
    <testcase classname="InputField input type SmallButton renders the input as a form field" name="InputField input type SmallButton renders the input as a form field" time="0.089">
    </testcase>
    <testcase classname="InputField input type SmallButton identifies fields in named forms" name="InputField input type SmallButton identifies fields in named forms" time="0.049">
    </testcase>
    <testcase classname="InputField input type SmallButton renders a required field" name="InputField input type SmallButton renders a required field" time="0.062">
    </testcase>
    <testcase classname="InputField input type SmallButton renders a required and empty field" name="InputField input type SmallButton renders a required and empty field" time="0.053">
    </testcase>
    <testcase classname="InputField input type SmallButton renders a required and empty field in a named form" name="InputField input type SmallButton renders a required and empty field in a named form" time="0.073">
    </testcase>
    <testcase classname="InputField input type SmallButton modifies the field name if inside a list" name="InputField input type SmallButton modifies the field name if inside a list" time="0.044">
    </testcase>
    <testcase classname="InputField input type SwitchInput renders the input as a form field" name="InputField input type SwitchInput renders the input as a form field" time="0.086">
    </testcase>
    <testcase classname="InputField input type SwitchInput identifies fields in named forms" name="InputField input type SwitchInput identifies fields in named forms" time="0.04">
    </testcase>
    <testcase classname="InputField input type SwitchInput modifies the field name if inside a list" name="InputField input type SwitchInput modifies the field name if inside a list" time="0.046">
    </testcase>
    <testcase classname="InputField input type TextInput renders the input as a form field" name="InputField input type TextInput renders the input as a form field" time="0.049">
    </testcase>
    <testcase classname="InputField input type TextInput identifies fields in named forms" name="InputField input type TextInput identifies fields in named forms" time="0.04">
    </testcase>
    <testcase classname="InputField input type TextInput renders a required field" name="InputField input type TextInput renders a required field" time="0.056">
    </testcase>
    <testcase classname="InputField input type TextInput renders a required and empty field" name="InputField input type TextInput renders a required and empty field" time="0.05">
    </testcase>
    <testcase classname="InputField input type TextInput renders a required and empty field in a named form" name="InputField input type TextInput renders a required and empty field in a named form" time="0.051">
    </testcase>
    <testcase classname="InputField input type TextInput modifies the field name if inside a list" name="InputField input type TextInput modifies the field name if inside a list" time="0.044">
    </testcase>
    <testcase classname="InputField input type TimeInput renders the input as a form field" name="InputField input type TimeInput renders the input as a form field" time="0.092">
    </testcase>
    <testcase classname="InputField input type TimeInput identifies fields in named forms" name="InputField input type TimeInput identifies fields in named forms" time="0.047">
    </testcase>
    <testcase classname="InputField input type TimeInput renders a required field" name="InputField input type TimeInput renders a required field" time="0.068">
    </testcase>
    <testcase classname="InputField input type TimeInput renders a required and empty field" name="InputField input type TimeInput renders a required and empty field" time="0.061">
    </testcase>
    <testcase classname="InputField input type TimeInput renders a required and empty field in a named form" name="InputField input type TimeInput renders a required and empty field in a named form" time="0.084">
    </testcase>
    <testcase classname="InputField input type TimeInput modifies the field name if inside a list" name="InputField input type TimeInput modifies the field name if inside a list" time="0.043">
    </testcase>
    <testcase classname="InputField input type TranslationInput renders the input as a form field" name="InputField input type TranslationInput renders the input as a form field" time="0.148">
    </testcase>
    <testcase classname="InputField input type TranslationInput identifies fields in named forms" name="InputField input type TranslationInput identifies fields in named forms" time="0.057">
    </testcase>
    <testcase classname="InputField input type TranslationInput renders a required field" name="InputField input type TranslationInput renders a required field" time="0.077">
    </testcase>
    <testcase classname="InputField input type TranslationInput renders a required and empty field" name="InputField input type TranslationInput renders a required and empty field" time="0.065">
    </testcase>
    <testcase classname="InputField input type TranslationInput renders a required and empty field in a named form" name="InputField input type TranslationInput renders a required and empty field in a named form" time="0.091">
    </testcase>
    <testcase classname="InputField input type TranslationInput modifies the field name if inside a list" name="InputField input type TranslationInput modifies the field name if inside a list" time="0.082">
    </testcase>
  </testsuite>
  <testsuite name="FormPage" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:13" time="11.268" tests="3">
    <testcase classname="FormPage renders a form with a single field" name="FormPage renders a form with a single field" time="0.097">
    </testcase>
    <testcase classname="FormPage still respects &apos;wide&apos; flag" name="FormPage still respects &apos;wide&apos; flag" time="0.052">
    </testcase>
    <testcase classname="FormPage renders a form with a multiple fields" name="FormPage renders a form with a multiple fields" time="0.372">
    </testcase>
  </testsuite>
  <testsuite name="FieldList" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:13" time="12.949" tests="11">
    <testcase classname="FieldList renders a minimal fixed-length list" name="FieldList renders a minimal fixed-length list" time="0.139">
    </testcase>
    <testcase classname="FieldList renders an empty fixed-length list" name="FieldList renders an empty fixed-length list" time="0.021">
    </testcase>
    <testcase classname="FieldList renders a fixed-length list with static values" name="FieldList renders a fixed-length list with static values" time="0.113">
    </testcase>
    <testcase classname="FieldList renders a fixed-length list with tall rows" name="FieldList renders a fixed-length list with tall rows" time="0.114">
    </testcase>
    <testcase classname="FieldList can edit values" name="FieldList can edit values" time="0.082">
    </testcase>
    <testcase classname="FieldList renders a minimal variable-length list" name="FieldList renders a minimal variable-length list" time="0.072">
    </testcase>
    <testcase classname="FieldList renders a variable-length list, with values and row addition" name="FieldList renders a variable-length list, with values and row addition" time="0.606">
    </testcase>
    <testcase classname="FieldList can delete rows" name="FieldList can delete rows" time="0.059">
    </testcase>
    <testcase classname="FieldList will not render inside another list" name="FieldList will not render inside another list" time="0.009">
    </testcase>
    <testcase classname="List sets layout for fieldboxes under it" name="List sets layout for fieldboxes under it" time="0.003">
    </testcase>
    <testcase classname="List sets layout for fieldboxes under it with tall rows" name="List sets layout for fieldboxes under it with tall rows" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Topbar" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:24" time="3.566" tests="5">
    <testcase classname="Topbar renders a top bar of an app" name="Topbar renders a top bar of an app" time="0.162">
    </testcase>
    <testcase classname="Topbar doesn&apos;t break if no current app" name="Topbar doesn&apos;t break if no current app" time="0.058">
    </testcase>
    <testcase classname="Topbar doesn&apos;t break if no apps at all" name="Topbar doesn&apos;t break if no apps at all" time="0.046">
    </testcase>
    <testcase classname="useMenuProps sets a menu configuration on the wrapped component" name="useMenuProps sets a menu configuration on the wrapped component" time="0.083">
    </testcase>
    <testcase classname="CurrentApp renders the app logo and name" name="CurrentApp renders the app logo and name" time="0.029">
    </testcase>
  </testsuite>
  <testsuite name="useEditState" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:28:52" time="36.577" tests="54">
    <testcase classname="useEditState Provides an access to initial value in edit view" name="useEditState Provides an access to initial value in edit view" time="0.211">
    </testcase>
    <testcase classname="useEditState Provides an access to actual value in edit view" name="useEditState Provides an access to actual value in edit view" time="0.024">
    </testcase>
    <testcase classname="useEditState Sets initial value to empty string as default value" name="useEditState Sets initial value to empty string as default value" time="0.013">
    </testcase>
    <testcase classname="useEditState Not saves initial value to edit state if saveInitialValueToEditState is false" name="useEditState Not saves initial value to edit state if saveInitialValueToEditState is false" time="0.016">
    </testcase>
    <testcase classname="useEditState Saves initial value to edit state if saveInitialValueToEditState is false" name="useEditState Saves initial value to edit state if saveInitialValueToEditState is false" time="0.024">
    </testcase>
    <testcase classname="useEditState Not validates initial value to edit state if validateInitialValueAfterSave is false" name="useEditState Not validates initial value to edit state if validateInitialValueAfterSave is false" time="0.016">
    </testcase>
    <testcase classname="useEditState Do not save initial value to edit state if saveInitialValueToEditState is a function that returns false" name="useEditState Do not save initial value to edit state if saveInitialValueToEditState is a function that returns false" time="0.017">
    </testcase>
    <testcase classname="useEditState Save initial value to edit state if saveInitialValueToEditState is a function that returns true" name="useEditState Save initial value to edit state if saveInitialValueToEditState is a function that returns true" time="0.02">
    </testcase>
    <testcase classname="useEditState Save initial value to edit state with the modified value if saveInitialValueToEditState is a function that returns true" name="useEditState Save initial value to edit state with the modified value if saveInitialValueToEditState is a function that returns true" time="0.018">
    </testcase>
    <testcase classname="useEditState Validates initial value to edit state if validateInitialValueAfterSave is true without error" name="useEditState Validates initial value to edit state if validateInitialValueAfterSave is true without error" time="0.022">
    </testcase>
    <testcase classname="useEditState Validates initial value to edit state if validateInitialValueAfterSave is true with error" name="useEditState Validates initial value to edit state if validateInitialValueAfterSave is true with error" time="0.017">
    </testcase>
    <testcase classname="useEditState Updates edit view value correctly without validation" name="useEditState Updates edit view value correctly without validation" time="0.22">
    </testcase>
    <testcase classname="useEditState Updates edit view value correctly with default validation rules when validation was passed" name="useEditState Updates edit view value correctly with default validation rules when validation was passed" time="0.267">
    </testcase>
    <testcase classname="useEditState Updates edit view value correctly and generate error with dependencies" name="useEditState Updates edit view value correctly and generate error with dependencies" time="0.206">
    </testcase>
    <testcase classname="useEditState Updates edit view value correctly and generate error with field dependencies" name="useEditState Updates edit view value correctly and generate error with field dependencies" time="0.192">
    </testcase>
    <testcase classname="useEditState Updates edit view value correctly when no validation rules are set" name="useEditState Updates edit view value correctly when no validation rules are set" time="0.112">
    </testcase>
    <testcase classname="useEditState Updates edit view value correctly with default validation rules when validation was not passed" name="useEditState Updates edit view value correctly with default validation rules when validation was not passed" time="0.231">
    </testcase>
    <testcase classname="useEditState Updates edit view value correctly with custom validation rules when validation was passed" name="useEditState Updates edit view value correctly with custom validation rules when validation was passed" time="0.09">
    </testcase>
    <testcase classname="useEditState Updates edit view value correctly with custom validation rules when validation was not passed" name="useEditState Updates edit view value correctly with custom validation rules when validation was not passed" time="0.166">
    </testcase>
    <testcase classname="useEditState Resets correctly edit view field to the initial value" name="useEditState Resets correctly edit view field to the initial value" time="0.016">
    </testcase>
    <testcase classname="useEditState Validates edit state value correctly" name="useEditState Validates edit state value correctly" time="0.016">
    </testcase>
    <testcase classname="useDynamicEditState Provides an access to initial value in edit view" name="useDynamicEditState Provides an access to initial value in edit view" time="0.036">
    </testcase>
    <testcase classname="useDynamicEditState Provides an access to value in edit view if has modifications" name="useDynamicEditState Provides an access to value in edit view if has modifications" time="0.02">
    </testcase>
    <testcase classname="useDynamicEditState Provides an access to field by path in edit view" name="useDynamicEditState Provides an access to field by path in edit view" time="0.021">
    </testcase>
    <testcase classname="useDynamicEditState Provides an access to actual value in edit view" name="useDynamicEditState Provides an access to actual value in edit view" time="0.027">
    </testcase>
    <testcase classname="useDynamicEditState Provides an access to full edit state" name="useDynamicEditState Provides an access to full edit state" time="0.02">
    </testcase>
    <testcase classname="useDynamicEditState Provides an access to full edit state by path" name="useDynamicEditState Provides an access to full edit state by path" time="0.02">
    </testcase>
    <testcase classname="useDynamicEditState Sets initial value to empty string as default value" name="useDynamicEditState Sets initial value to empty string as default value" time="0.025">
    </testcase>
    <testcase classname="useDynamicEditState Not saves initial value to edit state if saveInitialValueToEditState is false" name="useDynamicEditState Not saves initial value to edit state if saveInitialValueToEditState is false" time="0.482">
    </testcase>
    <testcase classname="useDynamicEditState Saves initial value to edit state if saveInitialValueToEditState is true" name="useDynamicEditState Saves initial value to edit state if saveInitialValueToEditState is true" time="0.482">
    </testcase>
    <testcase classname="useDynamicEditState Updates edit view value correctly without validation" name="useDynamicEditState Updates edit view value correctly without validation" time="0.416">
    </testcase>
    <testcase classname="useDynamicEditState Updates edit view value correctly without validation if has modifications" name="useDynamicEditState Updates edit view value correctly without validation if has modifications" time="0.562">
    </testcase>
    <testcase classname="useDynamicEditState Updates edit view value correctly when no path was passed" name="useDynamicEditState Updates edit view value correctly when no path was passed" time="0.447">
    </testcase>
    <testcase classname="useDynamicEditState Updates edit view value correctly with default validation rules when validation was passed" name="useDynamicEditState Updates edit view value correctly with default validation rules when validation was passed" time="0.928">
    </testcase>
    <testcase classname="useDynamicEditState Updates edit view value correctly with default validation rules when validation was not passed" name="useDynamicEditState Updates edit view value correctly with default validation rules when validation was not passed" time="0.941">
    </testcase>
    <testcase classname="useDynamicEditState Updates edit view value correctly with custom validation rules when validation was passed" name="useDynamicEditState Updates edit view value correctly with custom validation rules when validation was passed" time="1.041">
    </testcase>
    <testcase classname="useDynamicEditState Updates edit view value correctly with custom validation rules when validation was not passed" name="useDynamicEditState Updates edit view value correctly with custom validation rules when validation was not passed" time="1">
    </testcase>
    <testcase classname="useDynamicEditState Resets correctly edit view field to the initial value" name="useDynamicEditState Resets correctly edit view field to the initial value" time="0.561">
    </testcase>
    <testcase classname="useDynamicEditState Resets correctly edit view field to the initial value when no path passed" name="useDynamicEditState Resets correctly edit view field to the initial value when no path passed" time="0.447">
    </testcase>
    <testcase classname="useDynamicEditState Validates edit state value correctly" name="useDynamicEditState Validates edit state value correctly" time="0.471">
    </testcase>
    <testcase classname="useDynamicEditState Validates edit state value correctly when no path passed" name="useDynamicEditState Validates edit state value correctly when no path passed" time="0.289">
    </testcase>
    <testcase classname="useDynamicEditState Gets error by path" name="useDynamicEditState Gets error by path" time="0.017">
    </testcase>
    <testcase classname="useDynamicEditState Gets error without path" name="useDynamicEditState Gets error without path" time="0.02">
    </testcase>
    <testcase classname="useDynamicEditState Gets error on the top level" name="useDynamicEditState Gets error on the top level" time="0.042">
    </testcase>
    <testcase classname="useDynamicEditState Updates edit view value correctly with custom validation rules and dependencies when validation was passed" name="useDynamicEditState Updates edit view value correctly with custom validation rules and dependencies when validation was passed" time="1.383">
    </testcase>
    <testcase classname="useDynamicEditState Updates edit view value correctly with custom validation rules and dependencies when validation was not passed" name="useDynamicEditState Updates edit view value correctly with custom validation rules and dependencies when validation was not passed" time="1.493">
    </testcase>
    <testcase classname="useDynamicEditState Validates edit state value correctly when it is not an object" name="useDynamicEditState Validates edit state value correctly when it is not an object" time="1.168">
    </testcase>
    <testcase classname="useDynamicEditState Validates edit state value correctly when it is an array" name="useDynamicEditState Validates edit state value correctly when it is an array" time="0.958">
    </testcase>
    <testcase classname="useDynamicEditState Validates edit state value correctly when it is an object and reset error" name="useDynamicEditState Validates edit state value correctly when it is an object and reset error" time="1.784">
    </testcase>
    <testcase classname="useDynamicEditState Delete value in edit view by path" name="useDynamicEditState Delete value in edit view by path" time="0.605">
    </testcase>
    <testcase classname="useDynamicEditState Delete value in edit view by path when value is object" name="useDynamicEditState Delete value in edit view by path when value is object" time="0.63">
    </testcase>
    <testcase classname="useDynamicEditState Delete value in edit view by path when value is array" name="useDynamicEditState Delete value in edit view by path when value is array" time="0.589">
    </testcase>
    <testcase classname="useDynamicEditState Delete value by top path" name="useDynamicEditState Delete value by top path" time="0.393">
    </testcase>
    <testcase classname="useDynamicEditState Delete value in edit view with no path" name="useDynamicEditState Delete value in edit view with no path" time="0.205">
    </testcase>
  </testsuite>
  <testsuite name="TabBar" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:21" time="7.305" tests="17">
    <testcase classname="TabBar Renders TabBar correctly" name="TabBar Renders TabBar correctly" time="0.79">
    </testcase>
    <testcase classname="TabBar Renders TabBar correctly with closing tab handler" name="TabBar Renders TabBar correctly with closing tab handler" time="0.475">
    </testcase>
    <testcase classname="TabBar Contains proper Select and Modal elements when they are visible" name="TabBar Contains proper Select and Modal elements when they are visible" time="0.869">
    </testcase>
    <testcase classname="TabBar Calls history.push to module link when module tab is clicked" name="TabBar Calls history.push to module link when module tab is clicked" time="0.243">
    </testcase>
    <testcase classname="TabBar Calls history.push to page link when page tab is clicked" name="TabBar Calls history.push to page link when page tab is clicked" time="0.246">
    </testcase>
    <testcase classname="TabBar Calls history.push to page link when page tab is selected via Select" name="TabBar Calls history.push to page link when page tab is selected via Select" time="0.251">
    </testcase>
    <testcase classname="TabBar Calls correct close callback when close icon for specific page tab is clicked and tab was not modified" name="TabBar Calls correct close callback when close icon for specific page tab is clicked and tab was not modified" time="0.208">
    </testcase>
    <testcase classname="TabBar Calls correct close callback when close icon for specific page tab with multiple params is clicked and tab was not modified" name="TabBar Calls correct close callback when close icon for specific page tab with multiple params is clicked and tab was not modified" time="0.176">
    </testcase>
    <testcase classname="TabBar Calls correct close callback when close icon for specific page tab is clicked and tab was modified" name="TabBar Calls correct close callback when close icon for specific page tab is clicked and tab was modified" time="0.193">
    </testcase>
    <testcase classname="TabBar Calls correct close callback when close icon for specific page tab with multiple params is clicked and tab was modified" name="TabBar Calls correct close callback when close icon for specific page tab with multiple params is clicked and tab was modified" time="0.168">
    </testcase>
    <testcase classname="TabBar Handles onResize correct when isScrollVisible returns false" name="TabBar Handles onResize correct when isScrollVisible returns false" time="0.087">
    </testcase>
    <testcase classname="TabBar Handles onResize correct when isScrollVisible returns true" name="TabBar Handles onResize correct when isScrollVisible returns true" time="0.12">
    </testcase>
    <testcase classname="TabBar Closes tab when ok callback in confirmation modal is triggered" name="TabBar Closes tab when ok callback in confirmation modal is triggered" time="0.239">
    </testcase>
    <testcase classname="TabBar Closes confirmation modal when cancelCallback is triggered" name="TabBar Closes confirmation modal when cancelCallback is triggered" time="0.236">
    </testcase>
    <testcase classname="TabBar Closes confirmation modal when backdropClickCallback is triggered" name="TabBar Closes confirmation modal when backdropClickCallback is triggered" time="0.214">
    </testcase>
    <testcase classname="TabBar Remove edit mode for new tab with modifications when close ok callback in confirmation modal is triggered" name="TabBar Remove edit mode for new tab with modifications when close ok callback in confirmation modal is triggered" time="0.218">
    </testcase>
    <testcase classname="TabLink Renders TabLink correctly" name="TabLink Renders TabLink correctly" time="0.018">
    </testcase>
  </testsuite>
  <testsuite name="Time Component" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:21" time="7.584" tests="40">
    <testcase classname="Time Component sets up a time 5am" name="Time Component sets up a time 5am" time="0.478">
    </testcase>
    <testcase classname="Time Component sets up a time 5am without AMPM" name="Time Component sets up a time 5am without AMPM" time="0.313">
    </testcase>
    <testcase classname="Time Component sets up a time now when no value without AMPM" name="Time Component sets up a time now when no value without AMPM" time="0.237">
    </testcase>
    <testcase classname="Time Component sets up a time now when no value" name="Time Component sets up a time now when no value" time="0.231">
    </testcase>
    <testcase classname="Time Component sets up a time now when no value without AMPM" name="Time Component sets up a time now when no value without AMPM" time="0.194">
    </testcase>
    <testcase classname="Time Component sets up a time now when we have a bad value" name="Time Component sets up a time now when we have a bad value" time="0.196">
    </testcase>
    <testcase classname="Time Component sets up a time now when we have a bad value withou AMPM" name="Time Component sets up a time now when we have a bad value withou AMPM" time="0.156">
    </testcase>
    <testcase classname="Time Component sets up a time 5pm" name="Time Component sets up a time 5pm" time="0.176">
    </testcase>
    <testcase classname="Time Component sets up a time 5pm without AMPM" name="Time Component sets up a time 5pm without AMPM" time="0.164">
    </testcase>
    <testcase classname="Time Component sets up a time 515pm" name="Time Component sets up a time 515pm" time="0.144">
    </testcase>
    <testcase classname="Time Component sets up a time 515pm without AMPM" name="Time Component sets up a time 515pm without AMPM" time="0.155">
    </testcase>
    <testcase classname="Time Component sets up a time 545pm" name="Time Component sets up a time 545pm" time="0.141">
    </testcase>
    <testcase classname="Time Component sets up a time 545pm without AMPM" name="Time Component sets up a time 545pm without AMPM" time="0.135">
    </testcase>
    <testcase classname="Time Component sets up a time 12am" name="Time Component sets up a time 12am" time="0.155">
    </testcase>
    <testcase classname="Time Component sets up a time 12am without AMPM" name="Time Component sets up a time 12am without AMPM" time="0.163">
    </testcase>
    <testcase classname="Time Component sets up a time 12pm" name="Time Component sets up a time 12pm" time="0.141">
    </testcase>
    <testcase classname="Time Component sets up a time 12pm without AMPM" name="Time Component sets up a time 12pm without AMPM" time="0.132">
    </testcase>
    <testcase classname="Time Component sets up a time 4:16pm" name="Time Component sets up a time 4:16pm" time="0.12">
    </testcase>
    <testcase classname="Time Component sets up a time 4:16pm without AMPM" name="Time Component sets up a time 4:16pm without AMPM" time="0.134">
    </testcase>
    <testcase classname="Time Component sets up a time 4:31pm" name="Time Component sets up a time 4:31pm" time="0.152">
    </testcase>
    <testcase classname="Time Component sets up a time 4:31pm without AMPM" name="Time Component sets up a time 4:31pm without AMPM" time="0.147">
    </testcase>
    <testcase classname="Time Component sets up a time 4:20pm" name="Time Component sets up a time 4:20pm" time="0.122">
    </testcase>
    <testcase classname="Time Component sets up a time 4:20pm without AMPM" name="Time Component sets up a time 4:20pm without AMPM" time="0.132">
    </testcase>
    <testcase classname="Time Component sets up a time 4:50pm" name="Time Component sets up a time 4:50pm" time="0.142">
    </testcase>
    <testcase classname="Time Component sets up a time 4:50pm without AMPM" name="Time Component sets up a time 4:50pm without AMPM" time="0.112">
    </testcase>
    <testcase classname="Time Component shows timezone if requested" name="Time Component shows timezone if requested" time="0.176">
    </testcase>
    <testcase classname="Time Component shows timezone if requested without AMPM" name="Time Component shows timezone if requested without AMPM" time="0.126">
    </testcase>
    <testcase classname="Time Component shows local timezone if requested without AMPM" name="Time Component shows local timezone if requested without AMPM" time="0.167">
    </testcase>
    <testcase classname="Time Component shows local timezone if requested without AMPM" name="Time Component shows local timezone if requested without AMPM" time="0.123">
    </testcase>
    <testcase classname="Time Component should render with browser AMPM" name="Time Component should render with browser AMPM" time="0.093">
    </testcase>
    <testcase classname="Time Component should update time with 12am" name="Time Component should update time with 12am" time="0.043">
    </testcase>
    <testcase classname="Time Component should update time with 12pm" name="Time Component should update time with 12pm" time="0.035">
    </testcase>
    <testcase classname="Time Component should update time without AMPM" name="Time Component should update time without AMPM" time="0.04">
    </testcase>
    <testcase classname="Time Component should update when 12" name="Time Component should update when 12" time="0.04">
    </testcase>
    <testcase classname="Time Component should update in AM when 12" name="Time Component should update in AM when 12" time="0.044">
    </testcase>
    <testcase classname="Time Component should update in PM when hours 12" name="Time Component should update in PM when hours 12" time="0.034">
    </testcase>
    <testcase classname="Time Component should update when no onchange" name="Time Component should update when no onchange" time="0.036">
    </testcase>
    <testcase classname="Time Component should update when mins &gt;= 45" name="Time Component should update when mins &gt;= 45" time="0.045">
    </testcase>
    <testcase classname="Time Component should update when mins &gt;= 15 and &lt; 30" name="Time Component should update when mins &gt;= 15 and &lt; 30" time="0.029">
    </testcase>
    <testcase classname="Time Component should call onChange prop" name="Time Component should call onChange prop" time="0.048">
    </testcase>
  </testsuite>
  <testsuite name="ScopeTreeView" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:25" time="4.537" tests="6">
    <testcase classname="ScopeTreeView Renders ScopeTreeView correctly with existing scopes ids" name="ScopeTreeView Renders ScopeTreeView correctly with existing scopes ids" time="0.629">
    </testcase>
    <testcase classname="ScopeTreeView Renders ScopeTreeView correctly with non existing scope id" name="ScopeTreeView Renders ScopeTreeView correctly with non existing scope id" time="0.017">
    </testcase>
    <testcase classname="ScopeTreeView Renders ScopeTreeView correctly with non existing selected" name="ScopeTreeView Renders ScopeTreeView correctly with non existing selected" time="0.135">
    </testcase>
    <testcase classname="ScopeTreeView Handles onNodeToggle correctly" name="ScopeTreeView Handles onNodeToggle correctly" time="0.472">
    </testcase>
    <testcase classname="ScopeTreeView Handles multiple select correctly" name="ScopeTreeView Handles multiple select correctly" time="0.613">
    </testcase>
    <testcase classname="ScopeTreeView Handles single select correctly" name="ScopeTreeView Handles single select correctly" time="0.353">
    </testcase>
  </testsuite>
  <testsuite name="ScopeBar" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:26" time="4.474" tests="11">
    <testcase classname="ScopeBar renders the button to show the scope dialog when scope selector is closed" name="ScopeBar renders the button to show the scope dialog when scope selector is closed" time="0.121">
    </testcase>
    <testcase classname="ScopeBar renders the disabled scope button " name="ScopeBar renders the disabled scope button " time="0.044">
    </testcase>
    <testcase classname="ScopeBar renders the button to show the scope dialog when scope selector is opened" name="ScopeBar renders the button to show the scope dialog when scope selector is opened" time="0.054">
    </testcase>
    <testcase classname="ScopeBar Calles passed updateViewState even on click" name="ScopeBar Calles passed updateViewState even on click" time="0.118">
    </testcase>
    <testcase classname="Scope renders a scope bar, selector panel with handlers, and viewport" name="Scope renders a scope bar, selector panel with handlers, and viewport" time="0.666">
    </testcase>
    <testcase classname="Scope Updates show to false in view state when close selector is called" name="Scope Updates show to false in view state when close selector is called" time="0.09">
    </testcase>
    <testcase classname="Scope resets the scope tree state when closing, to ensure current scope is visible" name="Scope resets the scope tree state when closing, to ensure current scope is visible" time="0.142">
    </testcase>
    <testcase classname="Scope defaults to not showing the selector" name="Scope defaults to not showing the selector" time="0.096">
    </testcase>
    <testcase classname="RoutedScope renders within a matched route" name="RoutedScope renders within a matched route" time="0.148">
    </testcase>
    <testcase classname="RoutedScope redirects to Global if route not matched" name="RoutedScope redirects to Global if route not matched" time="0.098">
    </testcase>
    <testcase classname="RoutedScope redirects to default scope if route not matched" name="RoutedScope redirects to default scope if route not matched" time="0.068">
    </testcase>
  </testsuite>
  <testsuite name="useMultipleFieldEditState" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:25" time="6.55" tests="37">
    <testcase classname="useMultipleFieldEditState Provides an access to initial value in edit view for field #id1-prop1-field" name="useMultipleFieldEditState Provides an access to initial value in edit view for field #id1-prop1-field" time="0.126">
    </testcase>
    <testcase classname="useMultipleFieldEditState Provides an access to initial value in edit view for field #id1-prop2-field" name="useMultipleFieldEditState Provides an access to initial value in edit view for field #id1-prop2-field" time="0.024">
    </testcase>
    <testcase classname="useMultipleFieldEditState Provides an access to initial value in edit view for field #id2-prop1-field" name="useMultipleFieldEditState Provides an access to initial value in edit view for field #id2-prop1-field" time="0.023">
    </testcase>
    <testcase classname="useMultipleFieldEditState Provides an access to initial value in edit view for field #id2-prop2-field" name="useMultipleFieldEditState Provides an access to initial value in edit view for field #id2-prop2-field" time="0.028">
    </testcase>
    <testcase classname="useMultipleFieldEditState Provides an access to actual value in edit view for field #id1-prop1-field" name="useMultipleFieldEditState Provides an access to actual value in edit view for field #id1-prop1-field" time="0.024">
    </testcase>
    <testcase classname="useMultipleFieldEditState Provides an access to actual value in edit view for field #id1-prop2-field" name="useMultipleFieldEditState Provides an access to actual value in edit view for field #id1-prop2-field" time="0.029">
    </testcase>
    <testcase classname="useMultipleFieldEditState Provides an access to actual value in edit view for field #id2-prop1-field" name="useMultipleFieldEditState Provides an access to actual value in edit view for field #id2-prop1-field" time="0.021">
    </testcase>
    <testcase classname="useMultipleFieldEditState Provides an access to actual value in edit view for field #id2-prop2-field" name="useMultipleFieldEditState Provides an access to actual value in edit view for field #id2-prop2-field" time="0.03">
    </testcase>
    <testcase classname="useMultipleFieldEditState Sets initial value to empty string as default value field #emptyValues-prop1-field" name="useMultipleFieldEditState Sets initial value to empty string as default value field #emptyValues-prop1-field" time="0.034">
    </testcase>
    <testcase classname="useMultipleFieldEditState Sets initial value to empty string as default value field #emptyValues-prop2-field" name="useMultipleFieldEditState Sets initial value to empty string as default value field #emptyValues-prop2-field" time="0.025">
    </testcase>
    <testcase classname="useMultipleFieldEditState Updates edit view value correctly without validation for field id1 prop2" name="useMultipleFieldEditState Updates edit view value correctly without validation for field id1 prop2" time="0.046">
    </testcase>
    <testcase classname="useMultipleFieldEditState Updates edit view value correctly without validation for field id2 prop2" name="useMultipleFieldEditState Updates edit view value correctly without validation for field id2 prop2" time="0.036">
    </testcase>
    <testcase classname="useMultipleFieldEditState Updates edit view value correctly without validation for field emptyValues prop2" name="useMultipleFieldEditState Updates edit view value correctly without validation for field emptyValues prop2" time="0.029">
    </testcase>
    <testcase classname="useMultipleFieldEditState Updates edit view value correctly with default validation rules when validation was passed for field id1 prop1" name="useMultipleFieldEditState Updates edit view value correctly with default validation rules when validation was passed for field id1 prop1" time="0.309">
    </testcase>
    <testcase classname="useMultipleFieldEditState Updates edit view value correctly with default validation rules when validation was passed for field id2 prop1" name="useMultipleFieldEditState Updates edit view value correctly with default validation rules when validation was passed for field id2 prop1" time="0.277">
    </testcase>
    <testcase classname="useMultipleFieldEditState Updates edit view value correctly with default validation rules when validation was passed for field emptyValues prop1" name="useMultipleFieldEditState Updates edit view value correctly with default validation rules when validation was passed for field emptyValues prop1" time="0.264">
    </testcase>
    <testcase classname="useMultipleFieldEditState Updates edit view value correctly when no validation rules are set for field id1 prop2" name="useMultipleFieldEditState Updates edit view value correctly when no validation rules are set for field id1 prop2" time="0.165">
    </testcase>
    <testcase classname="useMultipleFieldEditState Updates edit view value correctly when no validation rules are set for field id2 prop2" name="useMultipleFieldEditState Updates edit view value correctly when no validation rules are set for field id2 prop2" time="0.099">
    </testcase>
    <testcase classname="useMultipleFieldEditState Updates edit view value correctly when no validation rules are set for field emptyValues prop2" name="useMultipleFieldEditState Updates edit view value correctly when no validation rules are set for field emptyValues prop2" time="0.114">
    </testcase>
    <testcase classname="useMultipleFieldEditState Updates edit view value correctly with required value validation rules when validation was not successful for field id1 prop1" name="useMultipleFieldEditState Updates edit view value correctly with required value validation rules when validation was not successful for field id1 prop1" time="0.32">
    </testcase>
    <testcase classname="useMultipleFieldEditState Updates edit view value correctly with required value validation rules when validation was not successful for field id2 prop1" name="useMultipleFieldEditState Updates edit view value correctly with required value validation rules when validation was not successful for field id2 prop1" time="0.37">
    </testcase>
    <testcase classname="useMultipleFieldEditState Updates edit view value correctly with required value validation rules when validation was not successful for field emptyValues prop1" name="useMultipleFieldEditState Updates edit view value correctly with required value validation rules when validation was not successful for field emptyValues prop1" time="0.391">
    </testcase>
    <testcase classname="useMultipleFieldEditState Updates edit view value correctly with custom validation rules when validation was passed for field id1 prop1" name="useMultipleFieldEditState Updates edit view value correctly with custom validation rules when validation was passed for field id1 prop1" time="0.115">
    </testcase>
    <testcase classname="useMultipleFieldEditState Updates edit view value correctly with custom validation rules when validation was passed for field id2 prop1" name="useMultipleFieldEditState Updates edit view value correctly with custom validation rules when validation was passed for field id2 prop1" time="0.212">
    </testcase>
    <testcase classname="useMultipleFieldEditState Updates edit view value correctly with custom validation rules when validation was passed for field emptyValues prop1" name="useMultipleFieldEditState Updates edit view value correctly with custom validation rules when validation was passed for field emptyValues prop1" time="0.167">
    </testcase>
    <testcase classname="useMultipleFieldEditState Updates edit view value correctly with custom validation rules when validation was not passed" name="useMultipleFieldEditState Updates edit view value correctly with custom validation rules when validation was not passed" time="0.224">
    </testcase>
    <testcase classname="useMultipleFieldEditState Resets correctly edit view field to the initial value field id1 prop1" name="useMultipleFieldEditState Resets correctly edit view field to the initial value field id1 prop1" time="0.035">
    </testcase>
    <testcase classname="useMultipleFieldEditState Resets correctly edit view field to the initial value field id1 prop2" name="useMultipleFieldEditState Resets correctly edit view field to the initial value field id1 prop2" time="0.032">
    </testcase>
    <testcase classname="useMultipleFieldEditState Validates edit state value correctly id1 prop1" name="useMultipleFieldEditState Validates edit state value correctly id1 prop1" time="0.026">
    </testcase>
    <testcase classname="useMultipleFieldEditState Validates edit state value correctly id2 prop1" name="useMultipleFieldEditState Validates edit state value correctly id2 prop1" time="0.027">
    </testcase>
    <testcase classname="useMultipleFieldEditState Validates edit state value correctly emptyValues prop1" name="useMultipleFieldEditState Validates edit state value correctly emptyValues prop1" time="0.096">
    </testcase>
    <testcase classname="useMultipleFieldEditState Uses empty value when property is null or undefined for field undefinedValues prop1" name="useMultipleFieldEditState Uses empty value when property is null or undefined for field undefinedValues prop1" time="0.021">
    </testcase>
    <testcase classname="useMultipleFieldEditState Uses empty value when property is null or undefined for field undefinedValues prop2" name="useMultipleFieldEditState Uses empty value when property is null or undefined for field undefinedValues prop2" time="0.023">
    </testcase>
    <testcase classname="useMultipleFieldEditState Updates edit view value correctly when hook has no additional rules for field id1 prop1" name="useMultipleFieldEditState Updates edit view value correctly when hook has no additional rules for field id1 prop1" time="0.034">
    </testcase>
    <testcase classname="useMultipleFieldEditState Updates edit view value correctly when hook has no additional rules for field id1 prop2" name="useMultipleFieldEditState Updates edit view value correctly when hook has no additional rules for field id1 prop2" time="0.039">
    </testcase>
    <testcase classname="useMultipleFieldEditState Updates edit view value correctly when hook has no additional rules for field id2 prop1" name="useMultipleFieldEditState Updates edit view value correctly when hook has no additional rules for field id2 prop1" time="0.032">
    </testcase>
    <testcase classname="useMultipleFieldEditState Updates edit view value correctly when hook has no additional rules for field id2 prop2" name="useMultipleFieldEditState Updates edit view value correctly when hook has no additional rules for field id2 prop2" time="0.021">
    </testcase>
  </testsuite>
  <testsuite name="useStyles" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:28" time="3.604" tests="18">
    <testcase classname="useStyles build parentInput styles as expected" name="useStyles build parentInput styles as expected" time="0.08">
    </testcase>
    <testcase classname="SearchControl Component Renders Search Control component without errors" name="SearchControl Component Renders Search Control component without errors" time="0.355">
    </testcase>
    <testcase classname="SearchControl Component Renders Search Control component without errors when searchOptions are empty" name="SearchControl Component Renders Search Control component without errors when searchOptions are empty" time="0.119">
    </testcase>
    <testcase classname="SearchControl Component Renders Search Control component without errors when searchOptions are null" name="SearchControl Component Renders Search Control component without errors when searchOptions are null" time="0.132">
    </testcase>
    <testcase classname="SearchControl Component Search Control should trigger the event when hitting Enter even without prop" name="SearchControl Component Search Control should trigger the event when hitting Enter even without prop" time="0.088">
    </testcase>
    <testcase classname="SearchControl Component Search Control should trigger the event when hitting Enter" name="SearchControl Component Search Control should trigger the event when hitting Enter" time="0.062">
    </testcase>
    <testcase classname="SearchControl Component Search Control should trigger the event when clicking on the search button" name="SearchControl Component Search Control should trigger the event when clicking on the search button" time="0.064">
    </testcase>
    <testcase classname="SearchControl Component Search Control should remove value when clicking on the clear button" name="SearchControl Component Search Control should remove value when clicking on the clear button" time="0.062">
    </testcase>
    <testcase classname="SearchControl Component Search Control should trigger the event when clicking on the search button when option change" name="SearchControl Component Search Control should trigger the event when clicking on the search button when option change" time="0.072">
    </testcase>
    <testcase classname="SearchControl Component Search Control should trigger the event when changing the option" name="SearchControl Component Search Control should trigger the event when changing the option" time="0.102">
    </testcase>
    <testcase classname="SearchControl Component Search Control should render with the 2nd value" name="SearchControl Component Search Control should render with the 2nd value" time="0.064">
    </testcase>
    <testcase classname="SearchControl Component focusing text input should set focus on container" name="SearchControl Component focusing text input should set focus on container" time="0.13">
    </testcase>
    <testcase classname="SearchControl Component Renders Search Control component without errors when disabled" name="SearchControl Component Renders Search Control component without errors when disabled" time="0.199">
    </testcase>
    <testcase classname="getSearchOptionValue function returns null if searchOptions is null" name="getSearchOptionValue function returns null if searchOptions is null" time="0.001">
    </testcase>
    <testcase classname="getSearchOptionValue function returns null if searchOptions is undefined" name="getSearchOptionValue function returns null if searchOptions is undefined" time="0">
    </testcase>
    <testcase classname="getSearchOptionValue function returns null if searchOptions is [ [length]: 0 ]" name="getSearchOptionValue function returns null if searchOptions is [ [length]: 0 ]" time="0">
    </testcase>
    <testcase classname="getSearchOptionValue function returns the first element if the selected option cannot be found" name="getSearchOptionValue function returns the first element if the selected option cannot be found" time="0.003">
    </testcase>
    <testcase classname="getSearchOptionValue function returns the selected option value" name="getSearchOptionValue function returns the selected option value" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Select Component" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:29" time="3.43" tests="18">
    <testcase classname="Select Component Fails if selectProps has wrong type" name="Select Component Fails if selectProps has wrong type" time="0.085">
    </testcase>
    <testcase classname="Select Component Renders Select component without errors" name="Select Component Renders Select component without errors" time="0.16">
    </testcase>
    <testcase classname="Select Component Renders Select component with indent classes" name="Select Component Renders Select component with indent classes" time="0.077">
    </testcase>
    <testcase classname="Select Component Renders Select component correctly if Group header is False, null or undefined" name="Select Component Renders Select component correctly if Group header is False, null or undefined" time="0.102">
    </testcase>
    <testcase classname="Select Component Renders Select component with Group Header" name="Select Component Renders Select component with Group Header" time="0.075">
    </testcase>
    <testcase classname="Select Component Renders Select component with disabled options" name="Select Component Renders Select component with disabled options" time="0.079">
    </testcase>
    <testcase classname="Select Component Renders Select component with an error message" name="Select Component Renders Select component with an error message" time="0.072">
    </testcase>
    <testcase classname="Select Component Renders Select component with position override without errors" name="Select Component Renders Select component with position override without errors" time="0.11">
    </testcase>
    <testcase classname="Select Component Renders Select component correctly with disabled prop" name="Select Component Renders Select component correctly with disabled prop" time="0.088">
    </testcase>
    <testcase classname="Select Component Renders Select component correctly with disabled prop without options" name="Select Component Renders Select component correctly with disabled prop without options" time="0.086">
    </testcase>
    <testcase classname="Select Component Renders Select component correctly without props" name="Select Component Renders Select component correctly without props" time="0.063">
    </testcase>
    <testcase classname="Select Component Sorts select options correctly without sorting and without showAll" name="Select Component Sorts select options correctly without sorting and without showAll" time="0.036">
    </testcase>
    <testcase classname="Select Component Sorts select options correctly without sorting" name="Select Component Sorts select options correctly without sorting" time="0.028">
    </testcase>
    <testcase classname="Select Component Sorts select options correctly with default sorting" name="Select Component Sorts select options correctly with default sorting" time="0.043">
    </testcase>
    <testcase classname="Select Component Sorts select options correctly with numeric sorting" name="Select Component Sorts select options correctly with numeric sorting" time="0.031">
    </testcase>
    <testcase classname="Select Component Select component handles change" name="Select Component Select component handles change" time="0.037">
    </testcase>
    <testcase classname="Select Component Renders Icon Select component correctly" name="Select Component Renders Icon Select component correctly" time="0.116">
    </testcase>
    <testcase classname="Select Component Changes Icon Select open state on click" name="Select Component Changes Icon Select open state on click" time="0.242">
    </testcase>
  </testsuite>
  <testsuite name="Provision" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:29" time="3.117" tests="7">
    <testcase classname="Provision renders" name="Provision renders" time="0.092">
    </testcase>
    <testcase classname="Provision handles getting no theme" name="Provision handles getting no theme" time="0.021">
    </testcase>
    <testcase classname="Provision handles getting no mui theme" name="Provision handles getting no mui theme" time="0.046">
    </testcase>
    <testcase classname="Provision fails if no children given" name="Provision fails if no children given" time="0.014">
    </testcase>
    <testcase classname="Provision global styles ensures required styling on html element to make IE11 happy" name="Provision global styles ensures required styling on html element to make IE11 happy" time="0.023">
    </testcase>
    <testcase classname="Provision global styles ensures required body styling" name="Provision global styles ensures required body styling" time="0.023">
    </testcase>
    <testcase classname="Provision global styles ensures required viewport styling" name="Provision global styles ensures required viewport styling" time="0.027">
    </testcase>
  </testsuite>
  <testsuite name="createInput" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:29" time="3.501" tests="7">
    <testcase classname="createInput Creates InputBase correctly" name="createInput Creates InputBase correctly" time="0.111">
    </testcase>
    <testcase classname="createInput Creates Checkbox correctly" name="createInput Creates Checkbox correctly" time="0.115">
    </testcase>
    <testcase classname="createInput Creates CheckboxGroup correctly" name="createInput Creates CheckboxGroup correctly" time="0.174">
    </testcase>
    <testcase classname="createInput Creates Radio correctly" name="createInput Creates Radio correctly" time="0.171">
    </testcase>
    <testcase classname="createInput Creates Select correctly" name="createInput Creates Select correctly" time="0.127">
    </testcase>
    <testcase classname="createInput Creates StandaloneRadio correctly" name="createInput Creates StandaloneRadio correctly" time="0.049">
    </testcase>
    <testcase classname="createInput Creates Switch correctly" name="createInput Creates Switch correctly" time="0.071">
    </testcase>
  </testsuite>
  <testsuite name="Translations " errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:31" time="3.043" tests="5">
    <testcase classname="Translations  Renders Translations  correctly" name="Translations  Renders Translations  correctly" time="0.223">
    </testcase>
    <testcase classname="Translations  Renders Translations  with error correctly" name="Translations  Renders Translations  with error correctly" time="0.161">
    </testcase>
    <testcase classname="Translations  Translations  component handles change" name="Translations  Translations  component handles change" time="0.078">
    </testcase>
    <testcase classname="Translations  Compare translate strings" name="Translations  Compare translate strings" time="0.001">
    </testcase>
    <testcase classname="Translations  Compare the same translate strings" name="Translations  Compare the same translate strings" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Modules" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:28" time="5.676" tests="6">
    <testcase classname="Modules renders a module table with navigation tabs" name="Modules renders a module table with navigation tabs" time="0.394">
    </testcase>
    <testcase classname="Modules renders a module table as a routing system (user route)" name="Modules renders a module table as a routing system (user route)" time="0.274">
    </testcase>
    <testcase classname="Modules renders a module table as a routing system (photo route)" name="Modules renders a module table as a routing system (photo route)" time="0.139">
    </testcase>
    <testcase classname="Modules renders a module table as a routing system (demo route)" name="Modules renders a module table as a routing system (demo route)" time="0.125">
    </testcase>
    <testcase classname="Modules with custom href renders a module table with custom prepend href " name="Modules with custom href renders a module table with custom prepend href " time="0.157">
    </testcase>
    <testcase classname="Modules check is scope authorized renders a module table when scope not Authorized" name="Modules check is scope authorized renders a module table when scope not Authorized" time="0.126">
    </testcase>
  </testsuite>
  <testsuite name="FieldElements" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:31" time="2.999" tests="2">
    <testcase classname="FieldElements renders a list of field elements, handling fieldsets, combination fields, and lists" name="FieldElements renders a list of field elements, handling fieldsets, combination fields, and lists" time="0.684">
    </testcase>
    <testcase classname="FieldElements handles absent update function and values" name="FieldElements handles absent update function and values" time="0.018">
    </testcase>
  </testsuite>
  <testsuite name="Autocomplete Component" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:32" time="2.568" tests="6">
    <testcase classname="Autocomplete Component Fails if autocompleteProps has wrong type" name="Autocomplete Component Fails if autocompleteProps has wrong type" time="0.056">
    </testcase>
    <testcase classname="Autocomplete Component Renders Autocomplete component without errors" name="Autocomplete Component Renders Autocomplete component without errors" time="0.221">
    </testcase>
    <testcase classname="Autocomplete Component Renders Autocomplete component without value" name="Autocomplete Component Renders Autocomplete component without value" time="0.161">
    </testcase>
    <testcase classname="Autocomplete Component Renders Autocomplete component with error" name="Autocomplete Component Renders Autocomplete component with error" time="0.146">
    </testcase>
    <testcase classname="Autocomplete Component Autocomplete component handles change" name="Autocomplete Component Autocomplete component handles change" time="0.058">
    </testcase>
    <testcase classname="Autocomplete Component Autocomplete component handles empty value" name="Autocomplete Component Autocomplete component handles empty value" time="0.044">
    </testcase>
  </testsuite>
  <testsuite name="Bar" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:31" time="3.449" tests="14">
    <testcase classname="Bar renders a bar containing tabs" name="Bar renders a bar containing tabs" time="0.317">
    </testcase>
    <testcase classname="Bar renders a bar containing only module" name="Bar renders a bar containing only module" time="0.072">
    </testcase>
    <testcase classname="Bar hides tabs and shows dropdown when scrollable bar is too narrow to show them all" name="Bar hides tabs and shows dropdown when scrollable bar is too narrow to show them all" time="0.38">
    </testcase>
    <testcase classname="useTabScroll test functions renders a bar with tabs" name="useTabScroll test functions renders a bar with tabs" time="0.061">
    </testcase>
    <testcase classname="useTabScroll test functions can set widths" name="useTabScroll test functions can set widths" time="0.058">
    </testcase>
    <testcase classname="useTabScroll test functions can reset bar width" name="useTabScroll test functions can reset bar width" time="0.084">
    </testcase>
    <testcase classname="useTabScroll test functions fires resize event if bar size reset" name="useTabScroll test functions fires resize event if bar size reset" time="0.098">
    </testcase>
    <testcase classname="useTabScroll sets its width state" name="useTabScroll sets its width state" time="0.045">
    </testcase>
    <testcase classname="useTabScroll scrolls one tab past the active element if possible" name="useTabScroll scrolls one tab past the active element if possible" time="0.034">
    </testcase>
    <testcase classname="useTabScroll scrolls to the active element if it is last" name="useTabScroll scrolls to the active element if it is last" time="0.026">
    </testcase>
    <testcase classname="useTabScroll sets last shown tab if bar wide enough to hold all" name="useTabScroll sets last shown tab if bar wide enough to hold all" time="0.026">
    </testcase>
    <testcase classname="useTabScroll sets last shown tab according to how many will fit on screen" name="useTabScroll sets last shown tab according to how many will fit on screen" time="0.025">
    </testcase>
    <testcase classname="useTabScroll sets last shown tab to make sure active tab + next tab are shown" name="useTabScroll sets last shown tab to make sure active tab + next tab are shown" time="0.028">
    </testcase>
    <testcase classname="useTabScroll changes last shown tab if bar is resized" name="useTabScroll changes last shown tab if bar is resized" time="0.051">
    </testcase>
  </testsuite>
  <testsuite name="Expansion Panel" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:32" time="2.991" tests="13">
    <testcase classname="Expansion Panel Renders Expansion Panel with actions if actions are not null" name="Expansion Panel Renders Expansion Panel with actions if actions are not null" time="0.245">
    </testcase>
    <testcase classname="Expansion Panel Renders Expansion Panel Actions if actions are not null" name="Expansion Panel Renders Expansion Panel Actions if actions are not null" time="0.085">
    </testcase>
    <testcase classname="Expansion Panel Not renders Expansion Panel Actions if actions are null" name="Expansion Panel Not renders Expansion Panel Actions if actions are null" time="0.052">
    </testcase>
    <testcase classname="Expansion Panel Fails if expansionPanelProps has wrong type" name="Expansion Panel Fails if expansionPanelProps has wrong type" time="0.083">
    </testcase>
    <testcase classname="Expansion Panel Fails if expansionPanelActionsProps has wrong type" name="Expansion Panel Fails if expansionPanelActionsProps has wrong type" time="0.011">
    </testcase>
    <testcase classname="Expansion Panel Uses expansionPanelProps.expanded correctly" name="Expansion Panel Uses expansionPanelProps.expanded correctly" time="0.051">
    </testcase>
    <testcase classname="Expansion Panel Uses expansionPanelProps.disabled correctly" name="Expansion Panel Uses expansionPanelProps.disabled correctly" time="0.08">
    </testcase>
    <testcase classname="Expansion Panel Default value for disabled property is correct if expansionPanelProps wasn&apos;t passed" name="Expansion Panel Default value for disabled property is correct if expansionPanelProps wasn&apos;t passed" time="0.056">
    </testcase>
    <testcase classname="Expansion Panel Default value for disabled property is correct if expansionPanelProps was passed without setting that" name="Expansion Panel Default value for disabled property is correct if expansionPanelProps was passed without setting that" time="0.086">
    </testcase>
    <testcase classname="Expansion Panel Uses expansionPanelActionsProps.disableSpacing correctly" name="Expansion Panel Uses expansionPanelActionsProps.disableSpacing correctly" time="0.144">
    </testcase>
    <testcase classname="Expansion Panel DisableSpacing value for disabled property is correct if expansionPanelActionsProps wasn&apos;t passed" name="Expansion Panel DisableSpacing value for disabled property is correct if expansionPanelActionsProps wasn&apos;t passed" time="0.08">
    </testcase>
    <testcase classname="Expansion Panel DisableSpacing value for disabled property is correct if expansionPanelActionsProps was passed without setting that" name="Expansion Panel DisableSpacing value for disabled property is correct if expansionPanelActionsProps was passed without setting that" time="0.05">
    </testcase>
    <testcase classname="Expansion Panel handles internal on change function" name="Expansion Panel handles internal on change function" time="0.128">
    </testcase>
  </testsuite>
  <testsuite name="RootNode" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:33" time="3.375" tests="18">
    <testcase classname="RootNode renders a root node" name="RootNode renders a root node" time="0.081">
    </testcase>
    <testcase classname="RootNode renders a selected root node" name="RootNode renders a selected root node" time="0.039">
    </testcase>
    <testcase classname="LeafNode renders a closed node with children" name="LeafNode renders a closed node with children" time="0.109">
    </testcase>
    <testcase classname="LeafNode renders a closed node with children" name="LeafNode renders a closed node with children" time="0.254">
    </testcase>
    <testcase classname="LeafNode renders a node with no children" name="LeafNode renders a node with no children" time="0.053">
    </testcase>
    <testcase classname="LeafNode renders a selected node" name="LeafNode renders a selected node" time="0.062">
    </testcase>
    <testcase classname="LeafNode updates nodeState on click on the indicator, opening if closed" name="LeafNode updates nodeState on click on the indicator, opening if closed" time="0.067">
    </testcase>
    <testcase classname="LeafNode updates nodeState on click on the indicator, closing if open" name="LeafNode updates nodeState on click on the indicator, closing if open" time="0.042">
    </testcase>
    <testcase classname="Node renders a nonexistent node as nothing" name="Node renders a nonexistent node as nothing" time="0.016">
    </testcase>
    <testcase classname="Node renders a childless node as only the leaf" name="Node renders a childless node as only the leaf" time="0.073">
    </testcase>
    <testcase classname="Node renders a childless root node as only the leaf" name="Node renders a childless root node as only the leaf" time="0.054">
    </testcase>
    <testcase classname="Node renders a node with children as leaf and branch" name="Node renders a node with children as leaf and branch" time="0.122">
    </testcase>
    <testcase classname="Node renders a selected node" name="Node renders a selected node" time="0.05">
    </testcase>
    <testcase classname="Node renders a closed node with children as only the leaf" name="Node renders a closed node with children as only the leaf" time="0.068">
    </testcase>
    <testcase classname="Node renders a selected root node" name="Node renders a selected root node" time="0.043">
    </testcase>
    <testcase classname="Node renders a root node with children as leaf and branch" name="Node renders a root node with children as leaf and branch" time="0.106">
    </testcase>
    <testcase classname="Node with openAll set renders a node with children as leaf and branch" name="Node with openAll set renders a node with children as leaf and branch" time="0.121">
    </testcase>
    <testcase classname="Node with openAll set renders a closed node with children as if open" name="Node with openAll set renders a closed node with children as if open" time="0.133">
    </testcase>
  </testsuite>
  <testsuite name="DatePicker" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:34" time="3.199" tests="18">
    <testcase classname="DatePicker sets up a date to locale (en-US)" name="DatePicker sets up a date to locale (en-US)" time="0.202">
    </testcase>
    <testcase classname="DatePicker sets up a default empty date" name="DatePicker sets up a default empty date" time="0.135">
    </testcase>
    <testcase classname="DatePicker sets up a date to locale with time 5am (en-US)" name="DatePicker sets up a date to locale with time 5am (en-US)" time="0.078">
    </testcase>
    <testcase classname="DatePicker sets up a date to locale with time 5pm (en-US)" name="DatePicker sets up a date to locale with time 5pm (en-US)" time="0.047">
    </testcase>
    <testcase classname="DatePicker sets up a date to locale with time 12am (en-US)" name="DatePicker sets up a date to locale with time 12am (en-US)" time="0.045">
    </testcase>
    <testcase classname="DatePicker should render error" name="DatePicker should render error" time="0.051">
    </testcase>
    <testcase classname="DatePicker sets up only time to locale with time 12am (en-US)" name="DatePicker sets up only time to locale with time 12am (en-US)" time="0.049">
    </testcase>
    <testcase classname="DatePicker sets up only time to locale with time 12am (en-US) and show only time select" name="DatePicker sets up only time to locale with time 12am (en-US) and show only time select" time="0.045">
    </testcase>
    <testcase classname="DatePicker sets up a date to locale with time 12am when read only (en-US)" name="DatePicker sets up a date to locale with time 12am when read only (en-US)" time="0.027">
    </testcase>
    <testcase classname="DatePicker should call onChange prop" name="DatePicker should call onChange prop" time="0.08">
    </testcase>
    <testcase classname="DatePicker should update with no onChange prop" name="DatePicker should update with no onChange prop" time="0.019">
    </testcase>
    <testcase classname="createFormat Retrieves proper format if locale is in AMPMLocales list for date and time" name="createFormat Retrieves proper format if locale is in AMPMLocales list for date and time" time="0.001">
    </testcase>
    <testcase classname="createFormat Retrieves proper format if locale is in AMPMLocales list for date" name="createFormat Retrieves proper format if locale is in AMPMLocales list for date" time="0.001">
    </testcase>
    <testcase classname="createFormat Retrieves proper format if locale is in AMPMLocales list for time" name="createFormat Retrieves proper format if locale is in AMPMLocales list for time" time="0.001">
    </testcase>
    <testcase classname="createFormat Retrieves proper format if locale is not in AMPMLocales list for date and time" name="createFormat Retrieves proper format if locale is not in AMPMLocales list for date and time" time="0.001">
    </testcase>
    <testcase classname="createFormat Retrieves proper format if locale is not in AMPMLocales list for date" name="createFormat Retrieves proper format if locale is not in AMPMLocales list for date" time="0.001">
    </testcase>
    <testcase classname="createFormat Retrieves proper format if locale is not in AMPMLocales list for time" name="createFormat Retrieves proper format if locale is not in AMPMLocales list for time" time="0">
    </testcase>
    <testcase classname="createFormat Retrieves date and time in 24h system by default" name="createFormat Retrieves date and time in 24h system by default" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Section Expansion Panel" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:34" time="3.067" tests="13">
    <testcase classname="Section Expansion Panel Renders Section Expansion Panel with actions if actions are not null" name="Section Expansion Panel Renders Section Expansion Panel with actions if actions are not null" time="0.16">
    </testcase>
    <testcase classname="Section Expansion Panel Renders Section Expansion Panel Actions if actions are not null" name="Section Expansion Panel Renders Section Expansion Panel Actions if actions are not null" time="0.071">
    </testcase>
    <testcase classname="Section Expansion Panel Not renders Section Expansion Panel Actions if actions are null" name="Section Expansion Panel Not renders Section Expansion Panel Actions if actions are null" time="0.065">
    </testcase>
    <testcase classname="Section Expansion Panel Fails if expansionPanelProps has wrong type" name="Section Expansion Panel Fails if expansionPanelProps has wrong type" time="0.091">
    </testcase>
    <testcase classname="Section Expansion Panel Fails if expansionPanelActionsProps has wrong type" name="Section Expansion Panel Fails if expansionPanelActionsProps has wrong type" time="0.013">
    </testcase>
    <testcase classname="Section Expansion Panel Uses expansionPanelProps.defaultExpanded correctly" name="Section Expansion Panel Uses expansionPanelProps.defaultExpanded correctly" time="0.072">
    </testcase>
    <testcase classname="Section Expansion Panel Uses expansionPanelProps.disabled correctly" name="Section Expansion Panel Uses expansionPanelProps.disabled correctly" time="0.052">
    </testcase>
    <testcase classname="Section Expansion Panel Default value for disabled property is correct if expansionPanelProps wasn&apos;t passed" name="Section Expansion Panel Default value for disabled property is correct if expansionPanelProps wasn&apos;t passed" time="0.049">
    </testcase>
    <testcase classname="Section Expansion Panel Default value for disabled property is correct if expansionPanelProps was passed without setting that" name="Section Expansion Panel Default value for disabled property is correct if expansionPanelProps was passed without setting that" time="0.061">
    </testcase>
    <testcase classname="Section Expansion Panel Uses expansionPanelActionsProps.disableSpacing correctly" name="Section Expansion Panel Uses expansionPanelActionsProps.disableSpacing correctly" time="0.076">
    </testcase>
    <testcase classname="Section Expansion Panel DisableSpacing value for disabled property is correct if expansionPanelActionsProps wasn&apos;t passed" name="Section Expansion Panel DisableSpacing value for disabled property is correct if expansionPanelActionsProps wasn&apos;t passed" time="0.069">
    </testcase>
    <testcase classname="Section Expansion Panel DisableSpacing value for disabled property is correct if expansionPanelActionsProps was passed without setting that" name="Section Expansion Panel DisableSpacing value for disabled property is correct if expansionPanelActionsProps was passed without setting that" time="0.083">
    </testcase>
    <testcase classname="Section Expansion Panel handles internal on change function" name="Section Expansion Panel handles internal on change function" time="0.122">
    </testcase>
  </testsuite>
  <testsuite name="TreeItem" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:35" time="2.971" tests="11">
    <testcase classname="TreeItem Renders Tree Item correctly for global scope" name="TreeItem Renders Tree Item correctly for global scope" time="0.262">
    </testcase>
    <testcase classname="TreeItem Renders Tree Item correctly for virtual scope" name="TreeItem Renders Tree Item correctly for virtual scope" time="0.125">
    </testcase>
    <testcase classname="TreeItem Calls scope select handler on label click if scope type is not virtual" name="TreeItem Calls scope select handler on label click if scope type is not virtual" time="0.122">
    </testcase>
    <testcase classname="TreeItem Does not calls scope select handler on label click if scope type is virtual" name="TreeItem Does not calls scope select handler on label click if scope type is virtual" time="0.088">
    </testcase>
    <testcase classname="ScopeLabel Renders Scope Label for root scope correctly" name="ScopeLabel Renders Scope Label for root scope correctly" time="0.094">
    </testcase>
    <testcase classname="ScopeLabel Renders Scope Label for non root scope correctly" name="ScopeLabel Renders Scope Label for non root scope correctly" time="0.079">
    </testcase>
    <testcase classname="ScopeIcon Renders correct Icon for scope type Global" name="ScopeIcon Renders correct Icon for scope type Global" time="0.028">
    </testcase>
    <testcase classname="ScopeIcon Renders correct Icon for scope type Virtual" name="ScopeIcon Renders correct Icon for scope type Virtual" time="0.019">
    </testcase>
    <testcase classname="ScopeIcon Renders correct Icon for scope type Sales" name="ScopeIcon Renders correct Icon for scope type Sales" time="0.018">
    </testcase>
    <testcase classname="ScopeIcon Renders correct Icon for scope type Dependant" name="ScopeIcon Renders correct Icon for scope type Dependant" time="0.021">
    </testcase>
    <testcase classname="ScopeIcon Renders nothing if type is wrong" name="ScopeIcon Renders nothing if type is wrong" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="DropMenu" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:35" time="3.054" tests="11">
    <testcase classname="DropMenu renders an anchor and a menu" name="DropMenu renders an anchor and a menu" time="0.043">
    </testcase>
    <testcase classname="DropMenu flags anchor and menu when open" name="DropMenu flags anchor and menu when open" time="0.041">
    </testcase>
    <testcase classname="DropMenu renders a right-aligned menu on demand" name="DropMenu renders a right-aligned menu on demand" time="0.032">
    </testcase>
    <testcase classname="DropMenu when clicked renders the menu" name="DropMenu when clicked renders the menu" time="0.117">
    </testcase>
    <testcase classname="DropMenu closes the menu if clicked outside" name="DropMenu closes the menu if clicked outside" time="0.088">
    </testcase>
    <testcase classname="DropMenu component child renders an anchor and a menu" name="DropMenu component child renders an anchor and a menu" time="0.023">
    </testcase>
    <testcase classname="DropMenu component child flags children when open" name="DropMenu component child flags children when open" time="0.036">
    </testcase>
    <testcase classname="DropMenu component child when clicked renders the menu" name="DropMenu component child when clicked renders the menu" time="0.104">
    </testcase>
    <testcase classname="DropMenu component child closes the menu if clicked outside" name="DropMenu component child closes the menu if clicked outside" time="0.08">
    </testcase>
    <testcase classname="DropMenu two adjacent, independent menus renders the anchors" name="DropMenu two adjacent, independent menus renders the anchors" time="0.031">
    </testcase>
    <testcase classname="DropMenu two adjacent, independent menus when clicked renders only the clicked menu" name="DropMenu two adjacent, independent menus when clicked renders only the clicked menu" time="0.241">
    </testcase>
  </testsuite>
  <testsuite name="TreeView" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:35" time="3.174" tests="10">
    <testcase classname="TreeView warning modes renders empty node contents if Content prop absent" name="TreeView warning modes renders empty node contents if Content prop absent" time="0.122">
    </testcase>
    <testcase classname="TreeView warning modes renders an empty wrapper if missing getNode" name="TreeView warning modes renders an empty wrapper if missing getNode" time="0.021">
    </testcase>
    <testcase classname="TreeView shows a tree root and first level of child nodes" name="TreeView shows a tree root and first level of child nodes" time="0.078">
    </testcase>
    <testcase classname="TreeView shows open nodes according to a default state" name="TreeView shows open nodes according to a default state" time="0.145">
    </testcase>
    <testcase classname="TreeView shows an open branch according to view state" name="TreeView shows an open branch according to view state" time="0.119">
    </testcase>
    <testcase classname="TreeView shows a selected node" name="TreeView shows a selected node" time="0.133">
    </testcase>
    <testcase classname="TreeView overrides default node state with view state" name="TreeView overrides default node state with view state" time="0.065">
    </testcase>
    <testcase classname="TreeView updates view state on indicator click" name="TreeView updates view state on indicator click" time="0.119">
    </testcase>
    <testcase classname="TreeView shows all nodes if openAll flag is set" name="TreeView shows all nodes if openAll flag is set" time="0.142">
    </testcase>
    <testcase classname="TreeView passes unknown props to all nodes" name="TreeView passes unknown props to all nodes" time="0.126">
    </testcase>
  </testsuite>
  <testsuite name="Navigation" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:36" time="2.953" tests="1">
    <testcase classname="Navigation renders a navigation tab bar with state-based props" name="Navigation renders a navigation tab bar with state-based props" time="0.359">
    </testcase>
  </testsuite>
  <testsuite name="SegmentPage" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:36" time="3.052" tests="6">
    <testcase classname="SegmentPage shows a list of links to segments" name="SegmentPage shows a list of links to segments" time="0.271">
    </testcase>
    <testcase classname="SegmentPage shows a view over the segment list/view" name="SegmentPage shows a view over the segment list/view" time="0.192">
    </testcase>
    <testcase classname="SegmentPage shows a subpage under the matched segment" name="SegmentPage shows a subpage under the matched segment" time="0.102">
    </testcase>
    <testcase classname="SegmentPage shows the relevant page under a segment if it is matched" name="SegmentPage shows the relevant page under a segment if it is matched" time="0.017">
    </testcase>
    <testcase classname="SegmentPage has a catching redirect when no path is matched" name="SegmentPage has a catching redirect when no path is matched" time="0.185">
    </testcase>
    <testcase classname="SegmentPage segment item is not flagged as modified because the entityId was overridden" name="SegmentPage segment item is not flagged as modified because the entityId was overridden" time="0.164">
    </testcase>
  </testsuite>
  <testsuite name="TransferList" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:37" time="2.784" tests="6">
    <testcase classname="TransferList Renders TransferList correctly" name="TransferList Renders TransferList correctly" time="0.277">
    </testcase>
    <testcase classname="TransferList Renders TransferList with custom content correctly" name="TransferList Renders TransferList with custom content correctly" time="0.162">
    </testcase>
    <testcase classname="TransferList Calls onChange when item click" name="TransferList Calls onChange when item click" time="0.24">
    </testcase>
    <testcase classname="TransferList addButton disabled because no item selected" name="TransferList addButton disabled because no item selected" time="0.109">
    </testcase>
    <testcase classname="TransferList handle scrolling event" name="TransferList handle scrolling event" time="0.047">
    </testcase>
    <testcase classname="TransferList do not fail when onScroll is not specified" name="TransferList do not fail when onScroll is not specified" time="0.051">
    </testcase>
  </testsuite>
  <testsuite name="CategoryList" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:38" time="2.781" tests="15">
    <testcase classname="CategoryList renders nothing if no columnDefs" name="CategoryList renders nothing if no columnDefs" time="0.015">
    </testcase>
    <testcase classname="CategoryList renders a table" name="CategoryList renders a table" time="0.041">
    </testcase>
    <testcase classname="CategoryList renders just a header" name="CategoryList renders just a header" time="0.032">
    </testcase>
    <testcase classname="CategoryList renders a placeholder if one given and no rows" name="CategoryList renders a placeholder if one given and no rows" time="0.06">
    </testcase>
    <testcase classname="CategoryList renders a category row and a row for each row data object" name="CategoryList renders a category row and a row for each row data object" time="0.073">
    </testcase>
    <testcase classname="CategoryList renders rows with onClick handlers" name="CategoryList renders rows with onClick handlers" time="0.072">
    </testcase>
    <testcase classname="CategoryList renders a category header for each found category" name="CategoryList renders a category header for each found category" time="0.135">
    </testcase>
    <testcase classname="CategoryList renders a closed category" name="CategoryList renders a closed category" time="0.1">
    </testcase>
    <testcase classname="CategoryList renders a closed category open when flagged to open all" name="CategoryList renders a closed category open when flagged to open all" time="0.149">
    </testcase>
    <testcase classname="CategoryList toggles a category closed" name="CategoryList toggles a category closed" time="0.065">
    </testcase>
    <testcase classname="CategoryList toggles a category open" name="CategoryList toggles a category open" time="0.029">
    </testcase>
    <testcase classname="CategoryList renders rows with data-based backgrounds" name="CategoryList renders rows with data-based backgrounds" time="0.074">
    </testcase>
    <testcase classname="CategoryList renders rows with index-based backgrounds" name="CategoryList renders rows with index-based backgrounds" time="0.068">
    </testcase>
    <testcase classname="CategoryList renders a header based on column definitions" name="CategoryList renders a header based on column definitions" time="0.123">
    </testcase>
    <testcase classname="CategoryList renders a header when all rows are selected" name="CategoryList renders a header when all rows are selected" time="0.105">
    </testcase>
  </testsuite>
  <testsuite name="StepperModal" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:38" time="2.481" tests="5">
    <testcase classname="StepperModal Renders StepperModal correctly" name="StepperModal Renders StepperModal correctly" time="0.302">
    </testcase>
    <testcase classname="StepperModal Renders StepperModal correctly with disabled step" name="StepperModal Renders StepperModal correctly with disabled step" time="0.14">
    </testcase>
    <testcase classname="StepperModal Render closed modal" name="StepperModal Render closed modal" time="0.004">
    </testcase>
    <testcase classname="StepperModal Calls cancelCallback when cancel button is pressed" name="StepperModal Calls cancelCallback when cancel button is pressed" time="0.083">
    </testcase>
    <testcase classname="StepperModal Calls cancelCallback when ok button is pressed" name="StepperModal Calls cancelCallback when ok button is pressed" time="0.153">
    </testcase>
  </testsuite>
  <testsuite name="List" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:38" time="2.67" tests="16">
    <testcase classname="List renders nothing if no columnDefs" name="List renders nothing if no columnDefs" time="0.012">
    </testcase>
    <testcase classname="List renders a table with no rows" name="List renders a table with no rows" time="0.044">
    </testcase>
    <testcase classname="List renders a placeholder if one given and no rows" name="List renders a placeholder if one given and no rows" time="0.071">
    </testcase>
    <testcase classname="List renders a row for each row data object" name="List renders a row for each row data object" time="0.058">
    </testcase>
    <testcase classname="List renders rows with click handlers" name="List renders rows with click handlers" time="0.057">
    </testcase>
    <testcase classname="List renders rows with data-based backgrounds" name="List renders rows with data-based backgrounds" time="0.043">
    </testcase>
    <testcase classname="List renders rows with index-based backgrounds" name="List renders rows with index-based backgrounds" time="0.057">
    </testcase>
    <testcase classname="List renders a header based on column definitions" name="List renders a header based on column definitions" time="0.162">
    </testcase>
    <testcase classname="List renders a header when all rows are selected" name="List renders a header when all rows are selected" time="0.093">
    </testcase>
    <testcase classname="List virtual scrolling renders a header with all rows identified when virtual" name="List virtual scrolling renders a header with all rows identified when virtual" time="0.1">
    </testcase>
    <testcase classname="List virtual scrolling renders at top" name="List virtual scrolling renders at top" time="0.081">
    </testcase>
    <testcase classname="List virtual scrolling renders near top" name="List virtual scrolling renders near top" time="0.092">
    </testcase>
    <testcase classname="List virtual scrolling renders in the middle" name="List virtual scrolling renders in the middle" time="0.091">
    </testcase>
    <testcase classname="List virtual scrolling renders near end" name="List virtual scrolling renders near end" time="0.08">
    </testcase>
    <testcase classname="List virtual scrolling renders at end" name="List virtual scrolling renders at end" time="0.052">
    </testcase>
    <testcase classname="Placeholder renders wrappers to center the placeholder in the table" name="Placeholder renders wrappers to center the placeholder in the table" time="0.025">
    </testcase>
  </testsuite>
  <testsuite name="Toolbar" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:38" time="2.799" tests="13">
    <testcase classname="Toolbar renders a toolbar" name="Toolbar renders a toolbar" time="0.042">
    </testcase>
    <testcase classname="Toolbar renders tools according to its configuration" name="Toolbar renders tools according to its configuration" time="0.511">
    </testcase>
    <testcase classname="toolComponents.input renders a styled input" name="toolComponents.input renders a styled input" time="0.012">
    </testcase>
    <testcase classname="toolComponents.button renders a styled empty button" name="toolComponents.button renders a styled empty button" time="0.014">
    </testcase>
    <testcase classname="toolComponents.button renders a styled button with icon" name="toolComponents.button renders a styled button with icon" time="0.015">
    </testcase>
    <testcase classname="toolComponents.button renders a styled button with text" name="toolComponents.button renders a styled button with text" time="0.02">
    </testcase>
    <testcase classname="toolComponents.button renders a styled button with text and icon" name="toolComponents.button renders a styled button with text and icon" time="0.022">
    </testcase>
    <testcase classname="toolComponents.button ToolbarButton renders an IconButton" name="toolComponents.button ToolbarButton renders an IconButton" time="0.023">
    </testcase>
    <testcase classname="toolComponents.group renders a styled group" name="toolComponents.group renders a styled group" time="0.03">
    </testcase>
    <testcase classname="toolComponents.spacer renders a styled spacer" name="toolComponents.spacer renders a styled spacer" time="0.007">
    </testcase>
    <testcase classname="toolComponents.separator renders a styled separator" name="toolComponents.separator renders a styled separator" time="0.006">
    </testcase>
    <testcase classname="toolComponents.label renders a styled label" name="toolComponents.label renders a styled label" time="0.009">
    </testcase>
    <testcase classname="toolComponents.radio renders a styled radio" name="toolComponents.radio renders a styled radio" time="0.167">
    </testcase>
  </testsuite>
  <testsuite name="About" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:39" time="2.31" tests="8">
    <testcase classname="About renders an about box with messages and background images" name="About renders an about box with messages and background images" time="0.151">
    </testcase>
    <testcase classname="About view state handler update show value when clicking on close button" name="About view state handler update show value when clicking on close button" time="0.045">
    </testcase>
    <testcase classname="About renders an about box with messages and background images but without versions" name="About renders an about box with messages and background images but without versions" time="0.065">
    </testcase>
    <testcase classname="About renders an about box with about ling to the french version of the web site." name="About renders an about box with about ling to the french version of the web site." time="0.078">
    </testcase>
    <testcase classname="About AboutBox has a background image" name="About AboutBox has a background image" time="0.007">
    </testcase>
    <testcase classname="About AboutBox renders an opacity-transitioning box" name="About AboutBox renders an opacity-transitioning box" time="0.006">
    </testcase>
    <testcase classname="About getClickOutsideHandler does not stop events or update state when closed" name="About getClickOutsideHandler does not stop events or update state when closed" time="0.003">
    </testcase>
    <testcase classname="About getClickOutsideHandler does stop events and close popup when open" name="About getClickOutsideHandler does stop events and close popup when open" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="SubPage" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:40" time="2.351" tests="5">
    <testcase classname="SubPage shows a dialog containing the configured view" name="SubPage shows a dialog containing the configured view" time="0.179">
    </testcase>
    <testcase classname="SubPage closes when clicking close button" name="SubPage closes when clicking close button" time="0.084">
    </testcase>
    <testcase classname="SubPage closes when clicking on backdrop" name="SubPage closes when clicking on backdrop" time="0.045">
    </testcase>
    <testcase classname="SubPage calls the tool selector with state to provide a toolbar config" name="SubPage calls the tool selector with state to provide a toolbar config" time="0.088">
    </testcase>
    <testcase classname="SubPage calls the tool function selector to generate functions for toolbar" name="SubPage calls the tool function selector to generate functions for toolbar" time="0.144">
    </testcase>
  </testsuite>
  <testsuite name="class name helpers" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:40" time="2.107" tests="44">
    <testcase classname="class name helpers getElmClasses finds all class names of an element" name="class name helpers getElmClasses finds all class names of an element" time="0.008">
    </testcase>
    <testcase classname="class name helpers getElmClasses works with svg elements" name="class name helpers getElmClasses works with svg elements" time="0.005">
    </testcase>
    <testcase classname="class name helpers getElmClasses works with styled components" name="class name helpers getElmClasses works with styled components" time="0.024">
    </testcase>
    <testcase classname="class name helpers getElmClasses throws an error if no class found on DOM element" name="class name helpers getElmClasses throws an error if no class found on DOM element" time="0.005">
    </testcase>
    <testcase classname="class name helpers getElmClasses throws an error if no class found on component" name="class name helpers getElmClasses throws an error if no class found on component" time="0.004">
    </testcase>
    <testcase classname="class name helpers getElmClasses throws an error if no class found on SVG element" name="class name helpers getElmClasses throws an error if no class found on SVG element" time="0.004">
    </testcase>
    <testcase classname="class name helpers getElmClasses can use a custom container element type" name="class name helpers getElmClasses can use a custom container element type" time="0.004">
    </testcase>
    <testcase classname="class name helpers getClassName finds the first class name of the root element given to it" name="class name helpers getClassName finds the first class name of the root element given to it" time="0.003">
    </testcase>
    <testcase classname="class name helpers getClassName can find later-index class names of the root element given to it" name="class name helpers getClassName can find later-index class names of the root element given to it" time="0.002">
    </testcase>
    <testcase classname="class name helpers getClassName returns empty string if index out of bounds" name="class name helpers getClassName returns empty string if index out of bounds" time="0.003">
    </testcase>
    <testcase classname="class name helpers getClassName works with svg elements" name="class name helpers getClassName works with svg elements" time="0.004">
    </testcase>
    <testcase classname="class name helpers getClassName works with styled components" name="class name helpers getClassName works with styled components" time="0.003">
    </testcase>
    <testcase classname="class name helpers getClassName can use a custom container element type" name="class name helpers getClassName can use a custom container element type" time="0.004">
    </testcase>
    <testcase classname="class name helpers getClassSelector makes a CSS class selector from the element passed" name="class name helpers getClassSelector makes a CSS class selector from the element passed" time="0.003">
    </testcase>
    <testcase classname="class name helpers getClassSelector can find later-index class names of the root element given to it" name="class name helpers getClassSelector can find later-index class names of the root element given to it" time="0.003">
    </testcase>
    <testcase classname="class name helpers getClassSelector returns empty string if index out of bounds" name="class name helpers getClassSelector returns empty string if index out of bounds" time="0.003">
    </testcase>
    <testcase classname="class name helpers getClassSelector works with svg elements" name="class name helpers getClassSelector works with svg elements" time="0.003">
    </testcase>
    <testcase classname="class name helpers getClassSelector works with styled components" name="class name helpers getClassSelector works with styled components" time="0.002">
    </testcase>
    <testcase classname="class name helpers getClassSelector can make a selector targeting all classes" name="class name helpers getClassSelector can make a selector targeting all classes" time="0.001">
    </testcase>
    <testcase classname="class name helpers getClassSelector can use a custom container element type" name="class name helpers getClassSelector can use a custom container element type" time="0.003">
    </testcase>
    <testcase classname="class name helpers getStyledClassSelector creates a selector for a styled component" name="class name helpers getStyledClassSelector creates a selector for a styled component" time="0.002">
    </testcase>
    <testcase classname="class name helpers getStyledClassSelector can use the component function without rendering" name="class name helpers getStyledClassSelector can use the component function without rendering" time="0.001">
    </testcase>
    <testcase classname="class name helpers getStyledClassSelector finds the most specific class name" name="class name helpers getStyledClassSelector finds the most specific class name" time="0.003">
    </testcase>
    <testcase classname="class name helpers getStyledClassSelector throws an error if not given a non-styled component" name="class name helpers getStyledClassSelector throws an error if not given a non-styled component" time="0.008">
    </testcase>
    <testcase classname="class name helpers getStyledClassSelector throws an error if not given a DOM primitive" name="class name helpers getStyledClassSelector throws an error if not given a DOM primitive" time="0.002">
    </testcase>
    <testcase classname="PropStruct leaves out null or undefined props" name="PropStruct leaves out null or undefined props" time="0.013">
    </testcase>
    <testcase classname="PropStruct handles simple primitive types" name="PropStruct handles simple primitive types" time="0.025">
    </testcase>
    <testcase classname="PropStruct maintains id attributes for DOM" name="PropStruct maintains id attributes for DOM" time="0.015">
    </testcase>
    <testcase classname="PropStruct handles symbols" name="PropStruct handles symbols" time="0.012">
    </testcase>
    <testcase classname="PropStruct handles React DOM elements" name="PropStruct handles React DOM elements" time="0.014">
    </testcase>
    <testcase classname="PropStruct handles React function component elements" name="PropStruct handles React function component elements" time="0.009">
    </testcase>
    <testcase classname="PropStruct handles React class component elements" name="PropStruct handles React class component elements" time="0.011">
    </testcase>
    <testcase classname="PropStruct handles prop &quot;children&quot; specially" name="PropStruct handles prop &quot;children&quot; specially" time="0.024">
    </testcase>
    <testcase classname="PropStruct handles object props" name="PropStruct handles object props" time="0.023">
    </testcase>
    <testcase classname="PropStruct handles function props (if poorly)" name="PropStruct handles function props (if poorly)" time="0.016">
    </testcase>
    <testcase classname="PropStruct can ignore props" name="PropStruct can ignore props" time="0.037">
    </testcase>
    <testcase classname="PropStruct comparator compares the first element of arrays, a &gt; b" name="PropStruct comparator compares the first element of arrays, a &gt; b" time="0.001">
    </testcase>
    <testcase classname="PropStruct comparator compares the first element of arrays, a &lt; b" name="PropStruct comparator compares the first element of arrays, a &lt; b" time="0.001">
    </testcase>
    <testcase classname="PropStruct comparator compares the first element of arrays, a = b" name="PropStruct comparator compares the first element of arrays, a = b" time="0.001">
    </testcase>
    <testcase classname="ignoreConsoleError ignores console error" name="ignoreConsoleError ignores console error" time="0.002">
    </testcase>
    <testcase classname="createMuiTheme Creates mui theme" name="createMuiTheme Creates mui theme" time="0.009">
    </testcase>
    <testcase classname="generateClassName Generates proper class name" name="generateClassName Generates proper class name" time="0.001">
    </testcase>
    <testcase classname="extractMessages extracts messages out from one defineMessages" name="extractMessages extracts messages out from one defineMessages" time="0.001">
    </testcase>
    <testcase classname="extractMessages extracts messages out from two defineMessages" name="extractMessages extracts messages out from two defineMessages" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="CheckboxGroup Component" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:40" time="2.129" tests="7">
    <testcase classname="CheckboxGroup Component Fails if checkboxGroupProps has wrong type" name="CheckboxGroup Component Fails if checkboxGroupProps has wrong type" time="0.051">
    </testcase>
    <testcase classname="CheckboxGroup Component Renders CheckboxGroup component without errors" name="CheckboxGroup Component Renders CheckboxGroup component without errors" time="0.278">
    </testcase>
    <testcase classname="CheckboxGroup Component Renders CheckboxGroup component without errors when options are not specified" name="CheckboxGroup Component Renders CheckboxGroup component without errors when options are not specified" time="0.011">
    </testcase>
    <testcase classname="CheckboxGroup Component Renders CheckboxGroup component with error" name="CheckboxGroup Component Renders CheckboxGroup component with error" time="0.01">
    </testcase>
    <testcase classname="CheckboxGroup Component Renders CheckboxGroup component with label" name="CheckboxGroup Component Renders CheckboxGroup component with label" time="0.009">
    </testcase>
    <testcase classname="CheckboxGroup Component CheckboxGroup component handles uncheck" name="CheckboxGroup Component CheckboxGroup component handles uncheck" time="0.036">
    </testcase>
    <testcase classname="CheckboxGroup Component CheckboxGroup component handles check" name="CheckboxGroup Component CheckboxGroup component handles check" time="0.02">
    </testcase>
  </testsuite>
  <testsuite name="Radio" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:41" time="2.08" tests="15">
    <testcase classname="Radio Throws an error if radioProps has wrong type" name="Radio Throws an error if radioProps has wrong type" time="0.042">
    </testcase>
    <testcase classname="Radio Renders Radio propely" name="Radio Renders Radio propely" time="0.129">
    </testcase>
    <testcase classname="Radio Uses passed checked for checked property" name="Radio Uses passed checked for checked property" time="0.04">
    </testcase>
    <testcase classname="Radio Uses passed disabled for disabled property" name="Radio Uses passed disabled for disabled property" time="0.017">
    </testcase>
    <testcase classname="Radio Uses passed onChange for onChange property" name="Radio Uses passed onChange for onChange property" time="0.023">
    </testcase>
    <testcase classname="Radio Uses passed value for value property" name="Radio Uses passed value for value property" time="0.028">
    </testcase>
    <testcase classname="Radio Uses passed name for name property" name="Radio Uses passed name for name property" time="0.017">
    </testcase>
    <testcase classname="Radio Uses passed size for size property" name="Radio Uses passed size for size property" time="0.02">
    </testcase>
    <testcase classname="Radio Uses passed inputProps for inputProps property" name="Radio Uses passed inputProps for inputProps property" time="0.019">
    </testcase>
    <testcase classname="Radio Uses passed class for root ruleName" name="Radio Uses passed class for root ruleName" time="0.017">
    </testcase>
    <testcase classname="Radio Uses fallback values if poperties are not passed" name="Radio Uses fallback values if poperties are not passed" time="0.008">
    </testcase>
    <testcase classname="Radio Use proper class if radio is not read only and checked" name="Radio Use proper class if radio is not read only and checked" time="0.042">
    </testcase>
    <testcase classname="Radio Use proper class if radio is read only and checked" name="Radio Use proper class if radio is read only and checked" time="0.038">
    </testcase>
    <testcase classname="Radio Use proper class if radio is not read only and not checked" name="Radio Use proper class if radio is not read only and not checked" time="0.04">
    </testcase>
    <testcase classname="Radio Use proper class if radio is read only and not checked" name="Radio Use proper class if radio is read only and not checked" time="0.077">
    </testcase>
  </testsuite>
  <testsuite name="ScopeSelected" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:41" time="2.013" tests="2">
    <testcase classname="ScopeSelected Renders scope selector correctly" name="ScopeSelected Renders scope selector correctly" time="0.186">
    </testcase>
    <testcase classname="ScopeSelected Calls close selector on click away" name="ScopeSelected Calls close selector on click away" time="0.11">
    </testcase>
  </testsuite>
  <testsuite name="Divider" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:41" time="1.966" tests="11">
    <testcase classname="Divider Renders divider" name="Divider Renders divider" time="0.072">
    </testcase>
    <testcase classname="Divider Use orientation property and make line vertical one" name="Divider Use orientation property and make line vertical one" time="0.012">
    </testcase>
    <testcase classname="Divider Use light property and make line light one" name="Divider Use light property and make line light one" time="0.009">
    </testcase>
    <testcase classname="Divider Use variant property to change horizontal line variant" name="Divider Use variant property to change horizontal line variant" time="0.006">
    </testcase>
    <testcase classname="Divider Use passes classes for root ruleName" name="Divider Use passes classes for root ruleName" time="0.008">
    </testcase>
    <testcase classname="Divider Use passes classes for light ruleName" name="Divider Use passes classes for light ruleName" time="0.005">
    </testcase>
    <testcase classname="Divider Use passes classes for vertical ruleName" name="Divider Use passes classes for vertical ruleName" time="0.01">
    </testcase>
    <testcase classname="Divider Use passes classes for middle ruleName" name="Divider Use passes classes for middle ruleName" time="0.049">
    </testcase>
    <testcase classname="Divider Use passes classes for inset ruleName" name="Divider Use passes classes for inset ruleName" time="0.009">
    </testcase>
    <testcase classname="Divider Fails if dividerProps has wrong type" name="Divider Fails if dividerProps has wrong type" time="0.078">
    </testcase>
    <testcase classname="Divider Shoud use fallback values if poperties are not passed" name="Divider Shoud use fallback values if poperties are not passed" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="MultiSelector" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:41" time="2.413" tests="12">
    <testcase classname="MultiSelector renders a wrapped, hidden multiple select element, and visual cover elements" name="MultiSelector renders a wrapped, hidden multiple select element, and visual cover elements" time="0.138">
    </testcase>
    <testcase classname="MultiSelector only renders &apos;Clear&apos; if value not empty" name="MultiSelector only renders &apos;Clear&apos; if value not empty" time="0.239">
    </testcase>
    <testcase classname="MultiSelector only renders &apos;Select all&apos; if value not full" name="MultiSelector only renders &apos;Select all&apos; if value not full" time="0.056">
    </testcase>
    <testcase classname="MultiSelector renders a placeholder if no value set" name="MultiSelector renders a placeholder if no value set" time="0.022">
    </testcase>
    <testcase classname="MultiSelector can add value when inner selector changes" name="MultiSelector can add value when inner selector changes" time="0.041">
    </testcase>
    <testcase classname="MultiSelector can remove value when inner selector changes" name="MultiSelector can remove value when inner selector changes" time="0.036">
    </testcase>
    <testcase classname="MultiSelector can add value when clicking a visual option" name="MultiSelector can add value when clicking a visual option" time="0.027">
    </testcase>
    <testcase classname="MultiSelector can remove value when clicking a visual option" name="MultiSelector can remove value when clicking a visual option" time="0.025">
    </testcase>
    <testcase classname="MultiSelector sets empty value when cleared" name="MultiSelector sets empty value when cleared" time="0.037">
    </testcase>
    <testcase classname="MultiSelector sets full value when select all chosen" name="MultiSelector sets full value when select all chosen" time="0.042">
    </testcase>
    <testcase classname="MultiSelector deals with an empty value prop change" name="MultiSelector deals with an empty value prop change" time="0.022">
    </testcase>
    <testcase classname="MultiSelector deals with an empty value prop click" name="MultiSelector deals with an empty value prop click" time="0.026">
    </testcase>
  </testsuite>
  <testsuite name="useScopeConfirmationModalState" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:42" time="2.103" tests="8">
    <testcase classname="useScopeConfirmationModalState modal dialog is closed by default" name="useScopeConfirmationModalState modal dialog is closed by default" time="0.051">
    </testcase>
    <testcase classname="useScopeConfirmationModalState dialog type is ScopeChangeConfirmation because of opened tabs" name="useScopeConfirmationModalState dialog type is ScopeChangeConfirmation because of opened tabs" time="0.044">
    </testcase>
    <testcase classname="useScopeConfirmationModalState dialog type is HasUnsavedDataMessage because of opened tabs" name="useScopeConfirmationModalState dialog type is HasUnsavedDataMessage because of opened tabs" time="0.044">
    </testcase>
    <testcase classname="useScopeConfirmationModalState selecting a new scope with active tabs opens the dialog" name="useScopeConfirmationModalState selecting a new scope with active tabs opens the dialog" time="0.043">
    </testcase>
    <testcase classname="useScopeConfirmationModalState selecting a new scope without active tabs changes the scope" name="useScopeConfirmationModalState selecting a new scope without active tabs changes the scope" time="0.043">
    </testcase>
    <testcase classname="useScopeConfirmationModalState closeModalCallback closes the dialog" name="useScopeConfirmationModalState closeModalCallback closes the dialog" time="0.028">
    </testcase>
    <testcase classname="useScopeConfirmationModalState acceptScopeChange changes the scope" name="useScopeConfirmationModalState acceptScopeChange changes the scope" time="0.063">
    </testcase>
    <testcase classname="useScopeConfirmationModalState acceptScopeChange invokes close tab handlers" name="useScopeConfirmationModalState acceptScopeChange invokes close tab handlers" time="0.056">
    </testcase>
  </testsuite>
  <testsuite name="ConfirmationModal" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:42" time="2.217" tests="2">
    <testcase classname="ConfirmationModal Renders ConfirmationModal correctly" name="ConfirmationModal Renders ConfirmationModal correctly" time="0.285">
    </testcase>
    <testcase classname="ConfirmationModal Renders ConfirmationModal correctly when set buttons&apos; labels" name="ConfirmationModal Renders ConfirmationModal correctly when set buttons&apos; labels" time="0.116">
    </testcase>
  </testsuite>
  <testsuite name="useScopeData" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:43" time="2.162" tests="2">
    <testcase classname="useScopeData provides scope data props to the enhanced component" name="useScopeData provides scope data props to the enhanced component" time="0.168">
    </testcase>
    <testcase classname="useScopeData loads scopes if it has none" name="useScopeData loads scopes if it has none" time="0.021">
    </testcase>
  </testsuite>
  <testsuite name="loadingScreen" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:43" time="2.221" tests="4">
    <testcase classname="loadingScreen Renders a closed backdrop by default" name="loadingScreen Renders a closed backdrop by default" time="0.053">
    </testcase>
    <testcase classname="loadingScreen Renders an opened backdrop when active request are running" name="loadingScreen Renders an opened backdrop when active request are running" time="0.024">
    </testcase>
    <testcase classname="loadingScreen Renders an opened backdrop with circular progress when active request are running" name="loadingScreen Renders an opened backdrop with circular progress when active request are running" time="0.325">
    </testcase>
    <testcase classname="loadingScreen Handles the onMouseDown event without error" name="loadingScreen Handles the onMouseDown event without error" time="0.067">
    </testcase>
  </testsuite>
  <testsuite name="withAuthentication" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:43" time="2.186" tests="5">
    <testcase classname="withAuthentication shows the wrapped component if authenticated" name="withAuthentication shows the wrapped component if authenticated" time="0.023">
    </testcase>
    <testcase classname="withAuthentication shows a load indicator component if authentication is ongoing" name="withAuthentication shows a load indicator component if authentication is ongoing" time="0.047">
    </testcase>
    <testcase classname="withAuthentication shows an error screen if not logged in" name="withAuthentication shows an error screen if not logged in" time="0.012">
    </testcase>
    <testcase classname="withAuthentication shows an error screen if an error occured" name="withAuthentication shows an error screen if an error occured" time="0.033">
    </testcase>
    <testcase classname="withAuthentication shows an error screen if an error without payload occured" name="withAuthentication shows an error screen if an error without payload occured" time="0.018">
    </testcase>
  </testsuite>
  <testsuite name="SelectionList" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:43" time="2.457" tests="8">
    <testcase classname="SelectionList Renders SelectionList correctly" name="SelectionList Renders SelectionList correctly" time="0.206">
    </testcase>
    <testcase classname="SelectionList Renders SelectionList correctly with multiSelect" name="SelectionList Renders SelectionList correctly with multiSelect" time="0.109">
    </testcase>
    <testcase classname="SelectionList Renders SelectionList correctly if infoPanel is supplied" name="SelectionList Renders SelectionList correctly if infoPanel is supplied" time="0.099">
    </testcase>
    <testcase classname="SelectionList Renders SelectionList correctly if actionPanel is supplied" name="SelectionList Renders SelectionList correctly if actionPanel is supplied" time="0.094">
    </testcase>
    <testcase classname="SelectionList Renders SelectionList correctly if infoPanel is supplied without divider" name="SelectionList Renders SelectionList correctly if infoPanel is supplied without divider" time="0.088">
    </testcase>
    <testcase classname="SelectionList Calls onChange when item click" name="SelectionList Calls onChange when item click" time="0.068">
    </testcase>
    <testcase classname="SelectionList Calls onChange with defaultSelection" name="SelectionList Calls onChange with defaultSelection" time="0.028">
    </testcase>
    <testcase classname="SelectionList handle scrolling event" name="SelectionList handle scrolling event" time="0.035">
    </testcase>
  </testsuite>
  <testsuite name="insertIcons" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:44" time="1.738" tests="2">
    <testcase classname="insertIcons inserts an SVG icon sheet from a string" name="insertIcons inserts an SVG icon sheet from a string" time="0.022">
    </testcase>
    <testcase classname="insertIcons does not insert an SVG element if the string fails to parse" name="insertIcons does not insert an SVG element if the string fails to parse" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="DropDownMenu" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:44" time="2.433" tests="4">
    <testcase classname="DropDownMenu render DropDownMenu without errors" name="DropDownMenu render DropDownMenu without errors" time="0.102">
    </testcase>
    <testcase classname="DropDownMenu render DropDownMenu with custom button without errors" name="DropDownMenu render DropDownMenu with custom button without errors" time="0.1">
    </testcase>
    <testcase classname="DropDownMenu Fails if dropDownMenuProps has wrong type" name="DropDownMenu Fails if dropDownMenuProps has wrong type" time="0.043">
    </testcase>
    <testcase classname="DropDownMenu should open Drop Down " name="DropDownMenu should open Drop Down " time="0.222">
    </testcase>
  </testsuite>
  <testsuite name="Help" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:44" time="1.874" tests="2">
    <testcase classname="Help renders a help button" name="Help renders a help button" time="0.048">
    </testcase>
    <testcase classname="Help sets css for help button " name="Help sets css for help button " time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="CollapsableList" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:45" time="2.323" tests="7">
    <testcase classname="CollapsableList Throws an error if chipProps has wrong type" name="CollapsableList Throws an error if chipProps has wrong type" time="0.04">
    </testcase>
    <testcase classname="CollapsableList Renders CollapsableList in closed state correctly" name="CollapsableList Renders CollapsableList in closed state correctly" time="0.091">
    </testcase>
    <testcase classname="CollapsableList Renders CollapsableList in opened state correctly" name="CollapsableList Renders CollapsableList in opened state correctly" time="0.077">
    </testcase>
    <testcase classname="CollapsableList Renders CollapsableList with message in closed state correctly" name="CollapsableList Renders CollapsableList with message in closed state correctly" time="0.092">
    </testcase>
    <testcase classname="CollapsableList Renders CollapsableList with message in opened state correctly" name="CollapsableList Renders CollapsableList with message in opened state correctly" time="0.067">
    </testcase>
    <testcase classname="CollapsableList Renders CollapsableList when expand position is &apos;right&apos;" name="CollapsableList Renders CollapsableList when expand position is &apos;right&apos;" time="0.064">
    </testcase>
    <testcase classname="CollapsableList Changes changes open/closed state correctly on click" name="CollapsableList Changes changes open/closed state correctly on click" time="0.052">
    </testcase>
  </testsuite>
  <testsuite name="NumberInput" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:45" time="2.34" tests="37">
    <testcase classname="NumberInput renders an input field with up/down spinner buttons" name="NumberInput renders an input field with up/down spinner buttons" time="0.107">
    </testcase>
    <testcase classname="NumberInput renders a required input field with invalid value" name="NumberInput renders a required input field with invalid value" time="0.045">
    </testcase>
    <testcase classname="NumberInput rounds input value top the step size" name="NumberInput rounds input value top the step size" time="0.03">
    </testcase>
    <testcase classname="NumberInput renders a required input field with invalid value" name="NumberInput renders a required input field with invalid value" time="0.022">
    </testcase>
    <testcase classname="NumberInput sets a default value to ensure input is controlled" name="NumberInput sets a default value to ensure input is controlled" time="0.021">
    </testcase>
    <testcase classname="NumberInput with no control prop onChange handler enforces numbers" name="NumberInput with no control prop onChange handler enforces numbers" time="0.078">
    </testcase>
    <testcase classname="NumberInput with no control prop increment handler raises value by 1" name="NumberInput with no control prop increment handler raises value by 1" time="0.018">
    </testcase>
    <testcase classname="NumberInput with no control prop increments from zero" name="NumberInput with no control prop increments from zero" time="0.017">
    </testcase>
    <testcase classname="NumberInput with no control prop decrement handler lowers value by 1" name="NumberInput with no control prop decrement handler lowers value by 1" time="0.019">
    </testcase>
    <testcase classname="NumberInput with no control prop decrements from zero" name="NumberInput with no control prop decrements from zero" time="0.025">
    </testcase>
    <testcase classname="NumberInput with step prop onChange handler enforces numbers rounded to nearest step" name="NumberInput with step prop onChange handler enforces numbers rounded to nearest step" time="0.067">
    </testcase>
    <testcase classname="NumberInput with step prop increment handler raises value by step size" name="NumberInput with step prop increment handler raises value by step size" time="0.016">
    </testcase>
    <testcase classname="NumberInput with step prop increments from zero" name="NumberInput with step prop increments from zero" time="0.02">
    </testcase>
    <testcase classname="NumberInput with step prop decrement handler lowers value by step size" name="NumberInput with step prop decrement handler lowers value by step size" time="0.015">
    </testcase>
    <testcase classname="NumberInput with step prop decrements from zero" name="NumberInput with step prop decrements from zero" time="0.02">
    </testcase>
    <testcase classname="NumberInput with min prop onChange handler enforces numbers" name="NumberInput with min prop onChange handler enforces numbers" time="0.07">
    </testcase>
    <testcase classname="NumberInput with min prop increment handler raises value by 1" name="NumberInput with min prop increment handler raises value by 1" time="0.029">
    </testcase>
    <testcase classname="NumberInput with min prop decrement handler lowers value by 1" name="NumberInput with min prop decrement handler lowers value by 1" time="0.024">
    </testcase>
    <testcase classname="NumberInput with min prop respects minimum" name="NumberInput with min prop respects minimum" time="0.03">
    </testcase>
    <testcase classname="NumberInput with min and step prop onChange handler enforces numbers rounded to nearest step" name="NumberInput with min and step prop onChange handler enforces numbers rounded to nearest step" time="0.057">
    </testcase>
    <testcase classname="NumberInput with min and step prop increment handler raises value by 1" name="NumberInput with min and step prop increment handler raises value by 1" time="0.066">
    </testcase>
    <testcase classname="NumberInput with min and step prop decrement handler lowers value by 1" name="NumberInput with min and step prop decrement handler lowers value by 1" time="0.02">
    </testcase>
    <testcase classname="NumberInput with min and step prop respects minimum" name="NumberInput with min and step prop respects minimum" time="0.029">
    </testcase>
    <testcase classname="NumberInput with max prop onChange handler enforces numbers" name="NumberInput with max prop onChange handler enforces numbers" time="0.054">
    </testcase>
    <testcase classname="NumberInput with max prop increment handler raises value by 1" name="NumberInput with max prop increment handler raises value by 1" time="0.016">
    </testcase>
    <testcase classname="NumberInput with max prop respects maximum" name="NumberInput with max prop respects maximum" time="0.031">
    </testcase>
    <testcase classname="NumberInput with max prop decrement handler lowers value by 1" name="NumberInput with max prop decrement handler lowers value by 1" time="0.015">
    </testcase>
    <testcase classname="NumberInput with max and step prop onChange handler enforces numbers rounded to nearest step" name="NumberInput with max and step prop onChange handler enforces numbers rounded to nearest step" time="0.064">
    </testcase>
    <testcase classname="NumberInput with max and step prop increment handler raises value by 1" name="NumberInput with max and step prop increment handler raises value by 1" time="0.019">
    </testcase>
    <testcase classname="NumberInput with max and step prop respects maximum" name="NumberInput with max and step prop respects maximum" time="0.03">
    </testcase>
    <testcase classname="NumberInput with max and step prop decrement handler lowers value by 1" name="NumberInput with max and step prop decrement handler lowers value by 1" time="0.021">
    </testcase>
    <testcase classname="roundToStep rounds a number up to the nearest step" name="roundToStep rounds a number up to the nearest step" time="0.002">
    </testcase>
    <testcase classname="roundToStep rounds a number down to the nearest step" name="roundToStep rounds a number down to the nearest step" time="0.001">
    </testcase>
    <testcase classname="roundToStep works for steps &gt; 1" name="roundToStep works for steps &gt; 1" time="0.001">
    </testcase>
    <testcase classname="roundToStep can round off 0" name="roundToStep can round off 0" time="0.001">
    </testcase>
    <testcase classname="roundToStep returns empty string if given not a number to round off" name="roundToStep returns empty string if given not a number to round off" time="0.001">
    </testcase>
    <testcase classname="roundToStep returns empty string if given not a number as step" name="roundToStep returns empty string if given not a number as step" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Information Item" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:46" time="2.263" tests="9">
    <testcase classname="Information Item Renders Information Item properly" name="Information Item Renders Information Item properly" time="0.194">
    </testcase>
    <testcase classname="Information Item Renders Information Item with null value and showNotAvailable property is false" name="Information Item Renders Information Item with null value and showNotAvailable property is false" time="0.057">
    </testcase>
    <testcase classname="Information Item Renders Information Item with null value and showNotAvailable property is true" name="Information Item Renders Information Item with null value and showNotAvailable property is true" time="0.083">
    </testcase>
    <testcase classname="Information Item Renders Information Item properly when value is a jsx element" name="Information Item Renders Information Item properly when value is a jsx element" time="0.015">
    </testcase>
    <testcase classname="Information Item Renders Information Item without label" name="Information Item Renders Information Item without label" time="0.009">
    </testcase>
    <testcase classname="Information Item Renders Information Item with localized label" name="Information Item Renders Information Item with localized label" time="0.017">
    </testcase>
    <testcase classname="Information Item Renders Information Item with error" name="Information Item Renders Information Item with error" time="0.052">
    </testcase>
    <testcase classname="Information Item Renders Information Item with required" name="Information Item Renders Information Item with required" time="0.02">
    </testcase>
    <testcase classname="Information Item Renders Information Item properly with a header icon" name="Information Item Renders Information Item properly with a header icon" time="0.101">
    </testcase>
  </testsuite>
  <testsuite name="loadConfig" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:46" time="1.891" tests="5">
    <testcase classname="loadConfig loads the /config.json file, sets version, sets module name and resets dependent functions from placeholders" name="loadConfig loads the /config.json file, sets version, sets module name and resets dependent functions from placeholders" time="0.008">
    </testcase>
    <testcase classname="loadConfig gets defaults if fetch fails, warns of this" name="loadConfig gets defaults if fetch fails, warns of this" time="0.042">
    </testcase>
    <testcase classname="loadConfig buildUrl throws an error if called before loadConfig()" name="loadConfig buildUrl throws an error if called before loadConfig()" time="0.003">
    </testcase>
    <testcase classname="loadConfig buildUrl with config loaded constructs an URL from path segments" name="loadConfig buildUrl with config loaded constructs an URL from path segments" time="0.009">
    </testcase>
    <testcase classname="loadConfig buildUrl with config loaded constructs an URL with parameters" name="loadConfig buildUrl with config loaded constructs an URL with parameters" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="Input field collection" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:46" time="2.588" tests="1">
    <testcase classname="Input field collection contains a list of named inputs" name="Input field collection contains a list of named inputs" time="0.02">
    </testcase>
  </testsuite>
  <testsuite name="Tab" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:46" time="2.506" tests="11">
    <testcase classname="Tab renders a module tab with icon and label" name="Tab renders a module tab with icon and label" time="0.106">
    </testcase>
    <testcase classname="Tab renders an active module tab" name="Tab renders an active module tab" time="0.037">
    </testcase>
    <testcase classname="Tab renders an active module tab with a very long label" name="Tab renders an active module tab with a very long label" time="0.049">
    </testcase>
    <testcase classname="Tab renders with a message error" name="Tab renders with a message error" time="0.047">
    </testcase>
    <testcase classname="Tab close a tab when scope is not supported" name="Tab close a tab when scope is not supported" time="0.06">
    </testcase>
    <testcase classname="Tab renders a tab outside the current scope" name="Tab renders a tab outside the current scope" time="0.051">
    </testcase>
    <testcase classname="Tab renders a page tab with label and close button" name="Tab renders a page tab with label and close button" time="0.043">
    </testcase>
    <testcase classname="Tab renders an active page tab" name="Tab renders an active page tab" time="0.045">
    </testcase>
    <testcase classname="Tab curries close handler with tab and mapped href" name="Tab curries close handler with tab and mapped href" time="0.025">
    </testcase>
    <testcase classname="TabText sets css for TabLink without attributes" name="TabText sets css for TabLink without attributes" time="0.006">
    </testcase>
    <testcase classname="TabText sets css for TabLink with attributes" name="TabText sets css for TabLink with attributes" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="Sidebar" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:48" time="1.692" tests="10">
    <testcase classname="Sidebar renders a sidebar with app selector and page menu" name="Sidebar renders a sidebar with app selector and page menu" time="0.131">
    </testcase>
    <testcase classname="Sidebar renders a sidebar showing alerts" name="Sidebar renders a sidebar showing alerts" time="0.107">
    </testcase>
    <testcase classname="Sidebar renders an open sidebar" name="Sidebar renders an open sidebar" time="0.092">
    </testcase>
    <testcase classname="Sidebar renders a minimal sidebar" name="Sidebar renders a minimal sidebar" time="0.035">
    </testcase>
    <testcase classname="EnhancedMenuItem renders a MenuItem with href" name="EnhancedMenuItem renders a MenuItem with href" time="0.035">
    </testcase>
    <testcase classname="EnhancedMenuItem sets the active flag if path matches href" name="EnhancedMenuItem sets the active flag if path matches href" time="0.031">
    </testcase>
    <testcase classname="MenuToggle with no theme renders a MenuItem with specific settings" name="MenuToggle with no theme renders a MenuItem with specific settings" time="0.023">
    </testcase>
    <testcase classname="MenuToggle with no theme renders as open" name="MenuToggle with no theme renders as open" time="0.022">
    </testcase>
    <testcase classname="MenuToggle with theme values renders a MenuItem with specific settings" name="MenuToggle with theme values renders a MenuItem with specific settings" time="0.019">
    </testcase>
    <testcase classname="MenuToggle with theme values renders as open" name="MenuToggle with theme values renders as open" time="0.019">
    </testcase>
  </testsuite>
  <testsuite name="ScopeNode" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:48" time="2.097" tests="14">
    <testcase classname="ScopeNode displays an icon and a label for a scope" name="ScopeNode displays an icon and a label for a scope" time="0.068">
    </testcase>
    <testcase classname="ScopeNode displays an icon and a label for the global scope" name="ScopeNode displays an icon and a label for the global scope" time="0.034">
    </testcase>
    <testcase classname="ScopeNode displays an icon and a label for an unauthorized scope" name="ScopeNode displays an icon and a label for an unauthorized scope" time="0.029">
    </testcase>
    <testcase classname="ScopeNode displays an icon and a the fallback id for a scope when name is undefined" name="ScopeNode displays an icon and a the fallback id for a scope when name is undefined" time="0.031">
    </testcase>
    <testcase classname="ScopeNode displays an icon and a the fallback id for a scope when name is null" name="ScopeNode displays an icon and a the fallback id for a scope when name is null" time="0.034">
    </testcase>
    <testcase classname="ScopeNode handles virtual scopes" name="ScopeNode handles virtual scopes" time="0.026">
    </testcase>
    <testcase classname="ScopeNode Call onScopeSelect on Node click if scope type is not virtual" name="ScopeNode Call onScopeSelect on Node click if scope type is not virtual" time="0.098">
    </testcase>
    <testcase classname="ContentLabel sets css for authorized Global scope" name="ContentLabel sets css for authorized Global scope" time="0.006">
    </testcase>
    <testcase classname="ContentLabel sets css for unauthorized Global scope" name="ContentLabel sets css for unauthorized Global scope" time="0.014">
    </testcase>
    <testcase classname="ContentLabel sets css for a not-clickable and a non-global scope" name="ContentLabel sets css for a not-clickable and a non-global scope" time="0.004">
    </testcase>
    <testcase classname="ContentLabel sets css for a clickable and a non-global scope" name="ContentLabel sets css for a clickable and a non-global scope" time="0.004">
    </testcase>
    <testcase classname="ScopeIcon renders an icon with id based on scope type" name="ScopeIcon renders an icon with id based on scope type" time="0.01">
    </testcase>
    <testcase classname="ScopeIcon renders in a color based on scope type" name="ScopeIcon renders in a color based on scope type" time="0.003">
    </testcase>
    <testcase classname="ScopeIcon by default renders a cross" name="ScopeIcon by default renders a cross" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="ScopeModificationConfirmationDialog" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:48" time="2.102" tests="3">
    <testcase classname="ScopeModificationConfirmationDialog should not render a dialog when dialog type is none" name="ScopeModificationConfirmationDialog should not render a dialog when dialog type is none" time="0.026">
    </testcase>
    <testcase classname="ScopeModificationConfirmationDialog should render scope change confirmation dialog for open tabs" name="ScopeModificationConfirmationDialog should render scope change confirmation dialog for open tabs" time="0.318">
    </testcase>
    <testcase classname="ScopeModificationConfirmationDialog should render scope change confirmation dialog for modified models" name="ScopeModificationConfirmationDialog should render scope change confirmation dialog for modified models" time="0.119">
    </testcase>
  </testsuite>
  <testsuite name="List" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:48" time="2.314" tests="8">
    <testcase classname="List Renders List correctly" name="List Renders List correctly" time="0.15">
    </testcase>
    <testcase classname="List Calls onChange when item click" name="List Calls onChange when item click" time="0.076">
    </testcase>
    <testcase classname="List Do not select disabled item" name="List Do not select disabled item" time="0.032">
    </testcase>
    <testcase classname="List Use listItemFormatter " name="List Use listItemFormatter " time="0.017">
    </testcase>
    <testcase classname="List handle scrolling event" name="List handle scrolling event" time="0.039">
    </testcase>
    <testcase classname="List do not fail when onScroll is not specified" name="List do not fail when onScroll is not specified" time="0.023">
    </testcase>
    <testcase classname="compareListItem Return true if Ids are aquals " name="compareListItem Return true if Ids are aquals " time="0.001">
    </testcase>
    <testcase classname="compareListItem Return false if isChecked is different if Ids are aquals " name="compareListItem Return false if isChecked is different if Ids are aquals " time="0">
    </testcase>
  </testsuite>
  <testsuite name="ActionModal" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:49" time="2.293" tests="4">
    <testcase classname="ActionModal Renders ActionModal correctly" name="ActionModal Renders ActionModal correctly" time="0.261">
    </testcase>
    <testcase classname="ActionModal Renders ActionModal correctly with different type" name="ActionModal Renders ActionModal correctly with different type" time="0.136">
    </testcase>
    <testcase classname="ActionModal Renders ConfirmationModal correctly with non default title" name="ActionModal Renders ConfirmationModal correctly with non default title" time="0.12">
    </testcase>
    <testcase classname="ActionModal Calls action handlers when buttons are pressed" name="ActionModal Calls action handlers when buttons are pressed" time="0.086">
    </testcase>
  </testsuite>
  <testsuite name="Radio Component" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:49" time="2.353" tests="12">
    <testcase classname="Radio Component Fails if radioProps is missing or wrong type" name="Radio Component Fails if radioProps is missing or wrong type" time="0.137">
    </testcase>
    <testcase classname="Radio Component Fails if less than two options" name="Radio Component Fails if less than two options" time="0.016">
    </testcase>
    <testcase classname="Radio Component Fails if less than one options" name="Radio Component Fails if less than one options" time="0.008">
    </testcase>
    <testcase classname="Radio Component Fails if two options with same value" name="Radio Component Fails if two options with same value" time="0.007">
    </testcase>
    <testcase classname="Radio Component Fails if name is not specified" name="Radio Component Fails if name is not specified" time="0.007">
    </testcase>
    <testcase classname="Radio Component Fails if no corresponding option for value" name="Radio Component Fails if no corresponding option for value" time="0.008">
    </testcase>
    <testcase classname="Radio Component Fails if no corresponding option for default value" name="Radio Component Fails if no corresponding option for default value" time="0.007">
    </testcase>
    <testcase classname="Radio Component Renders Radio component properly with all options" name="Radio Component Renders Radio component properly with all options" time="0.196">
    </testcase>
    <testcase classname="Radio Component Renders Radio component properly with one option" name="Radio Component Renders Radio component properly with one option" time="0.046">
    </testcase>
    <testcase classname="Radio Component Renders Radio component properly with no options" name="Radio Component Renders Radio component properly with no options" time="0.109">
    </testcase>
    <testcase classname="Radio Component Radio component handles radios update" name="Radio Component Radio component handles radios update" time="0.077">
    </testcase>
    <testcase classname="Radio Component Radio component handles radios clickEvent" name="Radio Component Radio component handles radios clickEvent" time="0.049">
    </testcase>
  </testsuite>
  <testsuite name="ConnectedToastList" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:50" time="1.936" tests="4">
    <testcase classname="ConnectedToastList provides toasts to a ToastList" name="ConnectedToastList provides toasts to a ToastList" time="0.085">
    </testcase>
    <testcase classname="ConnectedToastList dismisses toasts one at a time with an interval" name="ConnectedToastList dismisses toasts one at a time with an interval" time="0.023">
    </testcase>
    <testcase classname="ConnectedToastList does not remove toasts if there are none" name="ConnectedToastList does not remove toasts if there are none" time="0.008">
    </testcase>
    <testcase classname="ConnectedToastList handles switching the dismissal on and off as necessary" name="ConnectedToastList handles switching the dismissal on and off as necessary" time="0.111">
    </testcase>
  </testsuite>
  <testsuite name="Loader placeholder" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:50" time="1.986" tests="4">
    <testcase classname="Loader placeholder renders null, then load spinner if no props set" name="Loader placeholder renders null, then load spinner if no props set" time="0.046">
    </testcase>
    <testcase classname="Loader placeholder error state renders an error placeholder if error set" name="Loader placeholder error state renders an error placeholder if error set" time="0.046">
    </testcase>
    <testcase classname="Loader loads the component" name="Loader loads the component" time="0.134">
    </testcase>
    <testcase classname="Loader errors out" name="Loader errors out" time="0.077">
    </testcase>
  </testsuite>
  <testsuite name="Switch Component" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:50" time="1.843" tests="5">
    <testcase classname="Switch Component Fails if switchProps has wrong type" name="Switch Component Fails if switchProps has wrong type" time="0.049">
    </testcase>
    <testcase classname="Switch Component Renders Switch component without errors" name="Switch Component Renders Switch component without errors" time="0.075">
    </testcase>
    <testcase classname="Switch Component Checkbox component handles check" name="Switch Component Checkbox component handles check" time="0.053">
    </testcase>
    <testcase classname="Switch Component Checkbox component handles uncheck" name="Switch Component Checkbox component handles uncheck" time="0.031">
    </testcase>
    <testcase classname="Switch Component Checkbox component not handles check if it&apos;s read only" name="Switch Component Checkbox component not handles check if it&apos;s read only" time="0.034">
    </testcase>
  </testsuite>
  <testsuite name="withWaypointing" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:50" time="2.024" tests="7">
    <testcase classname="withWaypointing wraps a component to tell its route info to Redux on mount" name="withWaypointing wraps a component to tell its route info to Redux on mount" time="0.058">
    </testcase>
    <testcase classname="withWaypointing does not fire action if pathname is already the same" name="withWaypointing does not fire action if pathname is already the same" time="0.035">
    </testcase>
    <testcase classname="withWaypointing does fire action if path parameters different" name="withWaypointing does fire action if path parameters different" time="0.048">
    </testcase>
    <testcase classname="withWaypointing does not fire action if route match is not exact" name="withWaypointing does not fire action if route match is not exact" time="0.042">
    </testcase>
    <testcase classname="withWaypointing maps the href to a root if so directed" name="withWaypointing maps the href to a root if so directed" time="0.056">
    </testcase>
    <testcase classname="withWaypointing fires action on updates where route becomes misaligned" name="withWaypointing fires action on updates where route becomes misaligned" time="0.058">
    </testcase>
    <testcase classname="withWaypointing fires action when location has changed" name="withWaypointing fires action when location has changed" time="0.054">
    </testcase>
  </testsuite>
  <testsuite name="Chip" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:51" time="1.83" tests="9">
    <testcase classname="Chip Throws an error if chipProps has wrong type" name="Chip Throws an error if chipProps has wrong type" time="0.105">
    </testcase>
    <testcase classname="Chip Renders Chip propely" name="Chip Renders Chip propely" time="0.03">
    </testcase>
    <testcase classname="Chip Uses passed avatar for avatar property" name="Chip Uses passed avatar for avatar property" time="0.025">
    </testcase>
    <testcase classname="Chip Uses passed clickable for clickable property" name="Chip Uses passed clickable for clickable property" time="0.028">
    </testcase>
    <testcase classname="Chip Uses passed disabled for disabled property" name="Chip Uses passed disabled for disabled property" time="0.012">
    </testcase>
    <testcase classname="Chip Uses passed onDelete for onDelete property" name="Chip Uses passed onDelete for onDelete property" time="0.023">
    </testcase>
    <testcase classname="Chip Uses passed variant for variant property" name="Chip Uses passed variant for variant property" time="0.01">
    </testcase>
    <testcase classname="Chip Uses passed class for root ruleName" name="Chip Uses passed class for root ruleName" time="0.011">
    </testcase>
    <testcase classname="Chip Uses fallback values if poperties are not passed" name="Chip Uses fallback values if poperties are not passed" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="TranslationInput" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:51" time="1.947" tests="7">
    <testcase classname="TranslationInput renders a field for the default culture, and a button to show others" name="TranslationInput renders a field for the default culture, and a button to show others" time="0.087">
    </testcase>
    <testcase classname="TranslationInput renders fields for all languages when button is clicked" name="TranslationInput renders fields for all languages when button is clicked" time="0.111">
    </testcase>
    <testcase classname="TranslationInput lets you update a single language" name="TranslationInput lets you update a single language" time="0.027">
    </testcase>
    <testcase classname="TranslationInput handles no cultures being loaded gracefully" name="TranslationInput handles no cultures being loaded gracefully" time="0.004">
    </testcase>
    <testcase classname="TranslationInput handles being required but missing" name="TranslationInput handles being required but missing" time="0.076">
    </testcase>
    <testcase classname="TranslationField shows a single language label and a text field" name="TranslationField shows a single language label and a text field" time="0.029">
    </testcase>
    <testcase classname="TranslationField handles missing message" name="TranslationField handles missing message" time="0.018">
    </testcase>
  </testsuite>
  <testsuite name="withInitialLoad" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:52" time="1.641" tests="4">
    <testcase classname="withInitialLoad issues a deprecation warning" name="withInitialLoad issues a deprecation warning" time="0.06">
    </testcase>
    <testcase classname="withInitialLoad fires a loader function on component mount, if test returns true" name="withInitialLoad fires a loader function on component mount, if test returns true" time="0.028">
    </testcase>
    <testcase classname="withInitialLoad does not fire loader function if test returns false" name="withInitialLoad does not fire loader function if test returns false" time="0.009">
    </testcase>
    <testcase classname="withInitialLoad does not fire loader function if no test provided" name="withInitialLoad does not fire loader function if no test provided" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="Notification Component" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:52" time="1.971" tests="5">
    <testcase classname="Notification Component Fails if notificationProps has wrong type" name="Notification Component Fails if notificationProps has wrong type" time="0.086">
    </testcase>
    <testcase classname="Notification Component Renders Error Notification component without errors" name="Notification Component Renders Error Notification component without errors" time="0.121">
    </testcase>
    <testcase classname="Notification Component Renders Success Notification component without errors" name="Notification Component Renders Success Notification component without errors" time="0.064">
    </testcase>
    <testcase classname="Notification Component Renders Notification component without errors" name="Notification Component Renders Notification component without errors" time="0.094">
    </testcase>
    <testcase classname="Notification Component Renders lastOnly Notification component without errors" name="Notification Component Renders lastOnly Notification component without errors" time="0.09">
    </testcase>
  </testsuite>
  <testsuite name="TableHeaderCell" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:52" time="1.711" tests="10">
    <testcase classname="TableHeaderCell Retrieves label if column definition is not an object and sortOptions are not specified" name="TableHeaderCell Retrieves label if column definition is not an object and sortOptions are not specified" time="0.018">
    </testcase>
    <testcase classname="TableHeaderCell Retrieves label if column definition is an object and sortOptions are not specified" name="TableHeaderCell Retrieves label if column definition is an object and sortOptions are not specified" time="0.019">
    </testcase>
    <testcase classname="TableHeaderCell Throws error if sortOptions are specified but, direction has a wrong value" name="TableHeaderCell Throws error if sortOptions are specified but, direction has a wrong value" time="0.036">
    </testcase>
    <testcase classname="TableHeaderCell Throws error if sortOptions are specified but, propertyName is missing" name="TableHeaderCell Throws error if sortOptions are specified but, propertyName is missing" time="0.009">
    </testcase>
    <testcase classname="TableHeaderCell Throws error if sortOptions are specified but, sortCallback is missing" name="TableHeaderCell Throws error if sortOptions are specified but, sortCallback is missing" time="0.005">
    </testcase>
    <testcase classname="TableHeaderCell Renders TableHeaderCell correctly when sortOptions are specifed and direction is Ascending" name="TableHeaderCell Renders TableHeaderCell correctly when sortOptions are specifed and direction is Ascending" time="0.037">
    </testcase>
    <testcase classname="TableHeaderCell Renders TableHeaderCell correctly when sortOptions are specifed and direction is Descending" name="TableHeaderCell Renders TableHeaderCell correctly when sortOptions are specifed and direction is Descending" time="0.032">
    </testcase>
    <testcase classname="TableHeaderCell Renders TableHeaderCell correctly when sortOptions are specifed and sortField is true" name="TableHeaderCell Renders TableHeaderCell correctly when sortOptions are specifed and sortField is true" time="0.024">
    </testcase>
    <testcase classname="TableHeaderCell Renders TableHeaderCell correctly when sortOptions are specifed and sortField is false" name="TableHeaderCell Renders TableHeaderCell correctly when sortOptions are specifed and sortField is false" time="0.02">
    </testcase>
    <testcase classname="TableHeaderCell Calls back passed callback function when sort icon was clicked" name="TableHeaderCell Calls back passed callback function when sort icon was clicked" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="useFullEntityEditState" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:52" time="1.793" tests="3">
    <testcase classname="useFullEntityEditState Initialize properly the full entity edit state" name="useFullEntityEditState Initialize properly the full entity edit state" time="0.073">
    </testcase>
    <testcase classname="useFullEntityEditState Initialize properly the full entity edit state with validations" name="useFullEntityEditState Initialize properly the full entity edit state with validations" time="0.05">
    </testcase>
    <testcase classname="useFullEntityEditState Initialize properly the full entity edit state with validations and dependencies" name="useFullEntityEditState Initialize properly the full entity edit state with validations and dependencies" time="0.054">
    </testcase>
  </testsuite>
  <testsuite name="Address" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:53" time="1.766" tests="6">
    <testcase classname="Address Renders Address when all parameters are passed" name="Address Renders Address when all parameters are passed" time="0.094">
    </testcase>
    <testcase classname="Address Renders Address when just required parameters are passed" name="Address Renders Address when just required parameters are passed" time="0.011">
    </testcase>
    <testcase classname="Address Renders Address with just firstName when lastName is not passed" name="Address Renders Address with just firstName when lastName is not passed" time="0.009">
    </testcase>
    <testcase classname="Address Renders Address with just lastName when firstName is not passed" name="Address Renders Address with just lastName when firstName is not passed" time="0.009">
    </testcase>
    <testcase classname="Address Use style passed to component" name="Address Use style passed to component" time="0.01">
    </testcase>
    <testcase classname="Address Fails if textProps has wrong type" name="Address Fails if textProps has wrong type" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="profilerHelper" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:54" time="1.565" tests="1">
    <testcase classname="profilerHelper get property value" name="profilerHelper get property value" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="Checkbox Component" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:53" time="1.737" tests="6">
    <testcase classname="Checkbox Component Fails if checkboxProps has wrong type" name="Checkbox Component Fails if checkboxProps has wrong type" time="0.051">
    </testcase>
    <testcase classname="Checkbox Component Renders Checkbox component without errors" name="Checkbox Component Renders Checkbox component without errors" time="0.07">
    </testcase>
    <testcase classname="Checkbox Component Renders Checkbox component without labels" name="Checkbox Component Renders Checkbox component without labels" time="0.014">
    </testcase>
    <testcase classname="Checkbox Component Checkbox component handles check" name="Checkbox Component Checkbox component handles check" time="0.03">
    </testcase>
    <testcase classname="Checkbox Component Checkbox component handles uncheck" name="Checkbox Component Checkbox component handles uncheck" time="0.017">
    </testcase>
    <testcase classname="Checkbox Component Renders Checkbox readonly true component without errors" name="Checkbox Component Renders Checkbox readonly true component without errors" time="0.018">
    </testcase>
  </testsuite>
  <testsuite name="DateInput" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:45" time="10.181" tests="1">
    <testcase classname="DateInput renders a three-part date input" name="DateInput renders a three-part date input" time="0.11">
    </testcase>
  </testsuite>
  <testsuite name="ApplicationDialog" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:54" time="1.677" tests="1">
    <testcase classname="ApplicationDialog renders a dialog structure listing applications" name="ApplicationDialog renders a dialog structure listing applications" time="0.107">
    </testcase>
  </testsuite>
  <testsuite name="ActionMenu" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:54" time="1.771" tests="3">
    <testcase classname="ActionMenu render DropDownMenu without errors" name="ActionMenu render DropDownMenu without errors" time="0.095">
    </testcase>
    <testcase classname="ActionMenu render DropDownMenu disabled dropdown" name="ActionMenu render DropDownMenu disabled dropdown" time="0.046">
    </testcase>
    <testcase classname="ActionMenu render DropDownMenu with autoFocus false" name="ActionMenu render DropDownMenu with autoFocus false" time="0.041">
    </testcase>
  </testsuite>
  <testsuite name="withDeferredPopper" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:54" time="2.084" tests="10">
    <testcase classname="withDeferredPopper Renders correct component if passed popperValue is not null or empty" name="withDeferredPopper Renders correct component if passed popperValue is not null or empty" time="0.017">
    </testcase>
    <testcase classname="withDeferredPopper Renders passed component as it is if passed popperValue is null, empty or not react component" name="withDeferredPopper Renders passed component as it is if passed popperValue is null, empty or not react component" time="0.004">
    </testcase>
    <testcase classname="withDeferredPopper Renders component correctly with classprop not null" name="withDeferredPopper Renders component correctly with classprop not null" time="0.051">
    </testcase>
    <testcase classname="withDeferredPopper Renders component correctly with classProp.popper not defined" name="withDeferredPopper Renders component correctly with classProp.popper not defined" time="0.016">
    </testcase>
    <testcase classname="withDeferredPopper Renders component correctly with classProp.arrow not defined" name="withDeferredPopper Renders component correctly with classProp.arrow not defined" time="0.017">
    </testcase>
    <testcase classname="withDeferredPopper Renders component correctly with classProp.popperContainer not defined" name="withDeferredPopper Renders component correctly with classProp.popperContainer not defined" time="0.022">
    </testcase>
    <testcase classname="withDeferredPopper Prevents default click behaviour if parent is a link &lt;a&gt;&lt;/a&gt;" name="withDeferredPopper Prevents default click behaviour if parent is a link &lt;a&gt;&lt;/a&gt;" time="0.062">
    </testcase>
    <testcase classname="withDeferredPopper Closes popper when clickAway event occurs" name="withDeferredPopper Closes popper when clickAway event occurs" time="0.07">
    </testcase>
    <testcase classname="withDeferredPopper Does not close popper when clickAway event occurs with null event currentTarget" name="withDeferredPopper Does not close popper when clickAway event occurs with null event currentTarget" time="0.094">
    </testcase>
    <testcase classname="withDeferredPopper Renders arrow" name="withDeferredPopper Renders arrow" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="MenuItem" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:55" time="1.726" tests="22">
    <testcase classname="MenuItem renders an icon and no label" name="MenuItem renders an icon and no label" time="0.069">
    </testcase>
    <testcase classname="MenuItem renders a menu toggle as an &lt;a&gt; tag" name="MenuItem renders a menu toggle as an &lt;a&gt; tag" time="0.024">
    </testcase>
    <testcase classname="MenuItem renders an icon and label" name="MenuItem renders an icon and label" time="0.035">
    </testcase>
    <testcase classname="MenuItem renders an open state" name="MenuItem renders an open state" time="0.038">
    </testcase>
    <testcase classname="MenuItem shows activity marker" name="MenuItem shows activity marker" time="0.033">
    </testcase>
    <testcase classname="MenuItem shows activity type" name="MenuItem shows activity type" time="0.038">
    </testcase>
    <testcase classname="MenuItem shows activity message" name="MenuItem shows activity message" time="0.045">
    </testcase>
    <testcase classname="MenuItem shows activity type on messages" name="MenuItem shows activity type on messages" time="0.048">
    </testcase>
    <testcase classname="MenuItem shows nothing if hide is true" name="MenuItem shows nothing if hide is true" time="0.004">
    </testcase>
    <testcase classname="MenuItem shows nothing if hide selector returns true" name="MenuItem shows nothing if hide selector returns true" time="0.002">
    </testcase>
    <testcase classname="MenuItem shows properly if hide selector returns false" name="MenuItem shows properly if hide selector returns false" time="0.034">
    </testcase>
    <testcase classname="MenuItem shows properly if hide is undefined" name="MenuItem shows properly if hide is undefined" time="0.05">
    </testcase>
    <testcase classname="MenuItem Block sets text color to highlight if active" name="MenuItem Block sets text color to highlight if active" time="0.006">
    </testcase>
    <testcase classname="MenuItem Block sets text color to grey if not active" name="MenuItem Block sets text color to grey if not active" time="0.003">
    </testcase>
    <testcase classname="MenuItem Block adds a hover rule if menu flag is unset" name="MenuItem Block adds a hover rule if menu flag is unset" time="0.005">
    </testcase>
    <testcase classname="MenuItem Block does not add a hover rule if menuToggle flag is set" name="MenuItem Block does not add a hover rule if menuToggle flag is set" time="0.008">
    </testcase>
    <testcase classname="MenuItem Label sets full opacity if open" name="MenuItem Label sets full opacity if open" time="0.003">
    </testcase>
    <testcase classname="MenuItem Label sets zero opacity if not open" name="MenuItem Label sets zero opacity if not open" time="0.002">
    </testcase>
    <testcase classname="MenuItem Alert has a default color (red)" name="MenuItem Alert has a default color (red)" time="0.003">
    </testcase>
    <testcase classname="MenuItem Alert has a default color" name="MenuItem Alert has a default color" time="0.005">
    </testcase>
    <testcase classname="MenuItem AlertMessage has a default color (red)" name="MenuItem AlertMessage has a default color (red)" time="0.006">
    </testcase>
    <testcase classname="MenuItem AlertMessage has a default color" name="MenuItem AlertMessage has a default color" time="0.016">
    </testcase>
  </testsuite>
  <testsuite name="InputBase Component" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:55" time="1.865" tests="10">
    <testcase classname="InputBase Component Fails if inputProps has wrong type" name="InputBase Component Fails if inputProps has wrong type" time="0.111">
    </testcase>
    <testcase classname="InputBase Component Renders InputBase component without errors" name="InputBase Component Renders InputBase component without errors" time="0.053">
    </testcase>
    <testcase classname="InputBase Component Renders InputBase component without labels" name="InputBase Component Renders InputBase component without labels" time="0.011">
    </testcase>
    <testcase classname="InputBase Component Renders InputBase component with error" name="InputBase Component Renders InputBase component with error" time="0.015">
    </testcase>
    <testcase classname="InputBase Component InputBase component handles change" name="InputBase Component InputBase component handles change" time="0.021">
    </testcase>
    <testcase classname="InputBase Component InputBase component handles focus on click" name="InputBase Component InputBase component handles focus on click" time="0.012">
    </testcase>
    <testcase classname="InputBase Component Renders InputBase when error position is &apos;right&apos;" name="InputBase Component Renders InputBase when error position is &apos;right&apos;" time="0.021">
    </testcase>
    <testcase classname="InputBase Component Renders InputBase with start adornment" name="InputBase Component Renders InputBase with start adornment" time="0.008">
    </testcase>
    <testcase classname="InputBase Component Renders InputBase with end adornment" name="InputBase Component Renders InputBase with end adornment" time="0.009">
    </testcase>
    <testcase classname="InputBase Component Renders InputBase with autoComplete as new-password" name="InputBase Component Renders InputBase with autoComplete as new-password" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="Modal" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:55" time="2.227" tests="6">
    <testcase classname="Modal Throws an error if modalProps has wrong type" name="Modal Throws an error if modalProps has wrong type" time="0.067">
    </testcase>
    <testcase classname="Modal Renders Modal properly when opened and only messages was passed" name="Modal Renders Modal properly when opened and only messages was passed" time="0.094">
    </testcase>
    <testcase classname="Modal Renders Modal properly when opened and all props were passed" name="Modal Renders Modal properly when opened and all props were passed" time="0.086">
    </testcase>
    <testcase classname="Modal Renders nothing when modal is closed" name="Modal Renders nothing when modal is closed" time="0.003">
    </testcase>
    <testcase classname="Modal Calls passed backdropClick as reason on click event" name="Modal Calls passed backdropClick as reason on click event" time="0.035">
    </testcase>
    <testcase classname="Modal Calls passed unknown reason on click event" name="Modal Calls passed unknown reason on click event" time="0.021">
    </testcase>
  </testsuite>
  <testsuite name="IconButton" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:56" time="1.354" tests="3">
    <testcase classname="IconButton renders a button with an icon" name="IconButton renders a button with an icon" time="0.071">
    </testcase>
    <testcase classname="IconButton renders a button with a label" name="IconButton renders a button with a label" time="0.019">
    </testcase>
    <testcase classname="IconButton renders a button with both an icon and a label" name="IconButton renders a button with both an icon and a label" time="0.023">
    </testcase>
  </testsuite>
  <testsuite name="Menu" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:56" time="2.12" tests="9">
    <testcase classname="Menu renders a closed menu" name="Menu renders a closed menu" time="0.008">
    </testcase>
    <testcase classname="Menu renders an open menu" name="Menu renders an open menu" time="0.06">
    </testcase>
    <testcase classname="Menu renders an open right-aligned menu" name="Menu renders an open right-aligned menu" time="0.072">
    </testcase>
    <testcase classname="Menu closes on click on item" name="Menu closes on click on item" time="0.057">
    </testcase>
    <testcase classname="Menu Drawer sets transition time according to its timeout" name="Menu Drawer sets transition time according to its timeout" time="0.014">
    </testcase>
    <testcase classname="Menu Drawer defaults to left aligned position" name="Menu Drawer defaults to left aligned position" time="0.007">
    </testcase>
    <testcase classname="Menu Drawer can align right" name="Menu Drawer can align right" time="0.01">
    </testcase>
    <testcase classname="Menu Item shows a background with the highlight color when hovering" name="Menu Item shows a background with the highlight color when hovering" time="0.01">
    </testcase>
    <testcase classname="Menu Item has a default highlight color" name="Menu Item has a default highlight color" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Selector" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:56" time="1.988" tests="2">
    <testcase classname="Selector shows a side panel with search and tree with a current node" name="Selector shows a side panel with search and tree with a current node" time="0.481">
    </testcase>
    <testcase classname="Selector shows a side panel with search and tree" name="Selector shows a side panel with search and tree" time="0.081">
    </testcase>
  </testsuite>
  <testsuite name="Checkbox" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:56" time="1.891" tests="10">
    <testcase classname="Checkbox renders an input and a label" name="Checkbox renders an input and a label" time="0.055">
    </testcase>
    <testcase classname="ContainedInput renders an input of type checkbox" name="ContainedInput renders an input of type checkbox" time="0.008">
    </testcase>
    <testcase classname="Cover sets a highlight when input is focused or active" name="Cover sets a highlight when input is focused or active" time="0.01">
    </testcase>
    <testcase classname="Cover sets a highlight when input is focused or active, when checked" name="Cover sets a highlight when input is focused or active, when checked" time="0.008">
    </testcase>
    <testcase classname="Cover sets a clear background when not checked" name="Cover sets a clear background when not checked" time="0.003">
    </testcase>
    <testcase classname="Cover sets a colored background and a checkmark when checked" name="Cover sets a colored background and a checkmark when checked" time="0.004">
    </testcase>
    <testcase classname="Cover with highlight color from theme sets a highlight when input is focused or active" name="Cover with highlight color from theme sets a highlight when input is focused or active" time="0.007">
    </testcase>
    <testcase classname="Cover with highlight color from theme sets a highlight when input is focused or active, when checked" name="Cover with highlight color from theme sets a highlight when input is focused or active, when checked" time="0.007">
    </testcase>
    <testcase classname="Cover with highlight color from theme sets a clear background when not checked" name="Cover with highlight color from theme sets a clear background when not checked" time="0.004">
    </testcase>
    <testcase classname="Cover with highlight color from theme sets a colored background and a checkmark when checked" name="Cover with highlight color from theme sets a colored background and a checkmark when checked" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Authenticate" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:57" time="1.455" tests="6">
    <testcase classname="Authenticate shows the wrapped component if authenticated and default scope is known" name="Authenticate shows the wrapped component if authenticated and default scope is known" time="0.016">
    </testcase>
    <testcase classname="Authenticate shows a load indicator component if authentication is ongoing" name="Authenticate shows a load indicator component if authentication is ongoing" time="0.036">
    </testcase>
    <testcase classname="Authenticate shows a load indicator component if default scope is unknown" name="Authenticate shows a load indicator component if default scope is unknown" time="0.018">
    </testcase>
    <testcase classname="Authenticate shows an error screen if not logged in" name="Authenticate shows an error screen if not logged in" time="0.021">
    </testcase>
    <testcase classname="Authenticate shows an error screen if an error occured" name="Authenticate shows an error screen if an error occured" time="0.031">
    </testcase>
    <testcase classname="Authenticate shows an error screen if an error without payload occured" name="Authenticate shows an error screen if an error without payload occured" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="withToggle" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:57" time="1.943" tests="5">
    <testcase classname="withToggle gives deprecation warning" name="withToggle gives deprecation warning" time="0.006">
    </testcase>
    <testcase classname="withToggle provides toggle and toggledOn props, handling state" name="withToggle provides toggle and toggledOn props, handling state" time="0.039">
    </testcase>
    <testcase classname="withToggle handles multiple components of the same type" name="withToggle handles multiple components of the same type" time="0.124">
    </testcase>
    <testcase classname="withToggle allows initializing the toggled parameter" name="withToggle allows initializing the toggled parameter" time="0.01">
    </testcase>
    <testcase classname="withToggle can be reset by calling that function" name="withToggle can be reset by calling that function" time="0.024">
    </testcase>
  </testsuite>
  <testsuite name="withNavigationLink" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:58" time="1.883" tests="7">
    <testcase classname="withNavigationLink provides a deprecation warning on use" name="withNavigationLink provides a deprecation warning on use" time="0.062">
    </testcase>
    <testcase classname="withNavigationLink sets an active flag if the current path matches the href" name="withNavigationLink sets an active flag if the current path matches the href" time="0.045">
    </testcase>
    <testcase classname="withNavigationLink omits active flag if the current path does not match the href" name="withNavigationLink omits active flag if the current path does not match the href" time="0.011">
    </testcase>
    <testcase classname="withNavigationLink sets onClick handler (navigating via router) on local hrefs" name="withNavigationLink sets onClick handler (navigating via router) on local hrefs" time="0.028">
    </testcase>
    <testcase classname="withNavigationLink does not navigate on self href" name="withNavigationLink does not navigate on self href" time="0.014">
    </testcase>
    <testcase classname="withNavigationLink does navigate to remote hrefs" name="withNavigationLink does navigate to remote hrefs" time="0.011">
    </testcase>
    <testcase classname="withNavigationLink no href does not navigate" name="withNavigationLink no href does not navigate" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="withUpdateHandler" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:58" time="1.729" tests="4">
    <testcase classname="withUpdateHandler issues a deprecation warning" name="withUpdateHandler issues a deprecation warning" time="0.107">
    </testcase>
    <testcase classname="withUpdateHandler calls named update handler on wrapped component" name="withUpdateHandler calls named update handler on wrapped component" time="0.007">
    </testcase>
    <testcase classname="withUpdateHandler only calls handler if test passes" name="withUpdateHandler only calls handler if test passes" time="0.016">
    </testcase>
    <testcase classname="withUpdateHandler never calls handler if no test given" name="withUpdateHandler never calls handler if no test given" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="Paper" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:58" time="1.828" tests="9">
    <testcase classname="Paper Renders paper with passed content" name="Paper Renders paper with passed content" time="0.009">
    </testcase>
    <testcase classname="Paper Fails if paperProps has wrong type" name="Paper Fails if paperProps has wrong type" time="0.05">
    </testcase>
    <testcase classname="Paper Uses elevation prop correctly when it&apos;s passed" name="Paper Uses elevation prop correctly when it&apos;s passed" time="0.035">
    </testcase>
    <testcase classname="Paper Uses elevation prop correctly when it&apos;s not passed" name="Paper Uses elevation prop correctly when it&apos;s not passed" time="0.009">
    </testcase>
    <testcase classname="Paper Uses square prop correctly when it&apos;s passed" name="Paper Uses square prop correctly when it&apos;s passed" time="0.009">
    </testcase>
    <testcase classname="Paper Uses square prop correctly when it&apos;s not passed" name="Paper Uses square prop correctly when it&apos;s not passed" time="0.011">
    </testcase>
    <testcase classname="Paper Uses variant prop correctly when it&apos;s passed" name="Paper Uses variant prop correctly when it&apos;s passed" time="0.022">
    </testcase>
    <testcase classname="Paper Uses variant prop correctly when it&apos;s not passed" name="Paper Uses variant prop correctly when it&apos;s not passed" time="0.008">
    </testcase>
    <testcase classname="Paper Uses root rule name correctly" name="Paper Uses root rule name correctly" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="computeFinalRequestProcessingState" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:58" time="1.918" tests="6">
    <testcase classname="computeFinalRequestProcessingState Retrieves success if all the states has success value" name="computeFinalRequestProcessingState Retrieves success if all the states has success value" time="0.068">
    </testcase>
    <testcase classname="computeFinalRequestProcessingState Retrieves success if all the states has success or idle values" name="computeFinalRequestProcessingState Retrieves success if all the states has success or idle values" time="0.001">
    </testcase>
    <testcase classname="computeFinalRequestProcessingState Retrieves processing if at least one state has processing value" name="computeFinalRequestProcessingState Retrieves processing if at least one state has processing value" time="0.001">
    </testcase>
    <testcase classname="computeFinalRequestProcessingState Retrieves processing if at least one state has fail value" name="computeFinalRequestProcessingState Retrieves processing if at least one state has fail value" time="0">
    </testcase>
    <testcase classname="computeFinalRequestProcessingState Retrieves idle if all the states has idle values" name="computeFinalRequestProcessingState Retrieves idle if all the states has idle values" time="0.001">
    </testcase>
    <testcase classname="computeFinalRequestProcessingState Throws an error if one of passed values is not existing value in requestStates" name="computeFinalRequestProcessingState Throws an error if one of passed values is not existing value in requestStates" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getAuthProfile" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:58" time="1.6" tests="3">
    <testcase classname="getAuthProfile creates a RSAA to fetch the authentication profile of the current user" name="getAuthProfile creates a RSAA to fetch the authentication profile of the current user" time="0.388">
    </testcase>
    <testcase classname="signOut creates a RSAA to sign out the current user" name="signOut creates a RSAA to sign out the current user" time="0.01">
    </testcase>
    <testcase classname="signOut creates a RSAA to sign out the current user with unknown application" name="signOut creates a RSAA to sign out the current user with unknown application" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="withViewState" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:59" time="1.757" tests="4">
    <testcase classname="withViewState gives deprecation warning" name="withViewState gives deprecation warning" time="0.062">
    </testcase>
    <testcase classname="withViewState adds a value prop to an element based on its name prop" name="withViewState adds a value prop to an element based on its name prop" time="0.021">
    </testcase>
    <testcase classname="withViewState handles nonexistent state" name="withViewState handles nonexistent state" time="0.009">
    </testcase>
    <testcase classname="withViewState adds function that updates the state" name="withViewState adds function that updates the state" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="withErrorBoundary" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:29:59" time="2.18" tests="2">
    <testcase classname="withErrorBoundary catches errors and passes them to component" name="withErrorBoundary catches errors and passes them to component" time="0.034">
    </testcase>
    <testcase classname="withErrorBoundary logs errors to console" name="withErrorBoundary logs errors to console" time="0.041">
    </testcase>
  </testsuite>
  <testsuite name="authentication" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:00" time="1.275" tests="5">
    <testcase classname="authentication behaves as a reducer should" name="authentication behaves as a reducer should" time="0.006">
    </testcase>
    <testcase classname="authentication storing authentication stores the upn" name="authentication storing authentication stores the upn" time="0.003">
    </testcase>
    <testcase classname="authentication storing authentication stores the name" name="authentication storing authentication stores the name" time="0.002">
    </testcase>
    <testcase classname="authentication storing authentication stores roles and claims" name="authentication storing authentication stores roles and claims" time="0.002">
    </testcase>
    <testcase classname="authentication sign out redirects to the sign out page" name="authentication sign out redirects to the sign out page" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="Placeholder" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:00" time="1.999" tests="7">
    <testcase classname="Placeholder renders a placeholder with icon, title, and subtitle" name="Placeholder renders a placeholder with icon, title, and subtitle" time="0.053">
    </testcase>
    <testcase classname="Placeholder renders an empty placeholder" name="Placeholder renders an empty placeholder" time="0.014">
    </testcase>
    <testcase classname="Placeholder renders an animated icon" name="Placeholder renders an animated icon" time="0.026">
    </testcase>
    <testcase classname="Placeholder translates title and subtitle if given message descriptors" name="Placeholder translates title and subtitle if given message descriptors" time="0.039">
    </testcase>
    <testcase classname="Placeholder renders a warning placeholder" name="Placeholder renders a warning placeholder" time="0.021">
    </testcase>
    <testcase classname="PlaceholderIcon renders with animation" name="PlaceholderIcon renders with animation" time="0.005">
    </testcase>
    <testcase classname="PlaceholderIcon renders without animation" name="PlaceholderIcon renders without animation" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="TitledSelect" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:00" time="2.046" tests="1">
    <testcase classname="TitledSelect Renders title select properly" name="TitledSelect Renders title select properly" time="0.222">
    </testcase>
  </testsuite>
  <testsuite name="withScopeData" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:00" time="2.19" tests="3">
    <testcase classname="withScopeData gives deprecation warning" name="withScopeData gives deprecation warning" time="0.123">
    </testcase>
    <testcase classname="withScopeData provides scope data props to the enhanced component" name="withScopeData provides scope data props to the enhanced component" time="0.132">
    </testcase>
    <testcase classname="withScopeData loads scopes if it has none" name="withScopeData loads scopes if it has none" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="Fullpage" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:00" time="1.952" tests="4">
    <testcase classname="Fullpage shows a page if no segments" name="Fullpage shows a page if no segments" time="0.049">
    </testcase>
    <testcase classname="Fullpage shows a page under a page" name="Fullpage shows a page under a page" time="0.016">
    </testcase>
    <testcase classname="Fullpage shows a segment page if segments" name="Fullpage shows a segment page if segments" time="0.143">
    </testcase>
    <testcase classname="Fullpage entityIdResolver is passed to SegmentPage" name="Fullpage entityIdResolver is passed to SegmentPage" time="0.103">
    </testcase>
  </testsuite>
  <testsuite name="Input" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:01" time="1.754" tests="3">
    <testcase classname="Input renders a styled input field with a plain text placeholder" name="Input renders a styled input field with a plain text placeholder" time="0.026">
    </testcase>
    <testcase classname="Input renders a styled input field with a translated placeholder" name="Input renders a styled input field with a translated placeholder" time="0.023">
    </testcase>
    <testcase classname="Input fails on attempt to translate intl message outside an IntlProvider" name="Input fails on attempt to translate intl message outside an IntlProvider" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="useLoader" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:01" time="1.852" tests="8">
    <testcase classname="useLoader dispatches the loader action on mount if cutout returns falsy" name="useLoader dispatches the loader action on mount if cutout returns falsy" time="0.035">
    </testcase>
    <testcase classname="useLoader does not dispatch loader if cutout returns truthy" name="useLoader does not dispatch loader if cutout returns truthy" time="0.014">
    </testcase>
    <testcase classname="useLoader does not dispatch loader if logged out" name="useLoader does not dispatch loader if logged out" time="0.009">
    </testcase>
    <testcase classname="useLoader does not dispatch loader if no cutout selector given, warns" name="useLoader does not dispatch loader if no cutout selector given, warns" time="0.017">
    </testcase>
    <testcase classname="useLoader dispatches multiple loader actions" name="useLoader dispatches multiple loader actions" time="0.016">
    </testcase>
    <testcase classname="useLoader only dispatches once if cutout does not change" name="useLoader only dispatches once if cutout does not change" time="0.019">
    </testcase>
    <testcase classname="useLoader fires loader if cutout is falsy, but not again if it becomes truthy" name="useLoader fires loader if cutout is falsy, but not again if it becomes truthy" time="0.011">
    </testcase>
    <testcase classname="useLoader fires loader if cutout was truthy, becomes falsy" name="useLoader fires loader if cutout was truthy, becomes falsy" time="0.018">
    </testcase>
  </testsuite>
  <testsuite name="TimeInput" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:02" time="1.245" tests="2">
    <testcase classname="TimeInput renders a basic time input, preliminary" name="TimeInput renders a basic time input, preliminary" time="0.081">
    </testcase>
    <testcase classname="TimeInput renders a required time input with invalid value" name="TimeInput renders a required time input with invalid value" time="0.037">
    </testcase>
  </testsuite>
  <testsuite name="currentScopeSelector" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:02" time="1.151" tests="17">
    <testcase classname="currentScopeSelector gets the current scope in the selected language" name="currentScopeSelector gets the current scope in the selected language" time="0.009">
    </testcase>
    <testcase classname="currentScopeSelector gets global scope when there is no current scope, not a default scope" name="currentScopeSelector gets global scope when there is no current scope, not a default scope" time="0.004">
    </testcase>
    <testcase classname="currentScopeSelector gets default scope from settings if no scope selected" name="currentScopeSelector gets default scope from settings if no scope selected" time="0.004">
    </testcase>
    <testcase classname="currentScopeSelector gets null if scope not found" name="currentScopeSelector gets null if scope not found" time="0.003">
    </testcase>
    <testcase classname="scopeDefaultCultureSelector gets the current scope in the selected language" name="scopeDefaultCultureSelector gets the current scope in the selected language" time="0.003">
    </testcase>
    <testcase classname="isCurrentScopeAuthorizedSelector get current scope is Authorized" name="isCurrentScopeAuthorizedSelector get current scope is Authorized" time="0.003">
    </testcase>
    <testcase classname="isCurrentScopeAuthorizedSelector get true because scopes list is empty" name="isCurrentScopeAuthorizedSelector get true because scopes list is empty" time="0.002">
    </testcase>
    <testcase classname="isCurrentScopeAuthorizedSelector get false if scope not found" name="isCurrentScopeAuthorizedSelector get false if scope not found" time="0.004">
    </testcase>
    <testcase classname="scopeGetter returns a getter function for scopes from the full scope index" name="scopeGetter returns a getter function for scopes from the full scope index" time="0.005">
    </testcase>
    <testcase classname="scopeGetter returns a getter function for scopes from a filtered scope index" name="scopeGetter returns a getter function for scopes from a filtered scope index" time="0.01">
    </testcase>
    <testcase classname="scopeGetter will reach Global scope even if no scopes match search" name="scopeGetter will reach Global scope even if no scopes match search" time="0.006">
    </testcase>
    <testcase classname="localizedScopeSelector returns localized scope name by id" name="localizedScopeSelector returns localized scope name by id" time="0.004">
    </testcase>
    <testcase classname="localizedScopeSelector returns default value if scope name doesn&apos;t contain value for current locale" name="localizedScopeSelector returns default value if scope name doesn&apos;t contain value for current locale" time="0.003">
    </testcase>
    <testcase classname="localizedScopeSelector returns null when scope id is not found" name="localizedScopeSelector returns null when scope id is not found" time="0.002">
    </testcase>
    <testcase classname="localizedScopesSelectorByIds Retrieves localized scopes" name="localizedScopesSelectorByIds Retrieves localized scopes" time="0.009">
    </testcase>
    <testcase classname="localizedScopesSelectorByIds Retrieves localized scopes with fallback currency" name="localizedScopesSelectorByIds Retrieves localized scopes with fallback currency" time="0.003">
    </testcase>
    <testcase classname="localizedScopesSelectorByIds Not adds scope in result array if it does not exist" name="localizedScopesSelectorByIds Not adds scope in result array if it does not exist" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="I18n" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:01" time="1.757" tests="1">
    <testcase classname="I18n renders a react-intl IntlProvider with locale data provided" name="I18n renders a react-intl IntlProvider with locale data provided" time="0.042">
    </testcase>
  </testsuite>
  <testsuite name="DataCell" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:02" time="1.571" tests="12">
    <testcase classname="DataCell renders a cell as defined by column and row" name="DataCell renders a cell as defined by column and row" time="0.045">
    </testcase>
    <testcase classname="DataCell renders an empty cell" name="DataCell renders an empty cell" time="0.022">
    </testcase>
    <testcase classname="DataCell renders a cell with a default value" name="DataCell renders a cell with a default value" time="0.02">
    </testcase>
    <testcase classname="DataCell renders a cell with type currency" name="DataCell renders a cell with type currency" time="0.029">
    </testcase>
    <testcase classname="DataCell renders a cell with type currency for 0" name="DataCell renders a cell with type currency for 0" time="0.018">
    </testcase>
    <testcase classname="DataCell renders a cell with type currency and row-based currency code" name="DataCell renders a cell with type currency and row-based currency code" time="0.012">
    </testcase>
    <testcase classname="DataCell renders a cell with type date" name="DataCell renders a cell with type date" time="0.019">
    </testcase>
    <testcase classname="DataCell renders a cell with type datetime" name="DataCell renders a cell with type datetime" time="0.029">
    </testcase>
    <testcase classname="DataCell renders a cell with type select" name="DataCell renders a cell with type select" time="0.053">
    </testcase>
    <testcase classname="DataCell renders a cell with type switch" name="DataCell renders a cell with type switch" time="0.038">
    </testcase>
    <testcase classname="DataCell renders a cell with a value transformer" name="DataCell renders a cell with a value transformer" time="0.015">
    </testcase>
    <testcase classname="DataCell renders a cell with type custom" name="DataCell renders a cell with type custom" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="MultipleLinesText" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:02" time="1.869" tests="8">
    <testcase classname="MultipleLinesText Renders text" name="MultipleLinesText Renders text" time="0.062">
    </testcase>
    <testcase classname="MultipleLinesText Shoud use children property for titleValue by default" name="MultipleLinesText Shoud use children property for titleValue by default" time="0.008">
    </testcase>
    <testcase classname="MultipleLinesText Shoud use passed titleValue if it&apos;s defined" name="MultipleLinesText Shoud use passed titleValue if it&apos;s defined" time="0.001">
    </testcase>
    <testcase classname="MultipleLinesText Use style passed to component" name="MultipleLinesText Use style passed to component" time="0.025">
    </testcase>
    <testcase classname="MultipleLinesText Shoud not throw an error if lineCount is not passed and use fallback value" name="MultipleLinesText Shoud not throw an error if lineCount is not passed and use fallback value" time="0.001">
    </testcase>
    <testcase classname="MultipleLinesText Passes true for alwaysDisplay property if text is clamped" name="MultipleLinesText Passes true for alwaysDisplay property if text is clamped" time="0.002">
    </testcase>
    <testcase classname="MultipleLinesText Passes false for alwaysDisplay property if text is not clamped" name="MultipleLinesText Passes false for alwaysDisplay property if text is not clamped" time="0.001">
    </testcase>
    <testcase classname="MultipleLinesText Fails if textProps has wrong type" name="MultipleLinesText Fails if textProps has wrong type" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="TimelineItem" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:03" time="1.5" tests="8">
    <testcase classname="TimelineItem Renders Timeline without items" name="TimelineItem Renders Timeline without items" time="0.033">
    </testcase>
    <testcase classname="TimelineItem Renders TimelineItem with content" name="TimelineItem Renders TimelineItem with content" time="0.046">
    </testcase>
    <testcase classname="TimelineItem Renders TimelineItem with contentOpposite" name="TimelineItem Renders TimelineItem with contentOpposite" time="0.011">
    </testcase>
    <testcase classname="TimelineItem Renders TimelineItem with a content and contentOpposite" name="TimelineItem Renders TimelineItem with a content and contentOpposite" time="0.007">
    </testcase>
    <testcase classname="TimelineItem Renders TimelineItem with an icon" name="TimelineItem Renders TimelineItem with an icon" time="0.009">
    </testcase>
    <testcase classname="TimelineItem Renders TimelineItem with outlined" name="TimelineItem Renders TimelineItem with outlined" time="0.01">
    </testcase>
    <testcase classname="TimelineItem Renders TimelineItem with TimelineConnector" name="TimelineItem Renders TimelineItem with TimelineConnector" time="0.013">
    </testcase>
    <testcase classname="TimelineItem Renders TimelineItem without TimelineConnector" name="TimelineItem Renders TimelineItem without TimelineConnector" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="SmallButton" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:03" time="1.173" tests="2">
    <testcase classname="SmallButton renders a small button showing an icon" name="SmallButton renders a small button showing an icon" time="0.069">
    </testcase>
    <testcase classname="SmallButton adds an ugly default alt text if none given, shaming the dev" name="SmallButton adds an ugly default alt text if none given, shaming the dev" time="0.028">
    </testcase>
  </testsuite>
  <testsuite name="Page" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:03" time="1.782" tests="3">
    <testcase classname="Page shows the page view when its path is matched" name="Page shows the page view when its path is matched" time="0.028">
    </testcase>
    <testcase classname="Page shows nested page when its path is matched" name="Page shows nested page when its path is matched" time="0.014">
    </testcase>
    <testcase classname="Page renders both its own view as well as matched subpage" name="Page renders both its own view as well as matched subpage" time="0.087">
    </testcase>
  </testsuite>
  <testsuite name="HeadCell" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:03" time="1.502" tests="12">
    <testcase classname="HeadCell renders a header cell with the column label" name="HeadCell renders a header cell with the column label" time="0.049">
    </testcase>
    <testcase classname="HeadCell renders a header cell with no label" name="HeadCell renders a header cell with no label" time="0.031">
    </testcase>
    <testcase classname="HeadCell renders a header cell for a select column" name="HeadCell renders a header cell for a select column" time="0.091">
    </testcase>
    <testcase classname="HeadCell renders a header cell for a select column with all rows selected" name="HeadCell renders a header cell for a select column with all rows selected" time="0.063">
    </testcase>
    <testcase classname="HeadCell renders a sortable header cell" name="HeadCell renders a sortable header cell" time="0.053">
    </testcase>
    <testcase classname="HeadCell renders a sortable header cell sorted ascending" name="HeadCell renders a sortable header cell sorted ascending" time="0.025">
    </testcase>
    <testcase classname="HeadCell renders a sortable header cell sorted descending" name="HeadCell renders a sortable header cell sorted descending" time="0.019">
    </testcase>
    <testcase classname="TableHeader sets a width if selection column" name="TableHeader sets a width if selection column" time="0.004">
    </testcase>
    <testcase classname="TableHeader sets a width if told to" name="TableHeader sets a width if told to" time="0.004">
    </testcase>
    <testcase classname="SortMark renders a downwards arrow when ascending" name="SortMark renders a downwards arrow when ascending" time="0.027">
    </testcase>
    <testcase classname="SortMark renders an upwards arrow when descending" name="SortMark renders an upwards arrow when descending" time="0.005">
    </testcase>
    <testcase classname="SortMark renders bidirectional arrows when no direction set" name="SortMark renders bidirectional arrows when no direction set" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="TableInfoBar" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:04" time="1.157" tests="1">
    <testcase classname="TableInfoBar Renders properly" name="TableInfoBar Renders properly" time="0.088">
    </testcase>
  </testsuite>
  <testsuite name="InternetExplorerWarningMessage with Internet Explorer" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:03" time="1.757" tests="2">
    <testcase classname="InternetExplorerWarningMessage with Internet Explorer renders the dialog for IE11" name="InternetExplorerWarningMessage with Internet Explorer renders the dialog for IE11" time="0.181">
    </testcase>
    <testcase classname="InternetExplorerWarningMessage without Internet Explorer renders the dialog for IE11" name="InternetExplorerWarningMessage without Internet Explorer renders the dialog for IE11" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="objectHelper" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:05" time="1.047" tests="5">
    <testcase classname="objectHelper Retrieves empty object if no keys were passed" name="objectHelper Retrieves empty object if no keys were passed" time="0.002">
    </testcase>
    <testcase classname="objectHelper Retrieves keys with default values when values array not corresponds to keys array" name="objectHelper Retrieves keys with default values when values array not corresponds to keys array" time="0.001">
    </testcase>
    <testcase classname="objectHelper Retrieves keys with values when values array corresponds to keys array" name="objectHelper Retrieves keys with values when values array corresponds to keys array" time="0.001">
    </testcase>
    <testcase classname="objectHelper Retrieves keys with values and default values when values array corresponds to keys array but some values are nulls" name="objectHelper Retrieves keys with values and default values when values array corresponds to keys array but some values are nulls" time="0.001">
    </testcase>
    <testcase classname="objectHelper Retrieves keys with default values when values array not corresponds to keys array and there is custom default value" name="objectHelper Retrieves keys with default values when values array not corresponds to keys array and there is custom default value" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="routingConnector" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:04" time="1.634" tests="1">
    <testcase classname="routingConnector gives deprecation warning" name="routingConnector gives deprecation warning" time="0.024">
    </testcase>
  </testsuite>
  <testsuite name="buildStore" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:04" time="1.254" tests="5">
    <testcase classname="buildStore builds a redux store" name="buildStore builds a redux store" time="0.029">
    </testcase>
    <testcase classname="buildStore sets options on Redux dev tools" name="buildStore sets options on Redux dev tools" time="0.012">
    </testcase>
    <testcase classname="buildStore functionality getState gets a state Map of the right shape" name="buildStore functionality getState gets a state Map of the right shape" time="0.026">
    </testcase>
    <testcase classname="buildStore functionality dispatch updates state when called with an action" name="buildStore functionality dispatch updates state when called with an action" time="0.006">
    </testcase>
    <testcase classname="buildStore functionality subscribe sets a callback for state updates" name="buildStore functionality subscribe sets a callback for state updates" time="0.018">
    </testcase>
  </testsuite>
  <testsuite name="Selector" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:04" time="1.467" tests="5">
    <testcase classname="Selector renders a wrapped, hidden select element, and visual cover elements" name="Selector renders a wrapped, hidden select element, and visual cover elements" time="0.166">
    </testcase>
    <testcase classname="Selector renders a wrapped, hidden select element, and visual cover elements" name="Selector renders a wrapped, hidden select element, and visual cover elements" time="0.083">
    </testcase>
    <testcase classname="Selector renders a placeholder if no value set" name="Selector renders a placeholder if no value set" time="0.037">
    </testcase>
    <testcase classname="Selector can update value when inner selector changes" name="Selector can update value when inner selector changes" time="0.065">
    </testcase>
    <testcase classname="Selector can update value when clicking a visual option" name="Selector can update value when clicking a visual option" time="0.037">
    </testcase>
  </testsuite>
  <testsuite name="Navigation reducer" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:05" time="1.217" tests="18">
    <testcase classname="Navigation reducer behaves as a reducer should" name="Navigation reducer behaves as a reducer should" time="0.007">
    </testcase>
    <testcase classname="Navigation reducer SET_ROUTE saves the current matched route" name="Navigation reducer SET_ROUTE saves the current matched route" time="0.007">
    </testcase>
    <testcase classname="Navigation reducer SET_ROUTE saves pages navigated to" name="Navigation reducer SET_ROUTE saves pages navigated to" time="0.002">
    </testcase>
    <testcase classname="Navigation reducer SET_ROUTE creates a list of open tabs per module" name="Navigation reducer SET_ROUTE creates a list of open tabs per module" time="0.003">
    </testcase>
    <testcase classname="Navigation reducer SET_ROUTE adds to the list of open tabs per module" name="Navigation reducer SET_ROUTE adds to the list of open tabs per module" time="0.002">
    </testcase>
    <testcase classname="Navigation reducer SET_ROUTE does not add duplicate tabs to module list" name="Navigation reducer SET_ROUTE does not add duplicate tabs to module list" time="0.002">
    </testcase>
    <testcase classname="Navigation reducer SET_ROUTE does nothing if path is invalid" name="Navigation reducer SET_ROUTE does nothing if path is invalid" time="0.005">
    </testcase>
    <testcase classname="Navigation reducer MAP_HREF updates segment href map if navigating to a segment page" name="Navigation reducer MAP_HREF updates segment href map if navigating to a segment page" time="0.009">
    </testcase>
    <testcase classname="Navigation reducer MAP_HREF does nothing if from path is invalid" name="Navigation reducer MAP_HREF does nothing if from path is invalid" time="0.003">
    </testcase>
    <testcase classname="Navigation reducer MAP_HREF does nothing if to path is invalid" name="Navigation reducer MAP_HREF does nothing if to path is invalid" time="0.001">
    </testcase>
    <testcase classname="Navigation reducer REMOVE_TAB can remove open tabs" name="Navigation reducer REMOVE_TAB can remove open tabs" time="0.003">
    </testcase>
    <testcase classname="Navigation reducer REMOVE_TAB handles missing module names gracefully" name="Navigation reducer REMOVE_TAB handles missing module names gracefully" time="0.002">
    </testcase>
    <testcase classname="Navigation reducer REMOVE_TAB does nothing if the tab to remove is not found" name="Navigation reducer REMOVE_TAB does nothing if the tab to remove is not found" time="0">
    </testcase>
    <testcase classname="Navigation reducer REMOVE_TAB does nothing if path is invalid" name="Navigation reducer REMOVE_TAB does nothing if path is invalid" time="0">
    </testcase>
    <testcase classname="Navigation reducer SET_HREF_CONFIG update href config in navigation state" name="Navigation reducer SET_HREF_CONFIG update href config in navigation state" time="0.004">
    </testcase>
    <testcase classname="Navigation reducer SET_CURRENT_PREPEND_PATH update href config in navigation state" name="Navigation reducer SET_CURRENT_PREPEND_PATH update href config in navigation state" time="0.003">
    </testcase>
    <testcase classname="Navigation reducer APPLICATION_SCOPE_HAS_CHANGED reset the tabs to their initial values" name="Navigation reducer APPLICATION_SCOPE_HAS_CHANGED reset the tabs to their initial values" time="0.016">
    </testcase>
    <testcase classname="Navigation reducer SET_CLOSING_TAB_HANDLER_ACTIONS reset the tabs to their initial values" name="Navigation reducer SET_CLOSING_TAB_HANDLER_ACTIONS reset the tabs to their initial values" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="Timeline" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:05" time="1.565" tests="3">
    <testcase classname="Timeline Renders Timeline without items" name="Timeline Renders Timeline without items" time="0.011">
    </testcase>
    <testcase classname="Timeline Renders Timeline with one item" name="Timeline Renders Timeline with one item" time="0.042">
    </testcase>
    <testcase classname="Timeline Renders Timeline with items" name="Timeline Renders Timeline with items" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="ToastList" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:05" time="1.492" tests="9">
    <testcase classname="ToastList full render renders in a portal" name="ToastList full render renders in a portal" time="0.069">
    </testcase>
    <testcase classname="Toast shows a message" name="Toast shows a message" time="0.035">
    </testcase>
    <testcase classname="Toast shows a translated message" name="Toast shows a translated message" time="0.023">
    </testcase>
    <testcase classname="Toast shows an icon" name="Toast shows an icon" time="0.024">
    </testcase>
    <testcase classname="Toast shows a close icon if a close function is given" name="Toast shows a close icon if a close function is given" time="0.036">
    </testcase>
    <testcase classname="Toast with types renders a default type" name="Toast with types renders a default type" time="0.03">
    </testcase>
    <testcase classname="Toast with types renders a set type" name="Toast with types renders a set type" time="0.028">
    </testcase>
    <testcase classname="Toast with types darkens close icon background on hover" name="Toast with types darkens close icon background on hover" time="0.004">
    </testcase>
    <testcase classname="Toast with types darkens close icon background on hover with set type" name="Toast with types darkens close icon background on hover with set type" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="locale reducer factory" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:06" time="1.21" tests="9">
    <testcase classname="locale reducer factory creates a well-behaved reducer" name="locale reducer factory creates a well-behaved reducer" time="0.007">
    </testcase>
    <testcase classname="locale reducer factory falls back to default value after when creating the reducer" name="locale reducer factory falls back to default value after when creating the reducer" time="0.002">
    </testcase>
    <testcase classname="locale reducer factory falls back to default value after when creating the reducer with undefined cultureIso" name="locale reducer factory falls back to default value after when creating the reducer with undefined cultureIso" time="0.001">
    </testcase>
    <testcase classname="locale reducer factory created reducer reacts to locale change by updating to the requested locale" name="locale reducer factory created reducer reacts to locale change by updating to the requested locale" time="0.006">
    </testcase>
    <testcase classname="locale reducer factory created reducer reacts to locale change by updating to the requested locale with null" name="locale reducer factory created reducer reacts to locale change by updating to the requested locale with null" time="0.002">
    </testcase>
    <testcase classname="locale reducer factory created reducer reacts to locale change by updating to the requested locale with unqualified culture" name="locale reducer factory created reducer reacts to locale change by updating to the requested locale with unqualified culture" time="0.002">
    </testcase>
    <testcase classname="locale reducer factory created reducer reacts to locale change by updating to the requested locale with a fallback to similar culture" name="locale reducer factory created reducer reacts to locale change by updating to the requested locale with a fallback to similar culture" time="0.002">
    </testcase>
    <testcase classname="locale reducer factory created reducer does not update the locale if the requested language is not supported" name="locale reducer factory created reducer does not update the locale if the requested language is not supported" time="0.002">
    </testcase>
    <testcase classname="locale reducer factory created reducer adds cultures fetched from API" name="locale reducer factory created reducer adds cultures fetched from API" time="0.021">
    </testcase>
  </testsuite>
  <testsuite name="Row" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:06" time="1.516" tests="10">
    <testcase classname="Row it renders a data cell for each column definition" name="Row it renders a data cell for each column definition" time="0.088">
    </testcase>
    <testcase classname="Row wraps row onClick handler to add rowId to event target, and not to fire if target is form element" name="Row wraps row onClick handler to add rowId to event target, and not to fire if target is form element" time="0.1">
    </testcase>
    <testcase classname="TableRow renders with a hover transition" name="TableRow renders with a hover transition" time="0.007">
    </testcase>
    <testcase classname="TableRow renders a specific background color when given" name="TableRow renders a specific background color when given" time="0.006">
    </testcase>
    <testcase classname="TableRow renders no transition if given a bgColor prop" name="TableRow renders no transition if given a bgColor prop" time="0.009">
    </testcase>
    <testcase classname="TableRow sets cursor type if given click handler" name="TableRow sets cursor type if given click handler" time="0.005">
    </testcase>
    <testcase classname="stringifyFieldName does nothing to a string" name="stringifyFieldName does nothing to a string" time="0.001">
    </testcase>
    <testcase classname="stringifyFieldName converts an array to a string" name="stringifyFieldName converts an array to a string" time="0.001">
    </testcase>
    <testcase classname="stringifyFieldName handles arrays with non-string types" name="stringifyFieldName handles arrays with non-string types" time="0.001">
    </testcase>
    <testcase classname="stringifyFieldName returns undefined if given undefined" name="stringifyFieldName returns undefined if given undefined" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="FormButton" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:06" time="1.393" tests="3">
    <testcase classname="FormButton renders a button showing an icon" name="FormButton renders a button showing an icon" time="0.047">
    </testcase>
    <testcase classname="FormButton renders a button showing a text" name="FormButton renders a button showing a text" time="0.044">
    </testcase>
    <testcase classname="FormButton renders a button showing both an icon and a text" name="FormButton renders a button showing both an icon and a text" time="0.026">
    </testcase>
  </testsuite>
  <testsuite name="useTableSelection" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:06" time="1.257" tests="9">
    <testcase classname="useTableSelection selection handlers initialize correctly" name="useTableSelection selection handlers initialize correctly" time="0.028">
    </testcase>
    <testcase classname="useTableSelection selection handlers works successfully" name="useTableSelection selection handlers works successfully" time="0.019">
    </testcase>
    <testcase classname="useTableSelection selection handlers works successfully when all is selected one by one" name="useTableSelection selection handlers works successfully when all is selected one by one" time="0.022">
    </testcase>
    <testcase classname="useTableSelection selection handlers works successfully when unselecting some" name="useTableSelection selection handlers works successfully when unselecting some" time="0.032">
    </testcase>
    <testcase classname="useTableSelection selection handlers works successfully when unselecting all" name="useTableSelection selection handlers works successfully when unselecting all" time="0.026">
    </testcase>
    <testcase classname="useTableSelection selection handlers works successfully when selecting all" name="useTableSelection selection handlers works successfully when selecting all" time="0.015">
    </testcase>
    <testcase classname="useTableSelection selection handlers initialize correctly with provided selected rows" name="useTableSelection selection handlers initialize correctly with provided selected rows" time="0.014">
    </testcase>
    <testcase classname="useTableSelection selection handlers works successfully with provided selected rows" name="useTableSelection selection handlers works successfully with provided selected rows" time="0.016">
    </testcase>
    <testcase classname="useTableSelection Ensure custom selection handlers is invoked correctly" name="useTableSelection Ensure custom selection handlers is invoked correctly" time="0.027">
    </testcase>
  </testsuite>
  <testsuite name="Switch" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:06" time="1.474" tests="11">
    <testcase classname="Switch renders a switch in the on position" name="Switch renders a switch in the on position" time="0.04">
    </testcase>
    <testcase classname="Switch renders a switch in the off position" name="Switch renders a switch in the off position" time="0.03">
    </testcase>
    <testcase classname="Switch renders captions on the switch" name="Switch renders captions on the switch" time="0.099">
    </testcase>
    <testcase classname="Switch sets onChange handler on the checkbox" name="Switch sets onChange handler on the checkbox" time="0.016">
    </testcase>
    <testcase classname="Switch with id handling passes through a given id" name="Switch with id handling passes through a given id" time="0.006">
    </testcase>
    <testcase classname="Switch with id handling sets an id if none given" name="Switch with id handling sets an id if none given" time="0.006">
    </testcase>
    <testcase classname="Wrapper sets active colors when on" name="Wrapper sets active colors when on" time="0.005">
    </testcase>
    <testcase classname="Wrapper sets background color according to theme when on" name="Wrapper sets background color according to theme when on" time="0.008">
    </testcase>
    <testcase classname="Wrapper sets custom background color when on" name="Wrapper sets custom background color when on" time="0.008">
    </testcase>
    <testcase classname="Wrapper sets inactive colors when off" name="Wrapper sets inactive colors when off" time="0.004">
    </testcase>
    <testcase classname="Wrapper sets custom background color when off" name="Wrapper sets custom background color when off" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="NotificationContext" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:06" time="1.288" tests="1">
    <testcase classname="NotificationContext Wraps up passed children and adds Notifications to the DOM" name="NotificationContext Wraps up passed children and adds Notifications to the DOM" time="0.031">
    </testcase>
  </testsuite>
  <testsuite name="View state reducer" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:07" time="1.348" tests="19">
    <testcase classname="View state reducer behaves as a reducer should" name="View state reducer behaves as a reducer should" time="0.005">
    </testcase>
    <testcase classname="View state reducer sets a value, overwriting all fields" name="View state reducer sets a value, overwriting all fields" time="0.003">
    </testcase>
    <testcase classname="View state reducer sets a single field" name="View state reducer sets a single field" time="0.002">
    </testcase>
    <testcase classname="View state reducer creates missing states" name="View state reducer creates missing states" time="0.001">
    </testcase>
    <testcase classname="View state reducer Sets edit field inside model correctly" name="View state reducer Sets edit field inside model correctly" time="0.001">
    </testcase>
    <testcase classname="View state reducer Sets full entity edit model correctly" name="View state reducer Sets full entity edit model correctly" time="0.002">
    </testcase>
    <testcase classname="View state reducer Removes edit node correctly" name="View state reducer Removes edit node correctly" time="0.001">
    </testcase>
    <testcase classname="View state reducer Removes edit model correctly when model has more than one property" name="View state reducer Removes edit model correctly when model has more than one property" time="0.001">
    </testcase>
    <testcase classname="View state reducer Removes edit model correctly when model has one property" name="View state reducer Removes edit model correctly when model has one property" time="0.002">
    </testcase>
    <testcase classname="View state reducer Sets field error inside model correctly" name="View state reducer Sets field error inside model correctly" time="0.001">
    </testcase>
    <testcase classname="View state reducer Remove field error inside model correctly" name="View state reducer Remove field error inside model correctly" time="0.001">
    </testcase>
    <testcase classname="View state reducer Remove field error inside model correctly" name="View state reducer Remove field error inside model correctly" time="0.002">
    </testcase>
    <testcase classname="View state reducer Sets all errors inside model correctly" name="View state reducer Sets all errors inside model correctly" time="0.012">
    </testcase>
    <testcase classname="View state reducer Do not set error if keys is absent" name="View state reducer Do not set error if keys is absent" time="0.001">
    </testcase>
    <testcase classname="View state reducer Reset the edit state when the application scope changes" name="View state reducer Reset the edit state when the application scope changes" time="0.004">
    </testcase>
    <testcase classname="View state reducer Removes edit model field correctly" name="View state reducer Removes edit model field correctly" time="0.004">
    </testcase>
    <testcase classname="View state reducer Removes edit all model fields correctly" name="View state reducer Removes edit all model fields correctly" time="0.002">
    </testcase>
    <testcase classname="View state reducer Removes edit model field correctly when prop to delete is inside value" name="View state reducer Removes edit model field correctly when prop to delete is inside value" time="0.002">
    </testcase>
    <testcase classname="View state reducer Removes edit model field correctly when prop to delete is inside value and value is an array" name="View state reducer Removes edit model field correctly when prop to delete is inside value and value is an array" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="Field" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:07" time="1.676" tests="9">
    <testcase classname="Field renders a field with a label" name="Field renders a field with a label" time="0.043">
    </testcase>
    <testcase classname="Field renders a required field with a label" name="Field renders a required field with a label" time="0.027">
    </testcase>
    <testcase classname="Field renders a missing required field with a label" name="Field renders a missing required field with a label" time="0.029">
    </testcase>
    <testcase classname="Field renders a field with no label" name="Field renders a field with no label" time="0.016">
    </testcase>
    <testcase classname="Field renders only its label when flagged" name="Field renders only its label when flagged" time="0.029">
    </testcase>
    <testcase classname="Field renders a field with a centered label" name="Field renders a field with a centered label" time="0.026">
    </testcase>
    <testcase classname="Label renders a mark on required labels" name="Label renders a mark on required labels" time="0.006">
    </testcase>
    <testcase classname="Label when not flagged renders a label with bottom margin" name="Label when not flagged renders a label with bottom margin" time="0.023">
    </testcase>
    <testcase classname="Label when flagged renders a label without margin" name="Label when flagged renders a label without margin" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="getCountries" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:07" time="1.058" tests="1">
    <testcase classname="getCountries creates a RSAA to get countries" name="getCountries creates a RSAA to get countries" time="0.021">
    </testcase>
  </testsuite>
  <testsuite name="applications" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:07" time="1.136" tests="2">
    <testcase classname="applications behaves as a reducer should" name="applications behaves as a reducer should" time="0.004">
    </testcase>
    <testcase classname="applications saves a list of applications" name="applications saves a list of applications" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="CheckboxInput" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:07" time="1.316" tests="4">
    <testcase classname="CheckboxInput renders a checkbox input with change handler" name="CheckboxInput renders a checkbox input with change handler" time="0.048">
    </testcase>
    <testcase classname="SwitchInput renders a switch input with change handler" name="SwitchInput renders a switch input with change handler" time="0.029">
    </testcase>
    <testcase classname="getCheckUpdater creates a handler for an event and calls update with the &apos;checked&apos; attribute of the target" name="getCheckUpdater creates a handler for an event and calls update with the &apos;checked&apos; attribute of the target" time="0.007">
    </testcase>
    <testcase classname="getCheckUpdater is memoized" name="getCheckUpdater is memoized" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="TabLabel" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:08" time="1.435" tests="1">
    <testcase classname="TabLabel Renders TabLabel correctly" name="TabLabel Renders TabLabel correctly" time="0.047">
    </testcase>
  </testsuite>
  <testsuite name="withDeferredTooltip" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:08" time="1.368" tests="8">
    <testcase classname="withDeferredTooltip Renders passed component if mouse enter event wasn&apos;t triggered" name="withDeferredTooltip Renders passed component if mouse enter event wasn&apos;t triggered" time="0.013">
    </testcase>
    <testcase classname="withDeferredTooltip Wraps passed component in Mui tooltip if mouse enter event was triggered" name="withDeferredTooltip Wraps passed component in Mui tooltip if mouse enter event was triggered" time="0.017">
    </testcase>
    <testcase classname="withDeferredTooltip Does not wrap passed component in Mui tooltip if scrollWidth is same as offsetWidth" name="withDeferredTooltip Does not wrap passed component in Mui tooltip if scrollWidth is same as offsetWidth" time="0.009">
    </testcase>
    <testcase classname="withDeferredTooltip Displays passed title in tooltip" name="withDeferredTooltip Displays passed title in tooltip" time="0.008">
    </testcase>
    <testcase classname="withDeferredTooltip Always displayes passed title in tooltip if always display is set" name="withDeferredTooltip Always displayes passed title in tooltip if always display is set" time="0.007">
    </testcase>
    <testcase classname="withDeferredTooltip Retrieves passed component without any changes if title is undefined" name="withDeferredTooltip Retrieves passed component without any changes if title is undefined" time="0.016">
    </testcase>
    <testcase classname="withDeferredTooltip Retrieves passed component without any changes if title is whitespace string" name="withDeferredTooltip Retrieves passed component without any changes if title is whitespace string" time="0.008">
    </testcase>
    <testcase classname="withDeferredTooltip Retrieves passed component without any changes if title is not react component" name="withDeferredTooltip Retrieves passed component without any changes if title is not react component" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="Switch Props" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:08" time="1.14" tests="7">
    <testcase classname="Switch Props Contains necessary props keys" name="Switch Props Contains necessary props keys" time="0.002">
    </testcase>
    <testcase classname="Switch Props Puts keys in component props map" name="Switch Props Puts keys in component props map" time="0.004">
    </testcase>
    <testcase classname="isSwitchProps Returns true if passed value is null" name="isSwitchProps Returns true if passed value is null" time="0.001">
    </testcase>
    <testcase classname="isSwitchProps Returns false if passed value is not object" name="isSwitchProps Returns false if passed value is not object" time="0.001">
    </testcase>
    <testcase classname="isSwitchProps Returns true if passed value type is SwitchProps" name="isSwitchProps Returns true if passed value type is SwitchProps" time="0">
    </testcase>
    <testcase classname="isSwitchProps Returns true if passed value has property _isSwitchProps and it&apos;s true" name="isSwitchProps Returns true if passed value has property _isSwitchProps and it&apos;s true" time="0.001">
    </testcase>
    <testcase classname="isSwitchProps Returns false if passed value has property _isSwitchProps and it&apos;s false or missing" name="isSwitchProps Returns false if passed value has property _isSwitchProps and it&apos;s false or missing" time="0">
    </testcase>
  </testsuite>
  <testsuite name="ReadOnly" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:08" time="1.219" tests="2">
    <testcase classname="ReadOnly renders a read-only value in a form" name="ReadOnly renders a read-only value in a form" time="0.048">
    </testcase>
    <testcase classname="LineLabel renders a text in large font" name="LineLabel renders a text in large font" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="ApplicationSelector" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:08" time="1.531" tests="4">
    <testcase classname="ApplicationSelector renders a modal application selector dialog" name="ApplicationSelector renders a modal application selector dialog" time="0.202">
    </testcase>
    <testcase classname="ApplicationSelector getAnchor takes props and returns a header render function" name="ApplicationSelector getAnchor takes props and returns a header render function" time="0.01">
    </testcase>
    <testcase classname="ApplicationSelector getAnchor handles a missing app list" name="ApplicationSelector getAnchor handles a missing app list" time="0.007">
    </testcase>
    <testcase classname="ApplicationSelector getDialog takes props and returns a header render function" name="ApplicationSelector getDialog takes props and returns a header render function" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="Placeholder" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:08" time="1.579" tests="9">
    <testcase classname="Placeholder Renders placeholder when cellList parameter is missed" name="Placeholder Renders placeholder when cellList parameter is missed" time="0.068">
    </testcase>
    <testcase classname="Placeholder Renders placeholder when icon param is missed" name="Placeholder Renders placeholder when icon param is missed" time="0.008">
    </testcase>
    <testcase classname="Placeholder Renders placeholder when title param is missed" name="Placeholder Renders placeholder when title param is missed" time="0.009">
    </testcase>
    <testcase classname="Placeholder Renders placeholder when subtitle param is missed" name="Placeholder Renders placeholder when subtitle param is missed" time="0.007">
    </testcase>
    <testcase classname="Placeholder Renders placeholder when cellList has value " name="Placeholder Renders placeholder when cellList has value " time="0.056">
    </testcase>
    <testcase classname="Placeholder Renders placeholder when cellList has value and there is no chip" name="Placeholder Renders placeholder when cellList has value and there is no chip" time="0.007">
    </testcase>
    <testcase classname="Placeholder Renders placeholder when cellList has value with no text" name="Placeholder Renders placeholder when cellList has value with no text" time="0.008">
    </testcase>
    <testcase classname="Placeholder Renders placeholder when cellList has just value with radio" name="Placeholder Renders placeholder when cellList has just value with radio" time="0.039">
    </testcase>
    <testcase classname="Placeholder Renders placeholder with all parametres" name="Placeholder Renders placeholder with all parametres" time="0.042">
    </testcase>
  </testsuite>
  <testsuite name="withLocaleSwitch" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:09" time="1.316" tests="1">
    <testcase classname="withLocaleSwitch adds an onClick handler that will dispatch a locale change based on locale prop" name="withLocaleSwitch adds an onClick handler that will dispatch a locale change based on locale prop" time="0.034">
    </testcase>
  </testsuite>
  <testsuite name="validationRules" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:09" time="1.593" tests="36">
    <testcase classname="validationRules validates fieldIsRequired rule correctly when its value is empty" name="validationRules validates fieldIsRequired rule correctly when its value is empty" time="0.002">
    </testcase>
    <testcase classname="validationRules validates fieldIsRequired rule correctly when its value is not empty" name="validationRules validates fieldIsRequired rule correctly when its value is not empty" time="0.001">
    </testcase>
    <testcase classname="validationRules validates fieldIsRequired rule correctly when its value is Attribute and not empty" name="validationRules validates fieldIsRequired rule correctly when its value is Attribute and not empty" time="0">
    </testcase>
    <testcase classname="validationRules validates fieldMustBeValidEmail rule correctly when its value is wrong email" name="validationRules validates fieldMustBeValidEmail rule correctly when its value is wrong email" time="0.002">
    </testcase>
    <testcase classname="validationRules validates fieldMustBeValidEmail rule correctly when its value is correct email" name="validationRules validates fieldMustBeValidEmail rule correctly when its value is correct email" time="0">
    </testcase>
    <testcase classname="validationRules validates fieldMustBeValidEmail rule correctly when its value is empty" name="validationRules validates fieldMustBeValidEmail rule correctly when its value is empty" time="0.001">
    </testcase>
    <testcase classname="validationRules validates fieldMustBeValidPhoneNumber rule correctly when its value is +001 111 222 3333" name="validationRules validates fieldMustBeValidPhoneNumber rule correctly when its value is +001 111 222 3333" time="0.001">
    </testcase>
    <testcase classname="validationRules validates fieldMustBeValidPhoneNumber rule correctly when its value is +0011112223333" name="validationRules validates fieldMustBeValidPhoneNumber rule correctly when its value is +0011112223333" time="0">
    </testcase>
    <testcase classname="validationRules validates fieldMustBeValidPhoneNumber rule correctly when its value is +001-111-222-3333" name="validationRules validates fieldMustBeValidPhoneNumber rule correctly when its value is +001-111-222-3333" time="0">
    </testcase>
    <testcase classname="validationRules validates fieldMustBeValidPhoneNumber rule correctly when its value is 111 222 3333" name="validationRules validates fieldMustBeValidPhoneNumber rule correctly when its value is 111 222 3333" time="0.001">
    </testcase>
    <testcase classname="validationRules validates fieldMustBeValidPhoneNumber rule correctly when its value is 1112223333" name="validationRules validates fieldMustBeValidPhoneNumber rule correctly when its value is 1112223333" time="0">
    </testcase>
    <testcase classname="validationRules validates fieldMustBeValidPhoneNumber rule correctly when its value is 111-222-3333" name="validationRules validates fieldMustBeValidPhoneNumber rule correctly when its value is 111-222-3333" time="0.001">
    </testcase>
    <testcase classname="validationRules validates fieldMustBeValidPhoneNumber rule correctly when its value is undefined" name="validationRules validates fieldMustBeValidPhoneNumber rule correctly when its value is undefined" time="0">
    </testcase>
    <testcase classname="validationRules validates fieldMustBeValidPhoneNumber rule correctly when its value is +OO1-111-222-3333" name="validationRules validates fieldMustBeValidPhoneNumber rule correctly when its value is +OO1-111-222-3333" time="0">
    </testcase>
    <testcase classname="validationRules validates fieldMustBeValidPhoneNumber rule correctly when its value is OO1-111-222-3333" name="validationRules validates fieldMustBeValidPhoneNumber rule correctly when its value is OO1-111-222-3333" time="0.001">
    </testcase>
    <testcase classname="validationRules validates fieldMustBeValidPhoneNumber rule correctly when its value is OO11112223333" name="validationRules validates fieldMustBeValidPhoneNumber rule correctly when its value is OO11112223333" time="0">
    </testcase>
    <testcase classname="validationRules validates fieldMustBeValidPhoneNumber rule correctly when its value is abracadabra" name="validationRules validates fieldMustBeValidPhoneNumber rule correctly when its value is abracadabra" time="0.001">
    </testcase>
    <testcase classname="validationRules validates fieldMustBeValidPhoneNumber rule correctly when its value is 111 aaa 3333" name="validationRules validates fieldMustBeValidPhoneNumber rule correctly when its value is 111 aaa 3333" time="0">
    </testcase>
    <testcase classname="validationRules validates fieldMustBeValidPhoneNumber rule correctly when its value is 111 AAA 3333" name="validationRules validates fieldMustBeValidPhoneNumber rule correctly when its value is 111 AAA 3333" time="0">
    </testcase>
    <testcase classname="showError Retrieves false if field is null" name="showError Retrieves false if field is null" time="0">
    </testcase>
    <testcase classname="showError Retrieves true if field has error" name="showError Retrieves true if field has error" time="0.001">
    </testcase>
    <testcase classname="showError Retrieves false if field has no error" name="showError Retrieves false if field has no error" time="0">
    </testcase>
    <testcase classname="hasValidationErrors Retrieves true if any field has error" name="hasValidationErrors Retrieves true if any field has error" time="0.002">
    </testcase>
    <testcase classname="hasValidationErrors Retrieves false if none of fields has an error" name="hasValidationErrors Retrieves false if none of fields has an error" time="0">
    </testcase>
    <testcase classname="hasValidationErrors Retrieves true if model is empty" name="hasValidationErrors Retrieves true if model is empty" time="0.001">
    </testcase>
    <testcase classname="hasValidationErrors Retrieves true if model is not defined" name="hasValidationErrors Retrieves true if model is not defined" time="0">
    </testcase>
    <testcase classname="hasValidationErrors Retrieves false if model with specified validation map rules is valid" name="hasValidationErrors Retrieves false if model with specified validation map rules is valid" time="0.002">
    </testcase>
    <testcase classname="hasValidationErrors Retrieves true if model with specified validation map rules is not valid for one of nested paths" name="hasValidationErrors Retrieves true if model with specified validation map rules is not valid for one of nested paths" time="0.002">
    </testcase>
    <testcase classname="hasValidationErrors Retrieves true if model with specified validation map rules is not valid" name="hasValidationErrors Retrieves true if model with specified validation map rules is not valid" time="0.001">
    </testcase>
    <testcase classname="hasValidationErrors Retrieves true if model with specified validation map rules is not valid and " name="hasValidationErrors Retrieves true if model with specified validation map rules is not valid and " time="0.001">
    </testcase>
    <testcase classname="hasValidationErrors Retrieves false if isValid property is not undefined" name="hasValidationErrors Retrieves false if isValid property is not undefined" time="0">
    </testcase>
    <testcase classname="hasMultipleFieldValidationErrors Retrieves false if model is empty" name="hasMultipleFieldValidationErrors Retrieves false if model is empty" time="0.001">
    </testcase>
    <testcase classname="hasMultipleFieldValidationErrors Retrieves false if model is not defined" name="hasMultipleFieldValidationErrors Retrieves false if model is not defined" time="0.001">
    </testcase>
    <testcase classname="hasMultipleFieldValidationErrors Retrieves false if model is null" name="hasMultipleFieldValidationErrors Retrieves false if model is null" time="0">
    </testcase>
    <testcase classname="hasMultipleFieldValidationErrors Retrieves false if model is valid" name="hasMultipleFieldValidationErrors Retrieves false if model is valid" time="0">
    </testcase>
    <testcase classname="hasMultipleFieldValidationErrors Retrieves true if model is invalid" name="hasMultipleFieldValidationErrors Retrieves true if model is invalid" time="0">
    </testcase>
  </testsuite>
  <testsuite name="HeadRow" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:09" time="1.507" tests="1">
    <testcase classname="HeadRow renders a row of headers, one for each defined column" name="HeadRow renders a row of headers, one for each defined column" time="0.066">
    </testcase>
  </testsuite>
  <testsuite name="Badge" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:10" time="1.251" tests="3">
    <testcase classname="Badge Renders Badge when children was passed" name="Badge Renders Badge when children was passed" time="0.053">
    </testcase>
    <testcase classname="Badge Renders Badge when children was not passed" name="Badge Renders Badge when children was not passed" time="0.005">
    </testcase>
    <testcase classname="Badge Renders Badge when classprop is not null" name="Badge Renders Badge when classprop is not null" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="Discounted Price" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:10" time="1.387" tests="2">
    <testcase classname="Discounted Price Renders Discounted Price correctly when current not equals to regular" name="Discounted Price Renders Discounted Price correctly when current not equals to regular" time="0.077">
    </testcase>
    <testcase classname="Discounted Price Renders Discounted Price correctly when current equals to regular" name="Discounted Price Renders Discounted Price correctly when current equals to regular" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="usePreviousModified" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:10" time="1.172" tests="6">
    <testcase classname="usePreviousModified display value as modified with default predicate" name="usePreviousModified display value as modified with default predicate" time="0.034">
    </testcase>
    <testcase classname="usePreviousModified display value as not modified default predicate" name="usePreviousModified display value as not modified default predicate" time="0.01">
    </testcase>
    <testcase classname="usePreviousModified display value as modified with custom predicate" name="usePreviousModified display value as modified with custom predicate" time="0.011">
    </testcase>
    <testcase classname="usePreviousModified display value as not modified with custom predicate" name="usePreviousModified display value as not modified with custom predicate" time="0.013">
    </testcase>
    <testcase classname="usePreviousModified execute effect action when defined and predicate satisfied" name="usePreviousModified execute effect action when defined and predicate satisfied" time="0.01">
    </testcase>
    <testcase classname="usePreviousModified do not execute effect action when defined and predicate not satisfied" name="usePreviousModified do not execute effect action when defined and predicate not satisfied" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="PopperedIcon" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:10" time="1.259" tests="1">
    <testcase classname="PopperedIcon Passes parameters in HOC correctly" name="PopperedIcon Passes parameters in HOC correctly" time="0.069">
    </testcase>
  </testsuite>
  <testsuite name="&lt;propertyHelper.getPropertyOrDefault&gt; for object" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:10" time="1.139" tests="28">
    <testcase classname="&lt;propertyHelper.getPropertyOrDefault&gt; for object get property value" name="&lt;propertyHelper.getPropertyOrDefault&gt; for object get property value" time="0.002">
    </testcase>
    <testcase classname="&lt;propertyHelper.getPropertyOrDefault&gt; for object get default property value" name="&lt;propertyHelper.getPropertyOrDefault&gt; for object get default property value" time="0.001">
    </testcase>
    <testcase classname="&lt;propertyHelper.getPropertyOrDefault&gt; for object get default property value when obj is undefined" name="&lt;propertyHelper.getPropertyOrDefault&gt; for object get default property value when obj is undefined" time="0.001">
    </testcase>
    <testcase classname="&lt;propertyHelper.getPropertyOrDefault&gt; for object get default property value when obj is null" name="&lt;propertyHelper.getPropertyOrDefault&gt; for object get default property value when obj is null" time="0">
    </testcase>
    <testcase classname="&lt;propertyHelper.getPropertyOrDefault&gt; for object get property value ignoring case" name="&lt;propertyHelper.getPropertyOrDefault&gt; for object get property value ignoring case" time="0.001">
    </testcase>
    <testcase classname="&lt;propertyHelper.getPropertyOrDefault&gt; for object get property default value ignoring case" name="&lt;propertyHelper.getPropertyOrDefault&gt; for object get property default value ignoring case" time="0.001">
    </testcase>
    <testcase classname="&lt;propertyHelper.getPropertyOrDefault&gt; for object get property value starting with" name="&lt;propertyHelper.getPropertyOrDefault&gt; for object get property value starting with" time="0">
    </testcase>
    <testcase classname="&lt;propertyHelper.getPropertyOrDefault&gt; for object get property default value starting with" name="&lt;propertyHelper.getPropertyOrDefault&gt; for object get property default value starting with" time="0.001">
    </testcase>
    <testcase classname="&lt;propertyHelper.getPropertyOrDefault&gt; for object get property value starting with" name="&lt;propertyHelper.getPropertyOrDefault&gt; for object get property value starting with" time="0">
    </testcase>
    <testcase classname="&lt;propertyHelper.getPropertyOrDefault&gt; for object get property default value starting with" name="&lt;propertyHelper.getPropertyOrDefault&gt; for object get property default value starting with" time="0.001">
    </testcase>
    <testcase classname="&lt;propertyHelper.getPropertyOrDefault&gt; for Map get property value" name="&lt;propertyHelper.getPropertyOrDefault&gt; for Map get property value" time="0.001">
    </testcase>
    <testcase classname="&lt;propertyHelper.getPropertyOrDefault&gt; for Map get default property value" name="&lt;propertyHelper.getPropertyOrDefault&gt; for Map get default property value" time="0">
    </testcase>
    <testcase classname="&lt;propertyHelper.getPropertyOrDefault&gt; for Map get property value ignoring case" name="&lt;propertyHelper.getPropertyOrDefault&gt; for Map get property value ignoring case" time="0.001">
    </testcase>
    <testcase classname="&lt;propertyHelper.getPropertyOrDefault&gt; for Map get property default value ignoring case" name="&lt;propertyHelper.getPropertyOrDefault&gt; for Map get property default value ignoring case" time="0.001">
    </testcase>
    <testcase classname="&lt;propertyHelper.getPropertyOrDefault&gt; for Map get property value starting with" name="&lt;propertyHelper.getPropertyOrDefault&gt; for Map get property value starting with" time="0">
    </testcase>
    <testcase classname="&lt;propertyHelper.getPropertyOrDefault&gt; for Map get property default value starting with" name="&lt;propertyHelper.getPropertyOrDefault&gt; for Map get property default value starting with" time="0.001">
    </testcase>
    <testcase classname="isObjectContainsPropertyWithValue Returns true if object contains specified property with specified value" name="isObjectContainsPropertyWithValue Returns true if object contains specified property with specified value" time="0.001">
    </testcase>
    <testcase classname="isObjectContainsPropertyWithValue Returns false if object does not contain specified property with specified value" name="isObjectContainsPropertyWithValue Returns false if object does not contain specified property with specified value" time="0">
    </testcase>
    <testcase classname="isObjectContainsPropertyWithValue Returns true if object contains specified property with boolean false value" name="isObjectContainsPropertyWithValue Returns true if object contains specified property with boolean false value" time="0.001">
    </testcase>
    <testcase classname="isObjectContainsPropertyWithValue Returns false if object doesn&apos;t contain specified property with boolean False value" name="isObjectContainsPropertyWithValue Returns false if object doesn&apos;t contain specified property with boolean False value" time="0.013">
    </testcase>
    <testcase classname="isObjectContainsPropertyWithValue Returns true if object contains specified property with boolean True value" name="isObjectContainsPropertyWithValue Returns true if object contains specified property with boolean True value" time="0">
    </testcase>
    <testcase classname="isObjectContainsPropertyWithValue Does not fail if some property has Null value" name="isObjectContainsPropertyWithValue Does not fail if some property has Null value" time="0.001">
    </testcase>
    <testcase classname="isObjectContainsPropertyWithAnyValue Returns true if object contains specified property with any value" name="isObjectContainsPropertyWithAnyValue Returns true if object contains specified property with any value" time="0.001">
    </testcase>
    <testcase classname="isObjectContainsPropertyWithAnyValue Returns false if object does not contain specified property with any value" name="isObjectContainsPropertyWithAnyValue Returns false if object does not contain specified property with any value" time="0">
    </testcase>
    <testcase classname="isObjectContainsPropertyWithAnyValue Does not fail if some property has Null value" name="isObjectContainsPropertyWithAnyValue Does not fail if some property has Null value" time="0.002">
    </testcase>
    <testcase classname="isObjectContainsPropertyWithAnyValue Return true of property has Null value" name="isObjectContainsPropertyWithAnyValue Return true of property has Null value" time="0.001">
    </testcase>
    <testcase classname="isObjectContainsPropertyWithAnyValue Return true of property has False value" name="isObjectContainsPropertyWithAnyValue Return true of property has False value" time="0">
    </testcase>
    <testcase classname="isObjectContainsPropertyWithAnyValue Return true of property has True value" name="isObjectContainsPropertyWithAnyValue Return true of property has True value" time="0">
    </testcase>
  </testsuite>
  <testsuite name="withClickOutside" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:10" time="1.285" tests="7">
    <testcase classname="withClickOutside acts as a HOC" name="withClickOutside acts as a HOC" time="0.019">
    </testcase>
    <testcase classname="withClickOutside click handling handles clicks outside the component" name="withClickOutside click handling handles clicks outside the component" time="0.017">
    </testcase>
    <testcase classname="withClickOutside click handling does not handle clicks inside the component" name="withClickOutside click handling does not handle clicks inside the component" time="0.01">
    </testcase>
    <testcase classname="withClickOutside click handling changes handlers on re-render" name="withClickOutside click handling changes handlers on re-render" time="0.008">
    </testcase>
    <testcase classname="withClickOutside click handling changes DOM nodes on re-render" name="withClickOutside click handling changes DOM nodes on re-render" time="0.021">
    </testcase>
    <testcase classname="withClickOutside click handling does not handle clicks on elements nested within the outer element" name="withClickOutside click handling does not handle clicks on elements nested within the outer element" time="0.007">
    </testcase>
    <testcase classname="withClickOutside event phase can intercept and stop clicks outside from hitting their targets" name="withClickOutside event phase can intercept and stop clicks outside from hitting their targets" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="isEntityUnderEditing" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:11" time="1.302" tests="25">
    <testcase classname="isEntityUnderEditing Retrieves true if specified entity is under editing" name="isEntityUnderEditing Retrieves true if specified entity is under editing" time="0.006">
    </testcase>
    <testcase classname="isEntityUnderEditing Retrieves false if specified entity is not under editing or not found" name="isEntityUnderEditing Retrieves false if specified entity is not under editing or not found" time="0.003">
    </testcase>
    <testcase classname="isEntityUnderEditing Retrieves false if edit is missing from the store" name="isEntityUnderEditing Retrieves false if edit is missing from the store" time="0.003">
    </testcase>
    <testcase classname="getModifiedSections Retrieves modified sections" name="getModifiedSections Retrieves modified sections" time="0.004">
    </testcase>
    <testcase classname="getModifiedSections Retrieves empty array if no sections found or no sections were modified" name="getModifiedSections Retrieves empty array if no sections found or no sections were modified" time="0.002">
    </testcase>
    <testcase classname="getModifiedSections Retrieves empty array if edit is missing from the store" name="getModifiedSections Retrieves empty array if edit is missing from the store" time="0.001">
    </testcase>
    <testcase classname="getSectionsWithErrors Retrieves sections with errors" name="getSectionsWithErrors Retrieves sections with errors" time="0.004">
    </testcase>
    <testcase classname="getSectionsWithErrors Retrieves empty array if no sections found or no sections were modified" name="getSectionsWithErrors Retrieves empty array if no sections found or no sections were modified" time="0.002">
    </testcase>
    <testcase classname="getSectionsWithErrors Retrieves empty array if edit is missing from the store" name="getSectionsWithErrors Retrieves empty array if edit is missing from the store" time="0.002">
    </testcase>
    <testcase classname="getInstanceKeysWithErrors Retrieves instance Keys with errors" name="getInstanceKeysWithErrors Retrieves instance Keys with errors" time="0.005">
    </testcase>
    <testcase classname="getInstanceKeysWithErrors Retrieves empty array if path doesn&apos;t exist errors" name="getInstanceKeysWithErrors Retrieves empty array if path doesn&apos;t exist errors" time="0.005">
    </testcase>
    <testcase classname="getModifiedModels Retrieves modified sections" name="getModifiedModels Retrieves modified sections" time="0.018">
    </testcase>
    <testcase classname="getModifiedModels Retrieves empty array if no sections found or no sections were modified" name="getModifiedModels Retrieves empty array if no sections found or no sections were modified" time="0.005">
    </testcase>
    <testcase classname="getModifiedModels Retrieves empty array if edit is missing from the store" name="getModifiedModels Retrieves empty array if edit is missing from the store" time="0.002">
    </testcase>
    <testcase classname="getModifiedModel Retrieves modified sections" name="getModifiedModel Retrieves modified sections" time="0.006">
    </testcase>
    <testcase classname="getModifiedModel Retrieves empty array if no sections found or no sections were modified" name="getModifiedModel Retrieves empty array if no sections found or no sections were modified" time="0.003">
    </testcase>
    <testcase classname="getModifiedModel Retrieves empty array if edit is missing from the store" name="getModifiedModel Retrieves empty array if edit is missing from the store" time="0.002">
    </testcase>
    <testcase classname="getModifiedTabs Retrieves modified tabs correctly when edit is not empty" name="getModifiedTabs Retrieves modified tabs correctly when edit is not empty" time="0.004">
    </testcase>
    <testcase classname="getModifiedTabs Retrieves empty array when edit is empty" name="getModifiedTabs Retrieves empty array when edit is empty" time="0.004">
    </testcase>
    <testcase classname="getModifiedTabs Add new entity id to tab params when parsed in URL" name="getModifiedTabs Add new entity id to tab params when parsed in URL" time="0.004">
    </testcase>
    <testcase classname="getTabsWithErrors Retrieves tabs with errors correctly when error is present in one section" name="getTabsWithErrors Retrieves tabs with errors correctly when error is present in one section" time="0.004">
    </testcase>
    <testcase classname="getTabsWithErrors Retrieves empty array when edit is empty" name="getTabsWithErrors Retrieves empty array when edit is empty" time="0.002">
    </testcase>
    <testcase classname="hasUnsavedDataSelector Returns false when no edit data is present" name="hasUnsavedDataSelector Returns false when no edit data is present" time="0.001">
    </testcase>
    <testcase classname="hasUnsavedDataSelector Returns false when there are no modified models" name="hasUnsavedDataSelector Returns false when there are no modified models" time="0.002">
    </testcase>
    <testcase classname="hasUnsavedDataSelector Returns true when a model is modified" name="hasUnsavedDataSelector Returns true when a model is modified" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="TooltippedIcon" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:11" time="1.38" tests="1">
    <testcase classname="TooltippedIcon props should be configured correctly" name="TooltippedIcon props should be configured correctly" time="0.085">
    </testcase>
  </testsuite>
  <testsuite name="Titled Paper" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:11" time="1.388" tests="1">
    <testcase classname="Titled Paper Renders titled paper with passed title and content" name="Titled Paper Renders titled paper with passed title and content" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="LoadingIcon" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:12" time="1.116" tests="2">
    <testcase classname="LoadingIcon shows a spinning load icon" name="LoadingIcon shows a spinning load icon" time="0.044">
    </testcase>
    <testcase classname="LoadingIcon gets icon from theme" name="LoadingIcon gets icon from theme" time="0.021">
    </testcase>
  </testsuite>
  <testsuite name="TooltippedTypography" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:11" time="1.527" tests="2">
    <testcase classname="TooltippedTypography should contain the forwarded ref in the child span" name="TooltippedTypography should contain the forwarded ref in the child span" time="0.102">
    </testcase>
    <testcase classname="TooltippedTypography Passes parameters in HOC correctly" name="TooltippedTypography Passes parameters in HOC correctly" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Combination" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:12" time="1.377" tests="3">
    <testcase classname="Combination renders a combining box around a list of fields" name="Combination renders a combining box around a list of fields" time="0.092">
    </testcase>
    <testcase classname="Combination handles missing props" name="Combination handles missing props" time="0.052">
    </testcase>
    <testcase classname="CombiningRow sets flex rules on its children to control their proportions" name="CombiningRow sets flex rules on its children to control their proportions" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="useLabelMessage" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:12" time="1.213" tests="10">
    <testcase classname="useLabelMessage handles message correctly" name="useLabelMessage handles message correctly" time="0.03">
    </testcase>
    <testcase classname="useLabelMessage handles message with values correctly" name="useLabelMessage handles message with values correctly" time="0.017">
    </testcase>
    <testcase classname="useLabelMessage handles message with wrong values" name="useLabelMessage handles message with wrong values" time="0.011">
    </testcase>
    <testcase classname="useLabelMessage handles message with missing values" name="useLabelMessage handles message with missing values" time="0.008">
    </testcase>
    <testcase classname="useLabelMessage handles message correctly with a custom builder" name="useLabelMessage handles message correctly with a custom builder" time="0.007">
    </testcase>
    <testcase classname="messageContainsValues validates messages without needed values" name="messageContainsValues validates messages without needed values" time="0.001">
    </testcase>
    <testcase classname="messageContainsValues invalidates messages missing values" name="messageContainsValues invalidates messages missing values" time="0.001">
    </testcase>
    <testcase classname="messageContainsValues invalidates messages missing some needed values" name="messageContainsValues invalidates messages missing some needed values" time="0.001">
    </testcase>
    <testcase classname="messageContainsValues invalidates messages with needed values set to null" name="messageContainsValues invalidates messages with needed values set to null" time="0.001">
    </testcase>
    <testcase classname="messageContainsValues validates messages containing all needed values" name="messageContainsValues validates messages containing all needed values" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Branch" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:12" time="1.141" tests="4">
    <testcase classname="Branch renders a &lt;ul&gt;" name="Branch renders a &lt;ul&gt;" time="0.016">
    </testcase>
    <testcase classname="Branch sets styling for showing a branch structure" name="Branch sets styling for showing a branch structure" time="0.006">
    </testcase>
    <testcase classname="Wrapper renders a &lt;ul&gt;" name="Wrapper renders a &lt;ul&gt;" time="0.006">
    </testcase>
    <testcase classname="Wrapper sets styling for showing the root of a tree structure" name="Wrapper sets styling for showing the root of a tree structure" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="useViewState" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:12" time="1.355" tests="5">
    <testcase classname="useViewState adds a value prop to an element based on its name prop" name="useViewState adds a value prop to an element based on its name prop" time="0.035">
    </testcase>
    <testcase classname="useViewState handles nonexistent state" name="useViewState handles nonexistent state" time="0.011">
    </testcase>
    <testcase classname="useViewState adds function that updates the state" name="useViewState adds function that updates the state" time="0.03">
    </testcase>
    <testcase classname="useViewState adds function that reset the state with default value" name="useViewState adds function that reset the state with default value" time="0.029">
    </testcase>
    <testcase classname="useViewState adds function that reset the state with specific value" name="useViewState adds function that reset the state with specific value" time="0.019">
    </testcase>
  </testsuite>
  <testsuite name="memoize" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:13" time="1.034" tests="2">
    <testcase classname="memoize returns a function" name="memoize returns a function" time="0.016">
    </testcase>
    <testcase classname="memoize returns correct results but only calls the function if new params given" name="memoize returns correct results but only calls the function if new params given" time="0.018">
    </testcase>
  </testsuite>
  <testsuite name="selectActivity" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:13" time="1.503" tests="6">
    <testcase classname="selectActivity gets the activity of a request from state" name="selectActivity gets the activity of a request from state" time="0.065">
    </testcase>
    <testcase classname="selectActivity returns an identical selector for identical request names" name="selectActivity returns an identical selector for identical request names" time="0.043">
    </testcase>
    <testcase classname="selectActivity returns logout state" name="selectActivity returns logout state" time="0.002">
    </testcase>
    <testcase classname="selectActivity returns true when at least one request is running when loadingScreen state is not set" name="selectActivity returns true when at least one request is running when loadingScreen state is not set" time="0.001">
    </testcase>
    <testcase classname="selectActivity returns true when at least one request is running when loadingScreen state is set" name="selectActivity returns true when at least one request is running when loadingScreen state is set" time="0">
    </testcase>
    <testcase classname="selectActivity returns true when at least one request is running when loadingScreen state is unset" name="selectActivity returns true when at least one request is running when loadingScreen state is unset" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="useNavigationHandler" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:13" time="1.255" tests="6">
    <testcase classname="useNavigationHandler sets an active flag if the current path matches the href" name="useNavigationHandler sets an active flag if the current path matches the href" time="0.032">
    </testcase>
    <testcase classname="useNavigationHandler omits active flag if the current path does not match the href" name="useNavigationHandler omits active flag if the current path does not match the href" time="0.012">
    </testcase>
    <testcase classname="useNavigationHandler sets onClick handler (navigating via router) on local hrefs" name="useNavigationHandler sets onClick handler (navigating via router) on local hrefs" time="0.024">
    </testcase>
    <testcase classname="useNavigationHandler does not navigate on self href" name="useNavigationHandler does not navigate on self href" time="0.013">
    </testcase>
    <testcase classname="useNavigationHandler does navigate to remote hrefs" name="useNavigationHandler does navigate to remote hrefs" time="0.007">
    </testcase>
    <testcase classname="useNavigationHandler no href does not navigate" name="useNavigationHandler no href does not navigate" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="Head" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:13" time="1.249" tests="1">
    <testcase classname="Head ¨sets the language on the &lt;html&gt; element" name="Head ¨sets the language on the &lt;html&gt; element" time="0.126">
    </testcase>
  </testsuite>
  <testsuite name="ErrorPlaceholder" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:13" time="1.328" tests="3">
    <testcase classname="ErrorPlaceholder shows an error icon and message" name="ErrorPlaceholder shows an error icon and message" time="0.055">
    </testcase>
    <testcase classname="ErrorPlaceholder gets icon from theme and shows description" name="ErrorPlaceholder gets icon from theme and shows description" time="0.028">
    </testcase>
    <testcase classname="ErrorPlaceholder passes through an onClick handler" name="ErrorPlaceholder passes through an onClick handler" time="0.026">
    </testcase>
  </testsuite>
  <testsuite name="Modal" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:14" time="1.121" tests="1">
    <testcase classname="Modal renders the structure of a modal dialog" name="Modal renders the structure of a modal dialog" time="0.029">
    </testcase>
  </testsuite>
  <testsuite name="Indicator" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:14" time="1.165" tests="15">
    <testcase classname="Indicator renders a closed arrow icon" name="Indicator renders a closed arrow icon" time="0.023">
    </testcase>
    <testcase classname="Indicator renders an open arrow icon" name="Indicator renders an open arrow icon" time="0.012">
    </testcase>
    <testcase classname="Indicator renders closed arrows in highlight color" name="Indicator renders closed arrows in highlight color" time="0.004">
    </testcase>
    <testcase classname="Indicator renders open arrows in dark grey" name="Indicator renders open arrows in dark grey" time="0.004">
    </testcase>
    <testcase classname="Indicator renders open arrows in light grey when dark" name="Indicator renders open arrows in light grey when dark" time="0.005">
    </testcase>
    <testcase classname="Indicator with theme renders a closed arrow icon" name="Indicator with theme renders a closed arrow icon" time="0.013">
    </testcase>
    <testcase classname="Indicator with theme renders an open arrow icon" name="Indicator with theme renders an open arrow icon" time="0.013">
    </testcase>
    <testcase classname="Indicator with theme renders closed arrows in highlight color" name="Indicator with theme renders closed arrows in highlight color" time="0.005">
    </testcase>
    <testcase classname="Indicator with theme renders open arrows in dark grey" name="Indicator with theme renders open arrows in dark grey" time="0.008">
    </testcase>
    <testcase classname="Indicator with theme renders open arrows in light grey when dark" name="Indicator with theme renders open arrows in light grey when dark" time="0.012">
    </testcase>
    <testcase classname="BeforeIndicator renders a branch continuation before indicator" name="BeforeIndicator renders a branch continuation before indicator" time="0.005">
    </testcase>
    <testcase classname="NonIndicator renders a branch continuation" name="NonIndicator renders a branch continuation" time="0.004">
    </testcase>
    <testcase classname="Label renders a space for node content" name="Label renders a space for node content" time="0.007">
    </testcase>
    <testcase classname="Label renders a label without border" name="Label renders a label without border" time="0.004">
    </testcase>
    <testcase classname="Label renders a label with border" name="Label renders a label with border" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="Segment" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:14" time="1.037" tests="1">
    <testcase classname="Segment shows the selected view" name="Segment shows the selected view" time="0.027">
    </testcase>
  </testsuite>
  <testsuite name="selectTabGetter" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:14" time="1.215" tests="40">
    <testcase classname="selectTabGetter provides a function that returns a named tab" name="selectTabGetter provides a function that returns a named tab" time="0.009">
    </testcase>
    <testcase classname="selectPrependPathConfig finds the prepend path in config" name="selectPrependPathConfig finds the prepend path in config" time="0.01">
    </testcase>
    <testcase classname="selectCurrentModuleName finds the module name in the routing result" name="selectCurrentModuleName finds the module name in the routing result" time="0.002">
    </testcase>
    <testcase classname="selectCurrentModuleName finds the module name when nested" name="selectCurrentModuleName finds the module name when nested" time="0.001">
    </testcase>
    <testcase classname="selectCurrentModuleName returns empty string if no module" name="selectCurrentModuleName returns empty string if no module" time="0.001">
    </testcase>
    <testcase classname="selectCurrentSectionName finds the section name in the routing result" name="selectCurrentSectionName finds the section name in the routing result" time="0.001">
    </testcase>
    <testcase classname="selectCurrentSectionName finds the section name in the routing result with multiple params" name="selectCurrentSectionName finds the section name in the routing result with multiple params" time="0.001">
    </testcase>
    <testcase classname="selectCurrentSectionName finds the section name in the routing result when route is deeper than just section" name="selectCurrentSectionName finds the section name in the routing result when route is deeper than just section" time="0">
    </testcase>
    <testcase classname="selectCurrentSectionName finds the section name in the routing result when route is deeper than just section with multiple params" name="selectCurrentSectionName finds the section name in the routing result when route is deeper than just section with multiple params" time="0.001">
    </testcase>
    <testcase classname="selectMappedCurrentModuleList returns a list of tabs open within the current module" name="selectMappedCurrentModuleList returns a list of tabs open within the current module" time="0.002">
    </testcase>
    <testcase classname="selectMappedCurrentModuleList returns an empty list if there is no list in state" name="selectMappedCurrentModuleList returns an empty list if there is no list in state" time="0.001">
    </testcase>
    <testcase classname="selectSegmentHrefMapper returns a function" name="selectSegmentHrefMapper returns a function" time="0.002">
    </testcase>
    <testcase classname="selectSegmentHrefMapper returned function maps segment hrefs" name="selectSegmentHrefMapper returned function maps segment hrefs" time="0.001">
    </testcase>
    <testcase classname="selectSegmentHrefMapper returned function passes unmapped hrefs" name="selectSegmentHrefMapper returned function passes unmapped hrefs" time="0.001">
    </testcase>
    <testcase classname="getCurrentScope gets the current scope, if one is set" name="getCurrentScope gets the current scope, if one is set" time="0.002">
    </testcase>
    <testcase classname="getCurrentScope gets the last scope, if no scope set and previous scope is known" name="getCurrentScope gets the last scope, if no scope set and previous scope is known" time="0.001">
    </testcase>
    <testcase classname="getCurrentScope gets the default scope, if no scope set and no previous known" name="getCurrentScope gets the default scope, if no scope set and no previous known" time="0.002">
    </testcase>
    <testcase classname="getCurrentScope gets the Global scope, if no scope set, if no default scope and no previous known" name="getCurrentScope gets the Global scope, if no scope set, if no default scope and no previous known" time="0.001">
    </testcase>
    <testcase classname="getCurrentScopeFromRoute gets the current scope, if one is set" name="getCurrentScopeFromRoute gets the current scope, if one is set" time="0.002">
    </testcase>
    <testcase classname="getCurrentScopeFromRoute gets the last scope, if no scope set and previous scope is known" name="getCurrentScopeFromRoute gets the last scope, if no scope set and previous scope is known" time="0.001">
    </testcase>
    <testcase classname="getCurrentScopeFromRoute gets null if no scope set and no previous known" name="getCurrentScopeFromRoute gets null if no scope set and no previous known" time="0.001">
    </testcase>
    <testcase classname="closingTabHandlerActions selectClosingTabHandlerActions selects closing tab handler actions" name="closingTabHandlerActions selectClosingTabHandlerActions selects closing tab handler actions" time="0.004">
    </testcase>
    <testcase classname="closingTabHandlerActions selectClosingTabHandlerActions selects null closing tab handler actions for a module." name="closingTabHandlerActions selectClosingTabHandlerActions selects null closing tab handler actions for a module." time="0.001">
    </testcase>
    <testcase classname="closingTabHandlerActions selectClosingTabHandlerActionForEntity selects closing tab handler fake action for a specific entity." name="closingTabHandlerActions selectClosingTabHandlerActionForEntity selects closing tab handler fake action for a specific entity." time="0.002">
    </testcase>
    <testcase classname="closingTabHandlerActions selectClosingTabHandlerActionForEntity selects closing tab handler action for a specific entity." name="closingTabHandlerActions selectClosingTabHandlerActionForEntity selects closing tab handler action for a specific entity." time="0.001">
    </testcase>
    <testcase classname="closingTabHandlerActions selectClosingTabHandlerActionForEntity selects closing tab handler action for a non-existing entity." name="closingTabHandlerActions selectClosingTabHandlerActionForEntity selects closing tab handler action for a non-existing entity." time="0.002">
    </testcase>
    <testcase classname="closingTabHandlerActions selectClosingTabHandlerActionForEntity selects closing tab handler action for a non-existing module." name="closingTabHandlerActions selectClosingTabHandlerActionForEntity selects closing tab handler action for a non-existing module." time="0.001">
    </testcase>
    <testcase classname="route selectors selectRouteParams selects the currently matched route&apos;s parameters." name="route selectors selectRouteParams selects the currently matched route&apos;s parameters." time="0.001">
    </testcase>
    <testcase classname="route selectors selectRouteParams handles missing data" name="route selectors selectRouteParams handles missing data" time="0.004">
    </testcase>
    <testcase classname="route selectors selectRouteHref selects the currently matched route&apos;s href." name="route selectors selectRouteHref selects the currently matched route&apos;s href." time="0.001">
    </testcase>
    <testcase classname="route selectors selectRouteHref handles missing data" name="route selectors selectRouteHref handles missing data" time="0.002">
    </testcase>
    <testcase classname="route selectors selectRoutePath selects the currently matched route&apos;s path." name="route selectors selectRoutePath selects the currently matched route&apos;s path." time="0.001">
    </testcase>
    <testcase classname="route selectors selectRoutePath handles missing data" name="route selectors selectRoutePath handles missing data" time="0.002">
    </testcase>
    <testcase classname="route selectors selectPrependHrefConfig finds the prepend href in named config" name="route selectors selectPrependHrefConfig finds the prepend href in named config" time="0.001">
    </testcase>
    <testcase classname="route selectors selectPrependHrefConfig finds the prepend href for unknown named config" name="route selectors selectPrependHrefConfig finds the prepend href for unknown named config" time="0.002">
    </testcase>
    <testcase classname="route selectors hasOpenedTabs return true when one tab is open" name="route selectors hasOpenedTabs return true when one tab is open" time="0.001">
    </testcase>
    <testcase classname="route selectors hasOpenedTabs return true when multiple tabs are open" name="route selectors hasOpenedTabs return true when multiple tabs are open" time="0.002">
    </testcase>
    <testcase classname="route selectors hasOpenedTabs return false when no tabs are open" name="route selectors hasOpenedTabs return false when no tabs are open" time="0.001">
    </testcase>
    <testcase classname="route selectors hasOpenedTabs return false when modules are not defined" name="route selectors hasOpenedTabs return false when modules are not defined" time="0.001">
    </testcase>
    <testcase classname="route selectors hasOpenedTabs return false when only module tab is open" name="route selectors hasOpenedTabs return false when only module tab is open" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="with id handling" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:14" time="1.094" tests="6">
    <testcase classname="with id handling passes through a given id" name="with id handling passes through a given id" time="0.014">
    </testcase>
    <testcase classname="with id handling sets a generated id if none given" name="with id handling sets a generated id if none given" time="0.007">
    </testcase>
    <testcase classname="with id handling sets different ids on different components" name="with id handling sets different ids on different components" time="0.037">
    </testcase>
    <testcase classname="with id handling when updated keeps the same id when updated" name="with id handling when updated keeps the same id when updated" time="0.036">
    </testcase>
    <testcase classname="with id handling when updated reverts to generated id if a fixed id is intermittently provided" name="with id handling when updated reverts to generated id if a fixed id is intermittently provided" time="0.023">
    </testcase>
    <testcase classname="with id handling shared id generators shares counters with the same name" name="with id handling shared id generators shares counters with the same name" time="0.036">
    </testcase>
  </testsuite>
  <testsuite name="flatten" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:15" time="0.961" tests="4">
    <testcase classname="flatten flattens nested arrays" name="flatten flattens nested arrays" time="0.004">
    </testcase>
    <testcase classname="flattenObj flattens nested objects by creating prefixed key names" name="flattenObj flattens nested objects by creating prefixed key names" time="0.004">
    </testcase>
    <testcase classname="flattenObj allows custom separators" name="flattenObj allows custom separators" time="0.002">
    </testcase>
    <testcase classname="flattenObj allows custom prefixes" name="flattenObj allows custom prefixes" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Text" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:14" time="1.162" tests="8">
    <testcase classname="Text renders a simple message" name="Text renders a simple message" time="0.017">
    </testcase>
    <testcase classname="Text renders an empty string" name="Text renders an empty string" time="0.006">
    </testcase>
    <testcase classname="Text renders a translated message" name="Text renders a translated message" time="0.005">
    </testcase>
    <testcase classname="Text renders a translated message with values" name="Text renders a translated message with values" time="0.005">
    </testcase>
    <testcase classname="Text renders a translated message with a value selector" name="Text renders a translated message with a value selector" time="0.004">
    </testcase>
    <testcase classname="Text renders a translated message missing its values as a placeholder" name="Text renders a translated message missing its values as a placeholder" time="0.014">
    </testcase>
    <testcase classname="Text renders an error" name="Text renders an error" time="0.017">
    </testcase>
    <testcase classname="Text renders an error if no message given" name="Text renders an error if no message given" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="Sidepanel" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:15" time="1.04" tests="5">
    <testcase classname="Sidepanel renders a PanelDrawer in a portal" name="Sidepanel renders a PanelDrawer in a portal" time="0.018">
    </testcase>
    <testcase classname="Sidepanel PanelDrawer sets the width it is given" name="Sidepanel PanelDrawer sets the width it is given" time="0.011">
    </testcase>
    <testcase classname="Sidepanel PanelDrawer sets width by default" name="Sidepanel PanelDrawer sets width by default" time="0.005">
    </testcase>
    <testcase classname="Sidepanel PanelDrawer sets transition according to timeout" name="Sidepanel PanelDrawer sets transition according to timeout" time="0.018">
    </testcase>
    <testcase classname="Sidepanel PanelDrawer sets default transition" name="Sidepanel PanelDrawer sets default transition" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="enhanceColumnDefs" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:15" time="1.091" tests="5">
    <testcase classname="enhanceColumnDefs does not change column definitions without cause" name="enhanceColumnDefs does not change column definitions without cause" time="0.008">
    </testcase>
    <testcase classname="enhanceColumnDefs column selection adds field name and onChange to select columns" name="enhanceColumnDefs column selection adds field name and onChange to select columns" time="0.05">
    </testcase>
    <testcase classname="enhanceColumnDefs column selection handles missing selection" name="enhanceColumnDefs column selection handles missing selection" time="0.008">
    </testcase>
    <testcase classname="enhanceColumnDefs column sorting wraps sort functions to set view state" name="enhanceColumnDefs column sorting wraps sort functions to set view state" time="0.02">
    </testcase>
    <testcase classname="enhanceColumnDefs column sorting wraps sort functions to handle flipping sort direction" name="enhanceColumnDefs column sorting wraps sort functions to handle flipping sort direction" time="0.024">
    </testcase>
  </testsuite>
  <testsuite name="useToggle" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:15" time="1.162" tests="5">
    <testcase classname="useToggle provides a flag" name="useToggle provides a flag" time="0.013">
    </testcase>
    <testcase classname="useToggle can initialize the flag" name="useToggle can initialize the flag" time="0.008">
    </testcase>
    <testcase classname="useToggle provides a toggle function" name="useToggle provides a toggle function" time="0.023">
    </testcase>
    <testcase classname="useToggle provides a reset function" name="useToggle provides a reset function" time="0.023">
    </testcase>
    <testcase classname="useToggle keeps different elements separate" name="useToggle keeps different elements separate" time="0.115">
    </testcase>
  </testsuite>
  <testsuite name="Divider Props" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:16" time="1.077" tests="11">
    <testcase classname="Divider Props Puts keys in component props map" name="Divider Props Puts keys in component props map" time="0.004">
    </testcase>
    <testcase classname="Divider Props Sets the style value to root ruleName" name="Divider Props Sets the style value to root ruleName" time="0.001">
    </testcase>
    <testcase classname="Divider Props Sets the style value to light ruleName" name="Divider Props Sets the style value to light ruleName" time="0.001">
    </testcase>
    <testcase classname="Divider Props Sets the style value to vertical ruleName" name="Divider Props Sets the style value to vertical ruleName" time="0">
    </testcase>
    <testcase classname="Divider Props Sets the style value to middle ruleName" name="Divider Props Sets the style value to middle ruleName" time="0.001">
    </testcase>
    <testcase classname="Divider Props Sets the style value to inset ruleName" name="Divider Props Sets the style value to inset ruleName" time="0">
    </testcase>
    <testcase classname="isDividerProps Returns true if passed value is null" name="isDividerProps Returns true if passed value is null" time="0">
    </testcase>
    <testcase classname="isDividerProps Returns false if passed value is not object" name="isDividerProps Returns false if passed value is not object" time="0.001">
    </testcase>
    <testcase classname="isDividerProps Returns true if passed value type is DividerProps" name="isDividerProps Returns true if passed value type is DividerProps" time="0">
    </testcase>
    <testcase classname="isDividerProps Returns true if passed value has property _isDividerProps and it&apos;s true" name="isDividerProps Returns true if passed value has property _isDividerProps and it&apos;s true" time="0">
    </testcase>
    <testcase classname="isDividerProps Returns false if passed value has property _isDividerProps and it&apos;s false or missing" name="isDividerProps Returns false if passed value has property _isDividerProps and it&apos;s false or missing" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="withInfiniteScroll" errors="0" failures="0" skipped="1" timestamp="2021-07-22T19:30:16" time="1.173" tests="7">
    <testcase classname="withInfiniteScroll enhances a component to have an onScroll handler and a scrollTop prop, and sets `virtual` flag" name="withInfiniteScroll enhances a component to have an onScroll handler and a scrollTop prop, and sets `virtual` flag" time="0.014">
    </testcase>
    <testcase classname="withInfiniteScroll scroll prop updates updates the scrollTop prop" name="withInfiniteScroll scroll prop updates updates the scrollTop prop" time="0">
      <skipped/>
    </testcase>
    <testcase classname="withInfiniteScroll onScroll has default values" name="withInfiniteScroll onScroll has default values" time="0.007">
    </testcase>
    <testcase classname="withInfiniteScroll onScroll does not call loader if not scrolled far enough" name="withInfiniteScroll onScroll does not call loader if not scrolled far enough" time="0.006">
    </testcase>
    <testcase classname="withInfiniteScroll onScroll calls the loader if scrolled far enough" name="withInfiniteScroll onScroll calls the loader if scrolled far enough" time="0.008">
    </testcase>
    <testcase classname="withInfiniteScroll onScroll does not call the loader if the latest page is not loaded" name="withInfiniteScroll onScroll does not call the loader if the latest page is not loaded" time="0.002">
    </testcase>
    <testcase classname="withInfiniteScroll onScroll does not call the loader if a partial page is loaded" name="withInfiniteScroll onScroll does not call the loader if a partial page is loaded" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Anchor" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:16" time="1.198" tests="7">
    <testcase classname="Anchor renders a closed menu anchor" name="Anchor renders a closed menu anchor" time="0.046">
    </testcase>
    <testcase classname="Anchor renders an open menu anchor" name="Anchor renders an open menu anchor" time="0.027">
    </testcase>
    <testcase classname="Anchor Indicator shows the highlight color when closed" name="Anchor Indicator shows the highlight color when closed" time="0.005">
    </testcase>
    <testcase classname="Anchor Indicator shows the text color when open" name="Anchor Indicator shows the text color when open" time="0.004">
    </testcase>
    <testcase classname="Anchor Header shows the text color when closed" name="Anchor Header shows the text color when closed" time="0.006">
    </testcase>
    <testcase classname="Anchor Header shows the highlight color when open" name="Anchor Header shows the highlight color when open" time="0.004">
    </testcase>
    <testcase classname="Anchor Header shows the highlight color when hovering" name="Anchor Header shows the highlight color when hovering" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="SectionTitle" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:16" time="1.298" tests="2">
    <testcase classname="SectionTitle Renders section title with passed value" name="SectionTitle Renders section title with passed value" time="0.011">
    </testcase>
    <testcase classname="SectionTitle Renders empty section title with null value" name="SectionTitle Renders empty section title with null value" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="useScopeSelect" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:16" time="1.245" tests="1">
    <testcase classname="useScopeSelect it provides a click handler to the enhanced component" name="useScopeSelect it provides a click handler to the enhanced component" time="0.026">
    </testcase>
  </testsuite>
  <testsuite name="MUI Themes" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:16" time="1.247" tests="2">
    <testcase classname="MUI Themes createThemes returns expected themes" name="MUI Themes createThemes returns expected themes" time="0.012">
    </testcase>
    <testcase classname="MUI Themes createThemes returns expected themes with dark palette type" name="MUI Themes createThemes returns expected themes with dark palette type" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="mapModel" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:16" time="1.051" tests="6">
    <testcase classname="mapModel Maps correctly when there aren&apos;t any specific map rules" name="mapModel Maps correctly when there aren&apos;t any specific map rules" time="0.009">
    </testcase>
    <testcase classname="mapModel Maps using a custom mapper" name="mapModel Maps using a custom mapper" time="0.003">
    </testcase>
    <testcase classname="mapModel Maps using a custom mapper with several rules" name="mapModel Maps using a custom mapper with several rules" time="0.005">
    </testcase>
    <testcase classname="mapModel Maps using a custom mapper rule where modeName is not correct" name="mapModel Maps using a custom mapper rule where modeName is not correct" time="0.002">
    </testcase>
    <testcase classname="mapModel Maps correctly when initial model is null" name="mapModel Maps correctly when initial model is null" time="0.002">
    </testcase>
    <testcase classname="mapModel Maps correctly when some modified values are null" name="mapModel Maps correctly when some modified values are null" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="default locale selector" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:17" time="1.123" tests="16">
    <testcase classname="default locale selector gets the first supported locale" name="default locale selector gets the first supported locale" time="0.003">
    </testcase>
    <testcase classname="default locale selector returns &apos;en&apos; if no supported locales" name="default locale selector returns &apos;en&apos; if no supported locales" time="0.001">
    </testcase>
    <testcase classname="locale selector gets the currently selected locale" name="locale selector gets the currently selected locale" time="0.001">
    </testcase>
    <testcase classname="locale selector gets null locale if none set" name="locale selector gets null locale if none set" time="0.001">
    </testcase>
    <testcase classname="locale or default selector gets the currently selected locale" name="locale or default selector gets the currently selected locale" time="0.001">
    </testcase>
    <testcase classname="locale or default selector gets first supported locale if none set" name="locale or default selector gets first supported locale if none set" time="0">
    </testcase>
    <testcase classname="culture index selector gets an index of all supported cultures" name="culture index selector gets an index of all supported cultures" time="0.001">
    </testcase>
    <testcase classname="supported cultures list selector gets a Seq of supported culture IETF tags" name="supported cultures list selector gets a Seq of supported culture IETF tags" time="0.001">
    </testcase>
    <testcase classname="default culture selector gets the default culture" name="default culture selector gets the default culture" time="0.001">
    </testcase>
    <testcase classname="orderedCultureList returns a list of culture ISO names with the default culture first" name="orderedCultureList returns a list of culture ISO names with the default culture first" time="0.003">
    </testcase>
    <testcase classname="cultureOptionList returns a list of label/value pairs with the default culture first" name="cultureOptionList returns a list of label/value pairs with the default culture first" time="0.007">
    </testcase>
    <testcase classname="cultureOptionList returns empty list if there is no locales supported" name="cultureOptionList returns empty list if there is no locales supported" time="0.002">
    </testcase>
    <testcase classname="cultureNameByIsoCode return culture name by culture iso code" name="cultureNameByIsoCode return culture name by culture iso code" time="0.002">
    </testcase>
    <testcase classname="cultureNameByIsoCode return culture iso code if it is not found" name="cultureNameByIsoCode return culture iso code if it is not found" time="0.001">
    </testcase>
    <testcase classname="cultureNameByIsoCode return null if iso code is undefined" name="cultureNameByIsoCode return null if iso code is undefined" time="0.001">
    </testcase>
    <testcase classname="cultureNameByIsoCode return null if iso code is null" name="cultureNameByIsoCode return null if iso code is null" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="unwrapImmutable" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:17" time="0.931" tests="2">
    <testcase classname="unwrapImmutable converts an immutable value to a plain JS object" name="unwrapImmutable converts an immutable value to a plain JS object" time="0.004">
    </testcase>
    <testcase classname="unwrapImmutable leaves non-immutable values alone" name="unwrapImmutable leaves non-immutable values alone" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Icon" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:17" time="1.185" tests="1">
    <testcase classname="Icon Renders icon" name="Icon Renders icon" time="0.055">
    </testcase>
  </testsuite>
  <testsuite name="DevPages" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:17" time="1.036" tests="2">
    <testcase classname="DevPages route &apos;/outside&apos; shows child" name="DevPages route &apos;/outside&apos; shows child" time="0.015">
    </testcase>
    <testcase classname="DevPages route &apos;/dev/sprites&apos; shows a sprite sheet" name="DevPages route &apos;/dev/sprites&apos; shows a sprite sheet" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="isReadMode" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:17" time="0.957" tests="9">
    <testcase classname="isReadMode Returns true if mode is read" name="isReadMode Returns true if mode is read" time="0.001">
    </testcase>
    <testcase classname="isReadMode Returns false if mode is not read" name="isReadMode Returns false if mode is not read" time="0">
    </testcase>
    <testcase classname="isEditMode Returns true if mode is edit" name="isEditMode Returns true if mode is edit" time="0">
    </testcase>
    <testcase classname="isEditMode Returns false if mode is not edit" name="isEditMode Returns false if mode is not edit" time="0.001">
    </testcase>
    <testcase classname="isCreateMode Returns true if mode is create" name="isCreateMode Returns true if mode is create" time="0">
    </testcase>
    <testcase classname="isCreateMode Returns false if mode is not create" name="isCreateMode Returns false if mode is not create" time="0.001">
    </testcase>
    <testcase classname="isMutationMode Returns true if mode is edit" name="isMutationMode Returns true if mode is edit" time="0">
    </testcase>
    <testcase classname="isMutationMode Returns true if mode is create" name="isMutationMode Returns true if mode is create" time="0">
    </testcase>
    <testcase classname="isMutationMode Returns false if mode is not create or edit" name="isMutationMode Returns false if mode is not create or edit" time="0">
    </testcase>
  </testsuite>
  <testsuite name="useApplicationHelpUrl" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:17" time="1.134" tests="3">
    <testcase classname="useApplicationHelpUrl provides my application help url" name="useApplicationHelpUrl provides my application help url" time="0.023">
    </testcase>
    <testcase classname="useApplicationHelpUrl provides my unknown application default help url" name="useApplicationHelpUrl provides my unknown application default help url" time="0.009">
    </testcase>
    <testcase classname="useApplicationHelpUrl provides my other application default help url" name="useApplicationHelpUrl provides my other application default help url" time="0.019">
    </testcase>
  </testsuite>
  <testsuite name="TextInput" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:17" time="1.272" tests="4">
    <testcase classname="TextInput renders a text input with change handler" name="TextInput renders a text input with change handler" time="0.081">
    </testcase>
    <testcase classname="EmailInput renders a text input with change handler" name="EmailInput renders a text input with change handler" time="0.015">
    </testcase>
    <testcase classname="getEventUpdater creates a handler for an event and calls update with the value of the target" name="getEventUpdater creates a handler for an event and calls update with the value of the target" time="0.006">
    </testcase>
    <testcase classname="getEventUpdater is memoized" name="getEventUpdater is memoized" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="parseGuid" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:18" time="1.111" tests="17">
    <testcase classname="parseGuid Retrieves parsed guid without hyphens if passed string is correct guid" name="parseGuid Retrieves parsed guid without hyphens if passed string is correct guid" time="0.002">
    </testcase>
    <testcase classname="parseGuid Retrieves parsed guid with hyphens if passed string is correct guid" name="parseGuid Retrieves parsed guid with hyphens if passed string is correct guid" time="0.002">
    </testcase>
    <testcase classname="parseGuid Retrieves empty string if passed string is not correct guid" name="parseGuid Retrieves empty string if passed string is not correct guid" time="0.001">
    </testcase>
    <testcase classname="parseGuid Retrieves empty string if passed string is null" name="parseGuid Retrieves empty string if passed string is null" time="0">
    </testcase>
    <testcase classname="parseGuid Retrieves empty string if passed string is undefined" name="parseGuid Retrieves empty string if passed string is undefined" time="0.001">
    </testcase>
    <testcase classname="concatObjectPropsWithDelimeter Retrieves correct string when all used props exists in passed object" name="concatObjectPropsWithDelimeter Retrieves correct string when all used props exists in passed object" time="0.001">
    </testcase>
    <testcase classname="concatObjectPropsWithDelimeter Retrieves correct string when  not all used props exists in passed object" name="concatObjectPropsWithDelimeter Retrieves correct string when  not all used props exists in passed object" time="0.001">
    </testcase>
    <testcase classname="concatObjectPropsWithDelimeter Retrieves correct string when delimeter is passed and spaces not used" name="concatObjectPropsWithDelimeter Retrieves correct string when delimeter is passed and spaces not used" time="0.001">
    </testcase>
    <testcase classname="concatObjectPropsWithDelimeter Retrieves correct string when delimeter is not defined" name="concatObjectPropsWithDelimeter Retrieves correct string when delimeter is not defined" time="0">
    </testcase>
    <testcase classname="concatObjectPropsWithDelimeter Retrieves correct string when delimeter is null" name="concatObjectPropsWithDelimeter Retrieves correct string when delimeter is null" time="0.001">
    </testcase>
    <testcase classname="getAllAfterPrependHref Get all after prepend href " name="getAllAfterPrependHref Get all after prepend href " time="0.001">
    </testcase>
    <testcase classname="getAllAfterPrependHref Retrieves empty string if href not valid" name="getAllAfterPrependHref Retrieves empty string if href not valid" time="0.001">
    </testcase>
    <testcase classname="getAllAfterPrependHref Retrieves all string if prependHref not valid" name="getAllAfterPrependHref Retrieves all string if prependHref not valid" time="0">
    </testcase>
    <testcase classname="getModuleNameFromHref Get module name and href to module from href " name="getModuleNameFromHref Get module name and href to module from href " time="0.002">
    </testcase>
    <testcase classname="getModuleNameFromHref Retrieves empty strings if href not valid" name="getModuleNameFromHref Retrieves empty strings if href not valid" time="0.001">
    </testcase>
    <testcase classname="getModuleNameFromHref Retrieves empty strings if prependHref not valid" name="getModuleNameFromHref Retrieves empty strings if prependHref not valid" time="0.001">
    </testcase>
    <testcase classname="stringifyWithoutQuotes Removes quotes" name="stringifyWithoutQuotes Removes quotes" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="timezones" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:18" time="1.073" tests="2">
    <testcase classname="timezones behaves as a reducer should" name="timezones behaves as a reducer should" time="0.003">
    </testcase>
    <testcase classname="timezones saves countries" name="timezones saves countries" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="Select Props" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:18" time="1.092" tests="9">
    <testcase classname="Select Props Contains necessary props keys" name="Select Props Contains necessary props keys" time="0.001">
    </testcase>
    <testcase classname="Select Props Puts keys in component props map" name="Select Props Puts keys in component props map" time="0.002">
    </testcase>
    <testcase classname="Select Props Sets the style value to root ruleName" name="Select Props Sets the style value to root ruleName" time="0">
    </testcase>
    <testcase classname="Select Props Sets the style value to paper ruleName" name="Select Props Sets the style value to paper ruleName" time="0.001">
    </testcase>
    <testcase classname="isSelectProps Returns true if passed value is null" name="isSelectProps Returns true if passed value is null" time="0.001">
    </testcase>
    <testcase classname="isSelectProps Returns false if passed value is not object" name="isSelectProps Returns false if passed value is not object" time="0">
    </testcase>
    <testcase classname="isSelectProps Returns true if passed value type is SelectProps" name="isSelectProps Returns true if passed value type is SelectProps" time="0.001">
    </testcase>
    <testcase classname="isSelectProps Returns true if passed value has property _isSelectProps and it&apos;s true" name="isSelectProps Returns true if passed value has property _isSelectProps and it&apos;s true" time="0">
    </testcase>
    <testcase classname="isSelectProps Returns false if passed value has property _isSelectProps and it&apos;s false or missing" name="isSelectProps Returns false if passed value has property _isSelectProps and it&apos;s false or missing" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Header" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:18" time="1.09" tests="1">
    <testcase classname="Header renders an icon and label" name="Header renders an icon and label" time="0.039">
    </testcase>
  </testsuite>
  <testsuite name="selectCurrentUsername" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:18" time="1.146" tests="19">
    <testcase classname="selectCurrentUsername Gets the logged in username" name="selectCurrentUsername Gets the logged in username" time="0.004">
    </testcase>
    <testcase classname="selectRolesClaims Retrieves rolesClaimsValues correctly" name="selectRolesClaims Retrieves rolesClaimsValues correctly" time="0.002">
    </testcase>
    <testcase classname="selectGroupRolesClaims Retrieves group claims if correctly" name="selectGroupRolesClaims Retrieves group claims if correctly" time="0.002">
    </testcase>
    <testcase classname="selectGroupRolesClaims Retrieves null if no roles claims in store" name="selectGroupRolesClaims Retrieves null if no roles claims in store" time="0.001">
    </testcase>
    <testcase classname="hasEditorPermissions Retrieves true if user has editor permissions in specified group" name="hasEditorPermissions Retrieves true if user has editor permissions in specified group" time="0.002">
    </testcase>
    <testcase classname="hasEditorPermissions Retrieves false if user has not editor permissions in specified group" name="hasEditorPermissions Retrieves false if user has not editor permissions in specified group" time="0.002">
    </testcase>
    <testcase classname="hasEditorPermissions Retrieves true if user hasn&apos;t global editor permissions but, has in current scope in specified group" name="hasEditorPermissions Retrieves true if user hasn&apos;t global editor permissions but, has in current scope in specified group" time="0.001">
    </testcase>
    <testcase classname="hasEditorPermissions Retrieves true if user has editor permissions just in specified scope" name="hasEditorPermissions Retrieves true if user has editor permissions just in specified scope" time="0.006">
    </testcase>
    <testcase classname="hasEditorPermissions Retrieves false if app roles claims are null" name="hasEditorPermissions Retrieves false if app roles claims are null" time="0.001">
    </testcase>
    <testcase classname="hasAdministratorPermissions Retrieves true if user has global administrator permissions in specified group" name="hasAdministratorPermissions Retrieves true if user has global administrator permissions in specified group" time="0.005">
    </testcase>
    <testcase classname="hasAdministratorPermissions Retrieves false if user has not global administrator permissions in specified group" name="hasAdministratorPermissions Retrieves false if user has not global administrator permissions in specified group" time="0.001">
    </testcase>
    <testcase classname="hasAdministratorPermissions Retrieves true if user hasn&apos;t global administrator permissions but, has in current scope in specified group" name="hasAdministratorPermissions Retrieves true if user hasn&apos;t global administrator permissions but, has in current scope in specified group" time="0.001">
    </testcase>
    <testcase classname="hasAdministratorPermissions Retrieves true if user has administrator permissions just in specified scope" name="hasAdministratorPermissions Retrieves true if user has administrator permissions just in specified scope" time="0.001">
    </testcase>
    <testcase classname="hasAdministratorPermissions Retrieves false if app roles claims are null" name="hasAdministratorPermissions Retrieves false if app roles claims are null" time="0.002">
    </testcase>
    <testcase classname="hasReaderPermissions Retrieves true if user has reader permissions in specified group" name="hasReaderPermissions Retrieves true if user has reader permissions in specified group" time="0.02">
    </testcase>
    <testcase classname="hasReaderPermissions Retrieves false if user has not reader permissions in specified group" name="hasReaderPermissions Retrieves false if user has not reader permissions in specified group" time="0.004">
    </testcase>
    <testcase classname="hasReaderPermissions Retrieves true if user hasn&apos;t global editor permissions but, has in current scope in specified group" name="hasReaderPermissions Retrieves true if user hasn&apos;t global editor permissions but, has in current scope in specified group" time="0.003">
    </testcase>
    <testcase classname="hasReaderPermissions Retrieves true if user has reader permissions just in specified scope" name="hasReaderPermissions Retrieves true if user has reader permissions just in specified scope" time="0.002">
    </testcase>
    <testcase classname="hasReaderPermissions Retrieves false if app roles claims are null" name="hasReaderPermissions Retrieves false if app roles claims are null" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Spritesheet" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:19" time="1.048" tests="1">
    <testcase classname="Spritesheet renders a list of icons available in svg sprite sheet" name="Spritesheet renders a list of icons available in svg sprite sheet" time="0.071">
    </testcase>
  </testsuite>
  <testsuite name="Button" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:19" time="1.113" tests="5">
    <testcase classname="Button renders a button" name="Button renders a button" time="0.017">
    </testcase>
    <testcase classname="Button sets an inactive background-color" name="Button sets an inactive background-color" time="0.003">
    </testcase>
    <testcase classname="Button sets an active background-color" name="Button sets an active background-color" time="0.007">
    </testcase>
    <testcase classname="Button primary sets an inactive background gradient" name="Button primary sets an inactive background gradient" time="0.014">
    </testcase>
    <testcase classname="Button primary sets an active background-color" name="Button primary sets an active background-color" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="CheckboxGroup Props" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:19" time="1.011" tests="7">
    <testcase classname="CheckboxGroup Props Contains necessary props keys" name="CheckboxGroup Props Contains necessary props keys" time="0.002">
    </testcase>
    <testcase classname="CheckboxGroup Props Puts keys in component props map" name="CheckboxGroup Props Puts keys in component props map" time="0.002">
    </testcase>
    <testcase classname="isCheckboxGroupProps Returns true if passed value is null" name="isCheckboxGroupProps Returns true if passed value is null" time="0.001">
    </testcase>
    <testcase classname="isCheckboxGroupProps Returns false if passed value is not object" name="isCheckboxGroupProps Returns false if passed value is not object" time="0">
    </testcase>
    <testcase classname="isCheckboxGroupProps Returns true if passed value type is CheckboxGroupProps" name="isCheckboxGroupProps Returns true if passed value type is CheckboxGroupProps" time="0.001">
    </testcase>
    <testcase classname="isCheckboxGroupProps Returns true if passed value has property _isCheckboxGroupProps and it&apos;s true" name="isCheckboxGroupProps Returns true if passed value has property _isCheckboxGroupProps and it&apos;s true" time="0">
    </testcase>
    <testcase classname="isCheckboxGroupProps Returns false if passed value has property _isCheckboxGroupProps and it&apos;s false or missing" name="isCheckboxGroupProps Returns false if passed value has property _isCheckboxGroupProps and it&apos;s false or missing" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="settings" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:19" time="1.132" tests="4">
    <testcase classname="settings behaves as a reducer should" name="settings behaves as a reducer should" time="0.004">
    </testcase>
    <testcase classname="settings stores results of getting your personal default application" name="settings stores results of getting your personal default application" time="0.003">
    </testcase>
    <testcase classname="settings stores a newly set default application" name="settings stores a newly set default application" time="0.002">
    </testcase>
    <testcase classname="settings stores a newly set default scope" name="settings stores a newly set default scope" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="getEntityIdFromUrl" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:19" time="1.143" tests="14">
    <testcase classname="getEntityIdFromUrl Retrieves entity id from url" name="getEntityIdFromUrl Retrieves entity id from url" time="0.003">
    </testcase>
    <testcase classname="getEntityIdFromUrl (path to regex) Retrieves entity id from url" name="getEntityIdFromUrl (path to regex) Retrieves entity id from url" time="0.001">
    </testcase>
    <testcase classname="tryGetNewEntityIdKey should return undefined when new without / at begin" name="tryGetNewEntityIdKey should return undefined when new without / at begin" time="0.001">
    </testcase>
    <testcase classname="tryGetNewEntityIdKey Should return new when url like /new" name="tryGetNewEntityIdKey Should return new when url like /new" time="0.001">
    </testcase>
    <testcase classname="tryGetNewEntityIdKey Should return new when url like /new/section" name="tryGetNewEntityIdKey Should return new when url like /new/section" time="0.001">
    </testcase>
    <testcase classname="tryGetNewEntityIdKey Should return new when url like /scope/module/new" name="tryGetNewEntityIdKey Should return new when url like /scope/module/new" time="0.001">
    </testcase>
    <testcase classname="tryGetNewEntityIdKey Should return new when url like /scope/module/new/section" name="tryGetNewEntityIdKey Should return new when url like /scope/module/new/section" time="0.001">
    </testcase>
    <testcase classname="tryGetNewEntityIdKey shoud return new{number} when url like /new{number}" name="tryGetNewEntityIdKey shoud return new{number} when url like /new{number}" time="0.001">
    </testcase>
    <testcase classname="tryGetNewEntityIdKey shoud return new{number} when url like /new{number}/section" name="tryGetNewEntityIdKey shoud return new{number} when url like /new{number}/section" time="0.001">
    </testcase>
    <testcase classname="tryGetNewEntityIdKey shoud return undefined when url like /new{not_number}" name="tryGetNewEntityIdKey shoud return undefined when url like /new{not_number}" time="0">
    </testcase>
    <testcase classname="tryGetNewEntityIdKey shoud return undefined when url like /new{not_number}/section" name="tryGetNewEntityIdKey shoud return undefined when url like /new{not_number}/section" time="0">
    </testcase>
    <testcase classname="tryGetNewEntityIdKey shoud return undefined when url like /new{number}{not_number}/section" name="tryGetNewEntityIdKey shoud return undefined when url like /new{number}{not_number}/section" time="0.001">
    </testcase>
    <testcase classname="tryGetNewEntityIdKey shoud return undefined when url like /{string}new" name="tryGetNewEntityIdKey shoud return undefined when url like /{string}new" time="0.002">
    </testcase>
    <testcase classname="tryGetNewEntityIdKey shoud return undefined when url like /{string}new/section" name="tryGetNewEntityIdKey shoud return undefined when url like /{string}new/section" time="0">
    </testcase>
  </testsuite>
  <testsuite name="debounce" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:19" time="1.15" tests="6">
    <testcase classname="debounce returns a function" name="debounce returns a function" time="0.004">
    </testcase>
    <testcase classname="debounce does not call the handler immediately" name="debounce does not call the handler immediately" time="0.016">
    </testcase>
    <testcase classname="debounce calls the handler at the start of the timeout if immediate flag given" name="debounce calls the handler at the start of the timeout if immediate flag given" time="0.011">
    </testcase>
    <testcase classname="debounce delays calling until it has been long enough between calls" name="debounce delays calling until it has been long enough between calls" time="0.015">
    </testcase>
    <testcase classname="debounce calls only with latest arguments if multiple calls made" name="debounce calls only with latest arguments if multiple calls made" time="0.008">
    </testcase>
    <testcase classname="debounce only calls handler once during repeated calls immediate flag given" name="debounce only calls handler once during repeated calls immediate flag given" time="0.029">
    </testcase>
  </testsuite>
  <testsuite name="useDispatchWithModulesData" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:20" time="1.202" tests="3">
    <testcase classname="useDispatchWithModulesData Dispatches action just with passed and default params" name="useDispatchWithModulesData Dispatches action just with passed and default params" time="0.041">
    </testcase>
    <testcase classname="useDispatchWithModulesData Dispatches action just with default params" name="useDispatchWithModulesData Dispatches action just with default params" time="0.007">
    </testcase>
    <testcase classname="useDispatchWithModulesData Dispatches action with default and options params" name="useDispatchWithModulesData Dispatches action with default and options params" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="Standalone Radio Props" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:20" time="0.997" tests="7">
    <testcase classname="Standalone Radio Props Contains necessary props and rules keys" name="Standalone Radio Props Contains necessary props and rules keys" time="0.002">
    </testcase>
    <testcase classname="Standalone Radio Props Puts keys in component props and rules map" name="Standalone Radio Props Puts keys in component props and rules map" time="0.004">
    </testcase>
    <testcase classname="isStandaloneRadioProps Returns true if passed value is null" name="isStandaloneRadioProps Returns true if passed value is null" time="0.001">
    </testcase>
    <testcase classname="isStandaloneRadioProps Returns false if passed value is not object" name="isStandaloneRadioProps Returns false if passed value is not object" time="0.001">
    </testcase>
    <testcase classname="isStandaloneRadioProps Returns true if passed value type is RadioProps" name="isStandaloneRadioProps Returns true if passed value type is RadioProps" time="0">
    </testcase>
    <testcase classname="isStandaloneRadioProps Returns true if passed value has property _isRadioProps and it&apos;s true" name="isStandaloneRadioProps Returns true if passed value has property _isRadioProps and it&apos;s true" time="0">
    </testcase>
    <testcase classname="isStandaloneRadioProps Returns false if passed value has property _isRadioProps and it&apos;s false or missing" name="isStandaloneRadioProps Returns false if passed value has property _isRadioProps and it&apos;s false or missing" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Select Props" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:20" time="1.227" tests="7">
    <testcase classname="Select Props Contains necessary props keys" name="Select Props Contains necessary props keys" time="0.002">
    </testcase>
    <testcase classname="Select Props Puts keys in component props map" name="Select Props Puts keys in component props map" time="0.005">
    </testcase>
    <testcase classname="isRadioProps Returns true if passed value is null" name="isRadioProps Returns true if passed value is null" time="0.001">
    </testcase>
    <testcase classname="isRadioProps Returns false if passed value is not object" name="isRadioProps Returns false if passed value is not object" time="0">
    </testcase>
    <testcase classname="isRadioProps Returns true if passed value type is RadioProps" name="isRadioProps Returns true if passed value type is RadioProps" time="0">
    </testcase>
    <testcase classname="isRadioProps Returns true if passed value has property _isRadioProps and it&apos;s true" name="isRadioProps Returns true if passed value has property _isRadioProps and it&apos;s true" time="0">
    </testcase>
    <testcase classname="isRadioProps Returns false if passed value has property _isRadioProps and it&apos;s false or missing" name="isRadioProps Returns false if passed value has property _isRadioProps and it&apos;s false or missing" time="0">
    </testcase>
  </testsuite>
  <testsuite name="getCultures" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:20" time="0.962" tests="4">
    <testcase classname="getCultures creates a RSAA to fetch available cultures" name="getCultures creates a RSAA to fetch available cultures" time="0.014">
    </testcase>
    <testcase classname="getMyCulture creates a RSAA to get currently selected culture" name="getMyCulture creates a RSAA to get currently selected culture" time="0.011">
    </testcase>
    <testcase classname="getMyCulture creates a RSAA to set currently selected culture" name="getMyCulture creates a RSAA to set currently selected culture" time="0.016">
    </testcase>
    <testcase classname="changeLocale creates a Flux Standard Action with the given locale as payload" name="changeLocale creates a Flux Standard Action with the given locale as payload" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Countries Selectors" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:20" time="1.035" tests="4">
    <testcase classname="Countries Selectors Retrieves list of countries" name="Countries Selectors Retrieves list of countries" time="0.013">
    </testcase>
    <testcase classname="Countries Selectors Retrieves country display name by country code" name="Countries Selectors Retrieves country display name by country code" time="0.004">
    </testcase>
    <testcase classname="Countries Selectors Retrieves not translated country code if no display name found" name="Countries Selectors Retrieves not translated country code if no display name found" time="0.001">
    </testcase>
    <testcase classname="Countries Selectors Retrieves not translated country code if no country found" name="Countries Selectors Retrieves not translated country code if no country found" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="withRequestActivity" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:20" time="1.056" tests="2">
    <testcase classname="withRequestActivity sets an active flag if the named request is in progress" name="withRequestActivity sets an active flag if the named request is in progress" time="0.024">
    </testcase>
    <testcase classname="withRequestActivity does not set active flag if the named request is not in progress" name="withRequestActivity does not set active flag if the named request is not in progress" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="Root" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:20" time="1.083" tests="3">
    <testcase classname="Root renders a &lt;li&gt;" name="Root renders a &lt;li&gt;" time="0.014">
    </testcase>
    <testcase classname="Leaf renders a &lt;li&gt;" name="Leaf renders a &lt;li&gt;" time="0.008">
    </testcase>
    <testcase classname="Leaf sets styling for a branch structure" name="Leaf sets styling for a branch structure" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="Fieldset" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:21" time="1.13" tests="1">
    <testcase classname="Fieldset works" name="Fieldset works" time="0.041">
    </testcase>
  </testsuite>
  <testsuite name="stripKey" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:21" time="0.934" tests="1">
    <testcase classname="stripKey returns a copied object with the named key removed" name="stripKey returns a copied object with the named key removed" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="Expansion Panel Props" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:21" time="1.046" tests="14">
    <testcase classname="Expansion Panel Props Contains necessary prop and rule keys" name="Expansion Panel Props Contains necessary prop and rule keys" time="0.002">
    </testcase>
    <testcase classname="Expansion Panel Props Puts keys in component prop and rule maps" name="Expansion Panel Props Puts keys in component prop and rule maps" time="0.002">
    </testcase>
    <testcase classname="Expansion Panel Actions Props Contains necessary props keys" name="Expansion Panel Actions Props Contains necessary props keys" time="0">
    </testcase>
    <testcase classname="Expansion Panel Actions Props Puts keys in component props map" name="Expansion Panel Actions Props Puts keys in component props map" time="0.001">
    </testcase>
    <testcase classname="isExpansionPanelProps Returns true if passed value is null" name="isExpansionPanelProps Returns true if passed value is null" time="0.001">
    </testcase>
    <testcase classname="isExpansionPanelProps Returns false if passed value is not object" name="isExpansionPanelProps Returns false if passed value is not object" time="0">
    </testcase>
    <testcase classname="isExpansionPanelProps Returns true if passed value type is ExpansionPanelProps" name="isExpansionPanelProps Returns true if passed value type is ExpansionPanelProps" time="0.001">
    </testcase>
    <testcase classname="isExpansionPanelProps Returns true if passed value has property _isExpansionPanelProps and it&apos;s true" name="isExpansionPanelProps Returns true if passed value has property _isExpansionPanelProps and it&apos;s true" time="0">
    </testcase>
    <testcase classname="isExpansionPanelProps Returns false if passed value has property _isExpansionPanelProps and it&apos;s false or missing" name="isExpansionPanelProps Returns false if passed value has property _isExpansionPanelProps and it&apos;s false or missing" time="0.001">
    </testcase>
    <testcase classname="isExpansionPanelActionsProps Returns true if passed value is null" name="isExpansionPanelActionsProps Returns true if passed value is null" time="0">
    </testcase>
    <testcase classname="isExpansionPanelActionsProps Returns false if passed value is not object" name="isExpansionPanelActionsProps Returns false if passed value is not object" time="0.001">
    </testcase>
    <testcase classname="isExpansionPanelActionsProps Returns true if passed value type is ExpansionPanelActionsProps" name="isExpansionPanelActionsProps Returns true if passed value type is ExpansionPanelActionsProps" time="0">
    </testcase>
    <testcase classname="isExpansionPanelActionsProps Returns true if passed value has property _isExpansionPanelActionsProps and it&apos;s true" name="isExpansionPanelActionsProps Returns true if passed value has property _isExpansionPanelActionsProps and it&apos;s true" time="0">
    </testcase>
    <testcase classname="isExpansionPanelActionsProps Returns false if passed value has property _isExpansionPanelActionsProps and it&apos;s false or missing" name="isExpansionPanelActionsProps Returns false if passed value has property _isExpansionPanelActionsProps and it&apos;s false or missing" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="localizedAppSelector" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:21" time="1.105" tests="2">
    <testcase classname="localizedAppSelector gets the list of visible applications, localized to the current language" name="localizedAppSelector gets the list of visible applications, localized to the current language" time="0.008">
    </testcase>
    <testcase classname="localizedAppOptionSelector gets the list of visible localized applications as an option list for selectors" name="localizedAppOptionSelector gets the list of visible localized applications as an option list for selectors" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="Dialog" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:21" time="1.1" tests="2">
    <testcase classname="Dialog renders a dialog with a default look" name="Dialog renders a dialog with a default look" time="0.028">
    </testcase>
    <testcase classname="Dialog renders a dialog with dark look" name="Dialog renders a dialog with dark look" time="0.022">
    </testcase>
  </testsuite>
  <testsuite name="setValue" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:21" time="1.111" tests="12">
    <testcase classname="setValue creates an action object" name="setValue creates an action object" time="0.004">
    </testcase>
    <testcase classname="setStateField creates an action object" name="setStateField creates an action object" time="0.001">
    </testcase>
    <testcase classname="setStateField creates an action object" name="setStateField creates an action object" time="0.001">
    </testcase>
    <testcase classname="removeEditNode creates an action object" name="removeEditNode creates an action object" time="0.001">
    </testcase>
    <testcase classname="setEditModelField creates an action object" name="setEditModelField creates an action object" time="0.001">
    </testcase>
    <testcase classname="setFullEntityEditModel creates an action object" name="setFullEntityEditModel creates an action object" time="0.001">
    </testcase>
    <testcase classname="removeEditAllModelFields creates an action object" name="removeEditAllModelFields creates an action object" time="0.001">
    </testcase>
    <testcase classname="removeEditModel creates an action object" name="removeEditModel creates an action object" time="0.001">
    </testcase>
    <testcase classname="removeEditModelField creates an action object" name="removeEditModelField creates an action object" time="0.001">
    </testcase>
    <testcase classname="setEditModelErrors creates an action object" name="setEditModelErrors creates an action object" time="0.001">
    </testcase>
    <testcase classname="setEditModelFieldError creates an action object" name="setEditModelFieldError creates an action object" time="0.001">
    </testcase>
    <testcase classname="removeEditModelFieldError creates an action object" name="removeEditModelFieldError creates an action object" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Form wrapper" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:22" time="1.084" tests="2">
    <testcase classname="Form wrapper sets column width based on given span width" name="Form wrapper sets column width based on given span width" time="0.017">
    </testcase>
    <testcase classname="Form wrapper sets default column width" name="Form wrapper sets default column width" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="getTheme" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:22" time="1.209" tests="5">
    <testcase classname="getTheme gives a theme object containing colors,  icon names" name="getTheme gives a theme object containing colors,  icon names" time="0.013">
    </testcase>
    <testcase classname="getTheme has default app colors" name="getTheme has default app colors" time="0.033">
    </testcase>
    <testcase classname="getTheme creates app colors from base" name="getTheme creates app colors from base" time="0.004">
    </testcase>
    <testcase classname="getTheme accepts preset app colors" name="getTheme accepts preset app colors" time="0.006">
    </testcase>
    <testcase classname="getTheme handles overrides, including deep merges" name="getTheme handles overrides, including deep merges" time="0.02">
    </testcase>
  </testsuite>
  <testsuite name="getScopes" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:22" time="1.273" tests="4">
    <testcase classname="getScopes creates a RSAA to fetch authorized scope tree" name="getScopes creates a RSAA to fetch authorized scope tree" time="0.015">
    </testcase>
    <testcase classname="getScopes creates a RSAA to fetch default user scope" name="getScopes creates a RSAA to fetch default user scope" time="0.011">
    </testcase>
    <testcase classname="getScopes throws an error if no class found on DOM element" name="getScopes throws an error if no class found on DOM element" time="0.002">
    </testcase>
    <testcase classname="applicationScopeHasChanged creates an action object" name="applicationScopeHasChanged creates an action object" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Request reducer" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:22" time="1.093" tests="6">
    <testcase classname="Request reducer behaves as a reducer should" name="Request reducer behaves as a reducer should" time="0.004">
    </testcase>
    <testcase classname="Request reducer sets activity flag when a request is started" name="Request reducer sets activity flag when a request is started" time="0.002">
    </testcase>
    <testcase classname="Request reducer clears activity and logout flag when a request succeeds" name="Request reducer clears activity and logout flag when a request succeeds" time="0.001">
    </testcase>
    <testcase classname="Request reducer clears activity flag and sets error flag when a request fails without payload" name="Request reducer clears activity flag and sets error flag when a request fails without payload" time="0.001">
    </testcase>
    <testcase classname="Request reducer clears activity flag and sets error flag when a request fails with other status" name="Request reducer clears activity flag and sets error flag when a request fails with other status" time="0.001">
    </testcase>
    <testcase classname="Request reducer clears activity flag and sets login flag when a request fails with status 403" name="Request reducer clears activity flag and sets login flag when a request fails with status 403" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Autocomplete Props" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:23" time="1.039" tests="7">
    <testcase classname="Autocomplete Props Contains necessary props keys" name="Autocomplete Props Contains necessary props keys" time="0.001">
    </testcase>
    <testcase classname="Autocomplete Props Puts keys in component props map" name="Autocomplete Props Puts keys in component props map" time="0.001">
    </testcase>
    <testcase classname="isAutocompleteProps Returns true if passed value is null" name="isAutocompleteProps Returns true if passed value is null" time="0.001">
    </testcase>
    <testcase classname="isAutocompleteProps Returns false if passed value is not object" name="isAutocompleteProps Returns false if passed value is not object" time="0">
    </testcase>
    <testcase classname="isAutocompleteProps Returns true if passed value type is AutocompleteProps" name="isAutocompleteProps Returns true if passed value type is AutocompleteProps" time="0">
    </testcase>
    <testcase classname="isAutocompleteProps Returns true if passed value has property _isAutocompleteProps and it&apos;s true" name="isAutocompleteProps Returns true if passed value has property _isAutocompleteProps and it&apos;s true" time="0">
    </testcase>
    <testcase classname="isAutocompleteProps Returns false if passed value has property _isAutocompleteProps and it&apos;s false or missing" name="isAutocompleteProps Returns false if passed value has property _isAutocompleteProps and it&apos;s false or missing" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="withScrollBox" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:22" time="1.188" tests="1">
    <testcase classname="withScrollBox renders a scroll box with measured height" name="withScrollBox renders a scroll box with measured height" time="0.028">
    </testcase>
  </testsuite>
  <testsuite name="DropDownMenu Props" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:22" time="1.387" tests="7">
    <testcase classname="DropDownMenu Props Contains necessary props keys" name="DropDownMenu Props Contains necessary props keys" time="0.001">
    </testcase>
    <testcase classname="DropDownMenu Props Puts keys in component props map" name="DropDownMenu Props Puts keys in component props map" time="0.002">
    </testcase>
    <testcase classname="isDropDownMenuProps Returns true if passed value is null" name="isDropDownMenuProps Returns true if passed value is null" time="0.001">
    </testcase>
    <testcase classname="isDropDownMenuProps Returns false if passed value is not object" name="isDropDownMenuProps Returns false if passed value is not object" time="0">
    </testcase>
    <testcase classname="isDropDownMenuProps Returns true if passed value type is DropDownMenuProps" name="isDropDownMenuProps Returns true if passed value type is DropDownMenuProps" time="0.001">
    </testcase>
    <testcase classname="isDropDownMenuProps Returns true if passed value has property _isDropDownMenuProps and it&apos;s true" name="isDropDownMenuProps Returns true if passed value has property _isDropDownMenuProps and it&apos;s true" time="0">
    </testcase>
    <testcase classname="isDropDownMenuProps Returns false if passed value has property _isDropDownMenuProps and it&apos;s false or missing" name="isDropDownMenuProps Returns false if passed value has property _isDropDownMenuProps and it&apos;s false or missing" time="0">
    </testcase>
  </testsuite>
  <testsuite name="NotificationProps Props" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:23" time="1.098" tests="7">
    <testcase classname="NotificationProps Props Contains necessary props keys" name="NotificationProps Props Contains necessary props keys" time="0.002">
    </testcase>
    <testcase classname="NotificationProps Props Puts keys in component props map" name="NotificationProps Props Puts keys in component props map" time="0.001">
    </testcase>
    <testcase classname="isNotificationProps Returns true if passed value is null" name="isNotificationProps Returns true if passed value is null" time="0.001">
    </testcase>
    <testcase classname="isNotificationProps Returns false if passed value is not object" name="isNotificationProps Returns false if passed value is not object" time="0">
    </testcase>
    <testcase classname="isNotificationProps Returns true if passed value type is NotificationProps" name="isNotificationProps Returns true if passed value type is NotificationProps" time="0.001">
    </testcase>
    <testcase classname="isNotificationProps Returns true if passed value has property _isNotificationProps and it&apos;s true" name="isNotificationProps Returns true if passed value has property _isNotificationProps and it&apos;s true" time="0">
    </testcase>
    <testcase classname="isNotificationProps Returns false if passed value has property _isNotificationProps and it&apos;s false or missing" name="isNotificationProps Returns false if passed value has property _isNotificationProps and it&apos;s false or missing" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="pushToast" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:23" time="1.163" tests="3">
    <testcase classname="pushToast creates an action with a toast message as payload" name="pushToast creates an action with a toast message as payload" time="0.004">
    </testcase>
    <testcase classname="pushToast defaults to &apos;confirm&apos; type" name="pushToast defaults to &apos;confirm&apos; type" time="0.002">
    </testcase>
    <testcase classname="shiftToast creates a payloadless action" name="shiftToast creates a payloadless action" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getVersionInfo" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:23" time="1.242" tests="4">
    <testcase classname="getVersionInfo creates a RSAA to get version info for a french culture" name="getVersionInfo creates a RSAA to get version info for a french culture" time="0.015">
    </testcase>
    <testcase classname="getVersionInfo creates a RSAA to get version info with default culture when null" name="getVersionInfo creates a RSAA to get version info with default culture when null" time="0.015">
    </testcase>
    <testcase classname="getVersionInfo creates a RSAA to get version info with any other languages" name="getVersionInfo creates a RSAA to get version info with any other languages" time="0.009">
    </testcase>
    <testcase classname="resetVersionInfo defaults to &apos;confirm&apos; type" name="resetVersionInfo defaults to &apos;confirm&apos; type" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="ColumnWrapper" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:24" time="1.206" tests="1">
    <testcase classname="ColumnWrapper sets flex and flex direction" name="ColumnWrapper sets flex and flex direction" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="setTranslationWithFallbackField" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:24" time="1.069" tests="8">
    <testcase classname="setTranslationWithFallbackField replaces a i18n message structure with the selected locale&apos;s string" name="setTranslationWithFallbackField replaces a i18n message structure with the selected locale&apos;s string" time="0.005">
    </testcase>
    <testcase classname="setTranslationWithFallbackField returns the fallbackField Value if translation not found" name="setTranslationWithFallbackField returns the fallbackField Value if translation not found" time="0.002">
    </testcase>
    <testcase classname="setTranslationWithFallbackField returns empty String the fallbackField Value undefined" name="setTranslationWithFallbackField returns empty String the fallbackField Value undefined" time="0.001">
    </testcase>
    <testcase classname="setTranslationWithFallbackField returns same object if field does not exist" name="setTranslationWithFallbackField returns same object if field does not exist" time="0.001">
    </testcase>
    <testcase classname="setTranslationWithFallbackValue replaces a i18n message structure with the selected locale&apos;s string" name="setTranslationWithFallbackValue replaces a i18n message structure with the selected locale&apos;s string" time="0.001">
    </testcase>
    <testcase classname="setTranslationWithFallbackValue returns the fallbacValue if translation not found" name="setTranslationWithFallbackValue returns the fallbacValue if translation not found" time="0.001">
    </testcase>
    <testcase classname="setTranslationWithFallbackValue returns emptyString if  fallbacValue is not defined" name="setTranslationWithFallbackValue returns emptyString if  fallbacValue is not defined" time="0.001">
    </testcase>
    <testcase classname="setTranslationWithFallbackValue returns same object if field does not exist" name="setTranslationWithFallbackValue returns same object if field does not exist" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="&lt;localizationHelper.getLocalization&gt;" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:24" time="1.097" tests="17">
    <testcase classname="&lt;localizationHelper.getLocalization&gt; get localization in en" name="&lt;localizationHelper.getLocalization&gt; get localization in en" time="0.003">
    </testcase>
    <testcase classname="&lt;localizationHelper.getLocalization&gt; get localization in en-us should return fallback text" name="&lt;localizationHelper.getLocalization&gt; get localization in en-us should return fallback text" time="0.001">
    </testcase>
    <testcase classname="&lt;localizationHelper.getLocalization&gt; get localization in fr-fr should return fr text" name="&lt;localizationHelper.getLocalization&gt; get localization in fr-fr should return fr text" time="0.001">
    </testcase>
    <testcase classname="&lt;localizationHelper.getLocalization&gt; get localization in fr-ca should return fr text" name="&lt;localizationHelper.getLocalization&gt; get localization in fr-ca should return fr text" time="0">
    </testcase>
    <testcase classname="&lt;localizationHelper.getLocalization&gt; get localization in unknown language should return fallbackValue" name="&lt;localizationHelper.getLocalization&gt; get localization in unknown language should return fallbackValue" time="0.001">
    </testcase>
    <testcase classname="&lt;localizationHelper.getLocalization&gt; default value should be returned if localizations is null" name="&lt;localizationHelper.getLocalization&gt; default value should be returned if localizations is null" time="0">
    </testcase>
    <testcase classname="&lt;localizationHelper.getLocalization&gt; default value should be returned if en localization is empty" name="&lt;localizationHelper.getLocalization&gt; default value should be returned if en localization is empty" time="0.001">
    </testcase>
    <testcase classname="&lt;localizationHelper.getLocalization&gt; get empty value if en localization is empty and treatEmptyValueAsNull is false" name="&lt;localizationHelper.getLocalization&gt; get empty value if en localization is empty and treatEmptyValueAsNull is false" time="0.001">
    </testcase>
    <testcase classname="&lt;localizationHelper.getLocalization&gt; default value should be returned if en localization is only whitespace or breakline" name="&lt;localizationHelper.getLocalization&gt; default value should be returned if en localization is only whitespace or breakline" time="0">
    </testcase>
    <testcase classname="&lt;localizationHelper.getLocalization&gt; default value should be returned if en-US localization is empty" name="&lt;localizationHelper.getLocalization&gt; default value should be returned if en-US localization is empty" time="0.002">
    </testcase>
    <testcase classname="&lt;localizationHelper.getLocalization&gt; default value should be returned if localizations is undefined" name="&lt;localizationHelper.getLocalization&gt; default value should be returned if localizations is undefined" time="0.001">
    </testcase>
    <testcase classname="&lt;localizationHelper.getLocalization&gt; default value should be returned if localizations is empty" name="&lt;localizationHelper.getLocalization&gt; default value should be returned if localizations is empty" time="0.001">
    </testcase>
    <testcase classname="&lt;localizationHelper.getLocalization&gt; default value should be returned if locale is null" name="&lt;localizationHelper.getLocalization&gt; default value should be returned if locale is null" time="0">
    </testcase>
    <testcase classname="&lt;localizationHelper.getLocalization&gt; default value should be returned if locale is undefined" name="&lt;localizationHelper.getLocalization&gt; default value should be returned if locale is undefined" time="0.001">
    </testcase>
    <testcase classname="&lt;localizationHelper.getLocalization&gt; default value should be returned if locale is empty" name="&lt;localizationHelper.getLocalization&gt; default value should be returned if locale is empty" time="0.002">
    </testcase>
    <testcase classname="&lt;localizationHelper.getLocalization&gt; get localisation from from first matching culture if locale does not contain the country" name="&lt;localizationHelper.getLocalization&gt; get localisation from from first matching culture if locale does not contain the country" time="0.013">
    </testcase>
    <testcase classname="&lt;localizationHelper.getLocalization&gt; default value should be returned if locale does not contain the country" name="&lt;localizationHelper.getLocalization&gt; default value should be returned if locale does not contain the country" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getApplications" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:24" time="1.094" tests="3">
    <testcase classname="getApplications creates a RSAA to get applications" name="getApplications creates a RSAA to get applications" time="0.014">
    </testcase>
    <testcase classname="getMyApplication creates a RSAA to get the user&apos;s default application" name="getMyApplication creates a RSAA to get the user&apos;s default application" time="0.009">
    </testcase>
    <testcase classname="setMyApplication creates a RSAA to set the user&apos;s default application" name="setMyApplication creates a RSAA to set the user&apos;s default application" time="0.031">
    </testcase>
  </testsuite>
  <testsuite name="useNotification" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:24" time="1.439" tests="2">
    <testcase classname="useNotification Retrieves empty snackPack array by default" name="useNotification Retrieves empty snackPack array by default" time="0.037">
    </testcase>
    <testcase classname="useNotification Adds new notification to snackPack" name="useNotification Adds new notification to snackPack" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="Chip Props" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:25" time="1.019" tests="7">
    <testcase classname="Chip Props Contains necessary props and rules keys" name="Chip Props Contains necessary props and rules keys" time="0.002">
    </testcase>
    <testcase classname="Chip Props Puts keys in component props and rules map" name="Chip Props Puts keys in component props and rules map" time="0.004">
    </testcase>
    <testcase classname="isChipProps Returns true if passed value is null" name="isChipProps Returns true if passed value is null" time="0.001">
    </testcase>
    <testcase classname="isChipProps Returns false if passed value is not object" name="isChipProps Returns false if passed value is not object" time="0">
    </testcase>
    <testcase classname="isChipProps Returns true if passed value type is ChipProps" name="isChipProps Returns true if passed value type is ChipProps" time="0.001">
    </testcase>
    <testcase classname="isChipProps Returns true if passed value has property _isChipProps and it&apos;s true" name="isChipProps Returns true if passed value has property _isChipProps and it&apos;s true" time="0">
    </testcase>
    <testcase classname="isChipProps Returns false if passed value has property _isChipProps and it&apos;s false or missing" name="isChipProps Returns false if passed value has property _isChipProps and it&apos;s false or missing" time="0">
    </testcase>
  </testsuite>
  <testsuite name="toasts" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:25" time="1.099" tests="5">
    <testcase classname="toasts behaves as a reducer" name="toasts behaves as a reducer" time="0.004">
    </testcase>
    <testcase classname="toasts push new toast to queue adds a toast to the end of the queue" name="toasts push new toast to queue adds a toast to the end of the queue" time="0.01">
    </testcase>
    <testcase classname="toasts push new toast to queue adds a toast to an empty queue" name="toasts push new toast to queue adds a toast to an empty queue" time="0.004">
    </testcase>
    <testcase classname="toasts push new toast to queue keeps the type of toast" name="toasts push new toast to queue keeps the type of toast" time="0.007">
    </testcase>
    <testcase classname="toasts shift toast off queue removes the first toast from the queue" name="toasts shift toast off queue removes the first toast from the queue" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="getThemeProp" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:25" time="1.044" tests="13">
    <testcase classname="getThemeProp returns a function that gets a value from the theme prop" name="getThemeProp returns a function that gets a value from the theme prop" time="0.004">
    </testcase>
    <testcase classname="getThemeProp gets the default if theme prop not found" name="getThemeProp gets the default if theme prop not found" time="0.001">
    </testcase>
    <testcase classname="getThemeProp can use prop functions in the path" name="getThemeProp can use prop functions in the path" time="0.002">
    </testcase>
    <testcase classname="getThemeProp can use prop functions in the default" name="getThemeProp can use prop functions in the default" time="0.001">
    </testcase>
    <testcase classname="getThemeProp with function parameter calls the passed function on the value from the theme prop" name="getThemeProp with function parameter calls the passed function on the value from the theme prop" time="0.003">
    </testcase>
    <testcase classname="getThemeProp with function parameter calls the passed function on the default if theme prop not found" name="getThemeProp with function parameter calls the passed function on the default if theme prop not found" time="0.001">
    </testcase>
    <testcase classname="ifFlag makes a prop function that returns second parameter if first parameter true" name="ifFlag makes a prop function that returns second parameter if first parameter true" time="0.001">
    </testcase>
    <testcase classname="ifFlag makes a prop function that returns third parameter if first parameter false" name="ifFlag makes a prop function that returns third parameter if first parameter false" time="0.001">
    </testcase>
    <testcase classname="ifFlag returns empty string if no third parameter" name="ifFlag returns empty string if no third parameter" time="0.001">
    </testcase>
    <testcase classname="ifFlag handles prop funcs as second parameter" name="ifFlag handles prop funcs as second parameter" time="0.001">
    </testcase>
    <testcase classname="ifFlag handles prop funcs as third parameter" name="ifFlag handles prop funcs as third parameter" time="0.001">
    </testcase>
    <testcase classname="switchEnum yields a property function which checks a field against a list of cases" name="switchEnum yields a property function which checks a field against a list of cases" time="0.002">
    </testcase>
    <testcase classname="switchEnum yields a default if one is set" name="switchEnum yields a default if one is set" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Text Props" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:25" time="1.152" tests="7">
    <testcase classname="Text Props Sets the classes property" name="Text Props Sets the classes property" time="0.003">
    </testcase>
    <testcase classname="Text Props Sets the lineCount property" name="Text Props Sets the lineCount property" time="0.001">
    </testcase>
    <testcase classname="isTextProps Returns true if passed value is null" name="isTextProps Returns true if passed value is null" time="0.001">
    </testcase>
    <testcase classname="isTextProps Returns false if passed value is not object" name="isTextProps Returns false if passed value is not object" time="0">
    </testcase>
    <testcase classname="isTextProps Returns true if passed value type is TextProps" name="isTextProps Returns true if passed value type is TextProps" time="0.001">
    </testcase>
    <testcase classname="isTextProps Returns true if passed value has property _isTextProps and it&apos;s true" name="isTextProps Returns true if passed value has property _isTextProps and it&apos;s true" time="0">
    </testcase>
    <testcase classname="isTextProps Returns false if passed value has property _isTextProps and it&apos;s false or missing" name="isTextProps Returns false if passed value has property _isTextProps and it&apos;s false or missing" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Wrapper" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:25" time="1.157" tests="2">
    <testcase classname="Wrapper sets transition time according to its timeout" name="Wrapper sets transition time according to its timeout" time="0.014">
    </testcase>
    <testcase classname="Wrapper rendered in portal renders a Wrapper in a portal" name="Wrapper rendered in portal renders a Wrapper in a portal" time="0.022">
    </testcase>
  </testsuite>
  <testsuite name="Timezones Selectors" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:25" time="1.1" tests="3">
    <testcase classname="Timezones Selectors Retrieves timezone display name by id" name="Timezones Selectors Retrieves timezone display name by id" time="0.009">
    </testcase>
    <testcase classname="Timezones Selectors Retrieves null if timezone id is not found" name="Timezones Selectors Retrieves null if timezone id is not found" time="0.002">
    </testcase>
    <testcase classname="Timezones Selectors Retrieves all timezones" name="Timezones Selectors Retrieves all timezones" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="Tooltip" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:25" time="1.28" tests="1">
    <testcase classname="Tooltip renders a small text message in a popup tip bubble" name="Tooltip renders a small text message in a popup tip bubble" time="0.021">
    </testcase>
  </testsuite>
  <testsuite name="selectLocation" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:26" time="1.075" tests="4">
    <testcase classname="selectLocation gets the current matched route" name="selectLocation gets the current matched route" time="0.004">
    </testcase>
    <testcase classname="selectLocation handles missing information" name="selectLocation handles missing information" time="0.002">
    </testcase>
    <testcase classname="selectPathname gets the current matched route" name="selectPathname gets the current matched route" time="0.002">
    </testcase>
    <testcase classname="selectPathname handles missing information" name="selectPathname handles missing information" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Component Props" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:26" time="1.178" tests="6">
    <testcase classname="Component Props Sets the prop value" name="Component Props Sets the prop value" time="0.001">
    </testcase>
    <testcase classname="Component Props Throws if prop key is missing" name="Component Props Throws if prop key is missing" time="0.001">
    </testcase>
    <testcase classname="Component Props Gets the prop value by key" name="Component Props Gets the prop value by key" time="0.001">
    </testcase>
    <testcase classname="Component Props Sets the style value" name="Component Props Sets the style value" time="0.001">
    </testcase>
    <testcase classname="Component Props Throws if style key is missing" name="Component Props Throws if style key is missing" time="0">
    </testcase>
    <testcase classname="Component Props Gets the style value by key" name="Component Props Gets the style value by key" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="isScrollVisible" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:26" time="1.001" tests="2">
    <testcase classname="isScrollVisible Retrieves true when scroll width is greater than client width" name="isScrollVisible Retrieves true when scroll width is greater than client width" time="0.002">
    </testcase>
    <testcase classname="isScrollVisible Retrieves false when scroll width is equal to client width" name="isScrollVisible Retrieves false when scroll width is equal to client width" time="0">
    </testcase>
  </testsuite>
  <testsuite name="isString" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:26" time="0.998" tests="9">
    <testcase classname="isString Retrives true when passed value is string" name="isString Retrives true when passed value is string" time="0.001">
    </testcase>
    <testcase classname="isString Retrives false when passed value is not a string" name="isString Retrives false when passed value is not a string" time="0">
    </testcase>
    <testcase classname="isObject Retrives true when passed value is object" name="isObject Retrives true when passed value is object" time="0.001">
    </testcase>
    <testcase classname="isObject Retrives false when passed value is not an object" name="isObject Retrives false when passed value is not an object" time="0">
    </testcase>
    <testcase classname="isStringNullOrWhitespace Retrieves true if passed string is undefined" name="isStringNullOrWhitespace Retrieves true if passed string is undefined" time="0.001">
    </testcase>
    <testcase classname="isStringNullOrWhitespace Retrieves true if passed string is whitespace" name="isStringNullOrWhitespace Retrieves true if passed string is whitespace" time="0">
    </testcase>
    <testcase classname="isStringNullOrWhitespace Retrieves false if passed string is not null or whitespace" name="isStringNullOrWhitespace Retrieves false if passed string is not null or whitespace" time="0.001">
    </testcase>
    <testcase classname="isReactComponent Retrives true when passed value is react component" name="isReactComponent Retrives true when passed value is react component" time="0.001">
    </testcase>
    <testcase classname="isReactComponent Retrives false when passed value is not react component" name="isReactComponent Retrives false when passed value is not react component" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="safeGet" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:26" time="1.076" tests="4">
    <testcase classname="safeGet gets a value from a nested object" name="safeGet gets a value from a nested object" time="0.003">
    </testcase>
    <testcase classname="safeGet gets a contained object from a nested object" name="safeGet gets a contained object from a nested object" time="0.002">
    </testcase>
    <testcase classname="safeGet gets undefined if there is no such path in the object" name="safeGet gets undefined if there is no such path in the object" time="0.001">
    </testcase>
    <testcase classname="safeGet handles null gracefully" name="safeGet handles null gracefully" time="0">
    </testcase>
  </testsuite>
  <testsuite name="View state reducer" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:26" time="1.003" tests="4">
    <testcase classname="View state reducer behaves as a reducer should" name="View state reducer behaves as a reducer should" time="0.004">
    </testcase>
    <testcase classname="View state reducer Sets module structure correctly" name="View state reducer Sets module structure correctly" time="0.006">
    </testcase>
    <testcase classname="View state reducer Sets module structure correctly with no pages" name="View state reducer Sets module structure correctly with no pages" time="0.001">
    </testcase>
    <testcase classname="View state reducer Sets module structure correctly with no segments" name="View state reducer Sets module structure correctly with no segments" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="useSelectorAndUnwrap" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:26" time="1.321" tests="1">
    <testcase classname="useSelectorAndUnwrap Executes selector and unwraps result" name="useSelectorAndUnwrap Executes selector and unwraps result" time="0.057">
    </testcase>
  </testsuite>
  <testsuite name="Modal Props" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:27" time="1.042" tests="7">
    <testcase classname="Modal Props Contains necessary props and rules keys" name="Modal Props Contains necessary props and rules keys" time="0.003">
    </testcase>
    <testcase classname="Modal Props Puts keys in component props and rules map" name="Modal Props Puts keys in component props and rules map" time="0.002">
    </testcase>
    <testcase classname="isModalProps Returns true if passed value is null" name="isModalProps Returns true if passed value is null" time="0">
    </testcase>
    <testcase classname="isModalProps Returns false if passed value is not object" name="isModalProps Returns false if passed value is not object" time="0.001">
    </testcase>
    <testcase classname="isModalProps Returns true if passed value type is ModalProps" name="isModalProps Returns true if passed value type is ModalProps" time="0">
    </testcase>
    <testcase classname="isModalProps Returns true if passed value has property _isModalProps and it&apos;s true" name="isModalProps Returns true if passed value has property _isModalProps and it&apos;s true" time="0.001">
    </testcase>
    <testcase classname="isModalProps Returns false if passed value has property _isModalProps and it&apos;s false or missing" name="isModalProps Returns false if passed value has property _isModalProps and it&apos;s false or missing" time="0">
    </testcase>
  </testsuite>
  <testsuite name="getTimezones" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:27" time="1.263" tests="1">
    <testcase classname="getTimezones creates a RSAA to get timezones" name="getTimezones creates a RSAA to get timezones" time="0.016">
    </testcase>
  </testsuite>
  <testsuite name="Collapsable List Props" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:27" time="1.103" tests="7">
    <testcase classname="Collapsable List Props Contains necessary props and rules keys" name="Collapsable List Props Contains necessary props and rules keys" time="0.002">
    </testcase>
    <testcase classname="Collapsable List Props Puts keys in component props and rules map" name="Collapsable List Props Puts keys in component props and rules map" time="0.002">
    </testcase>
    <testcase classname="isCollapsableListProps Returns true if passed value is null" name="isCollapsableListProps Returns true if passed value is null" time="0">
    </testcase>
    <testcase classname="isCollapsableListProps Returns false if passed value is not object" name="isCollapsableListProps Returns false if passed value is not object" time="0.001">
    </testcase>
    <testcase classname="isCollapsableListProps Returns true if passed value type is CollapsableListProps" name="isCollapsableListProps Returns true if passed value type is CollapsableListProps" time="0">
    </testcase>
    <testcase classname="isCollapsableListProps Returns true if passed value has property _isCollapsableListProps and it&apos;s true" name="isCollapsableListProps Returns true if passed value has property _isCollapsableListProps and it&apos;s true" time="0">
    </testcase>
    <testcase classname="isCollapsableListProps Returns false if passed value has property _isChipProps and it&apos;s false or missing" name="isCollapsableListProps Returns false if passed value has property _isChipProps and it&apos;s false or missing" time="0">
    </testcase>
  </testsuite>
  <testsuite name="setModulesStructure" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:27" time="1.161" tests="1">
    <testcase classname="setModulesStructure creates an action object" name="setModulesStructure creates an action object" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="scopes" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:27" time="1.257" tests="2">
    <testcase classname="scopes behaves as a reducer should" name="scopes behaves as a reducer should" time="0.006">
    </testcase>
    <testcase classname="scopes saves a normalized index of scopes with child lists, keys all lower case" name="scopes saves a normalized index of scopes with child lists, keys all lower case" time="0.025">
    </testcase>
  </testsuite>
  <testsuite name="getVersionSelector" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:27" time="1.117" tests="3">
    <testcase classname="getVersionSelector gets the version of the current OCC platform" name="getVersionSelector gets the version of the current OCC platform" time="0.004">
    </testcase>
    <testcase classname="getHelpUrlDefaultSelector gets the default help URL for the OCC platform" name="getHelpUrlDefaultSelector gets the default help URL for the OCC platform" time="0.002">
    </testcase>
    <testcase classname="getApplicationHelpUrlSelector gets the default help URL for the OCC platform" name="getApplicationHelpUrlSelector gets the default help URL for the OCC platform" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="makeActionTypes" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:28" time="1.052" tests="6">
    <testcase classname="makeActionTypes returns an array with three action types in the form used by RSAAs" name="makeActionTypes returns an array with three action types in the form used by RSAAs" time="0.003">
    </testcase>
    <testcase classname="makeApiActions creates a basic RSAA" name="makeApiActions creates a basic RSAA" time="0.002">
    </testcase>
    <testcase classname="makeApiActions handles POST and bodies" name="makeApiActions handles POST and bodies" time="0.001">
    </testcase>
    <testcase classname="makeApiActions handles headers and credentials" name="makeApiActions handles headers and credentials" time="0.009">
    </testcase>
    <testcase classname="makeApiActions handles options and bailout" name="makeApiActions handles options and bailout" time="0.003">
    </testcase>
    <testcase classname="makeApiActions handles action metadata" name="makeApiActions handles action metadata" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Paper Props" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:28" time="1.428" tests="7">
    <testcase classname="Paper Props Contains necessary rule and prop names" name="Paper Props Contains necessary rule and prop names" time="0.007">
    </testcase>
    <testcase classname="Paper Props Puts keys in component props and classes maps" name="Paper Props Puts keys in component props and classes maps" time="0.002">
    </testcase>
    <testcase classname="isPaperProps Returns true if passed value is null" name="isPaperProps Returns true if passed value is null" time="0.001">
    </testcase>
    <testcase classname="isPaperProps Returns false if passed value is not object" name="isPaperProps Returns false if passed value is not object" time="0">
    </testcase>
    <testcase classname="isPaperProps Returns true if passed value type is PaperProps" name="isPaperProps Returns true if passed value type is PaperProps" time="0.001">
    </testcase>
    <testcase classname="isPaperProps Returns true if passed value has property _isPaperProps and it&apos;s true" name="isPaperProps Returns true if passed value has property _isPaperProps and it&apos;s true" time="0">
    </testcase>
    <testcase classname="isPaperProps Returns false if passed value has property _isPaperProps and it&apos;s false or missing" name="isPaperProps Returns false if passed value has property _isPaperProps and it&apos;s false or missing" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="normalizeForSearch" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:28" time="0.977" tests="2">
    <testcase classname="normalizeForSearch transforms a string into lowercase" name="normalizeForSearch transforms a string into lowercase" time="0.003">
    </testcase>
    <testcase classname="normalizeForSearch strips off accents" name="normalizeForSearch strips off accents" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="versionInfo" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:28" time="1.114" tests="4">
    <testcase classname="versionInfo behaves as a reducer should" name="versionInfo behaves as a reducer should" time="0.006">
    </testcase>
    <testcase classname="versionInfo saves version information" name="versionInfo saves version information" time="0.01">
    </testcase>
    <testcase classname="versionInfo resets version information" name="versionInfo resets version information" time="0.003">
    </testcase>
    <testcase classname="versionInfo handles version information with moduleHelpUrls being null" name="versionInfo handles version information with moduleHelpUrls being null" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="makeOrcApiAction" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:29" time="1.112" tests="6">
    <testcase classname="makeOrcApiAction creates an RSAA suited to accessing the Orckestrator API" name="makeOrcApiAction creates an RSAA suited to accessing the Orckestrator API" time="0.015">
    </testcase>
    <testcase classname="makeOrcApiAction does not delete information unnecessarily" name="makeOrcApiAction does not delete information unnecessarily" time="0.026">
    </testcase>
    <testcase classname="makeOrcApiAction bailout bails out if same request active" name="makeOrcApiAction bailout bails out if same request active" time="0.001">
    </testcase>
    <testcase classname="makeOrcApiAction bailout does not bail out if same request inactive" name="makeOrcApiAction bailout does not bail out if same request inactive" time="0.001">
    </testcase>
    <testcase classname="makeOrcApiAction bailout bails out if configured bailout is a function that returns true" name="makeOrcApiAction bailout bails out if configured bailout is a function that returns true" time="0.001">
    </testcase>
    <testcase classname="makeOrcApiAction bailout does not bail out if configured bailout is a function that returns false" name="makeOrcApiAction bailout does not bail out if configured bailout is a function that returns false" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="spawnerMiddleware" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:29" time="1.109" tests="4">
    <testcase classname="spawnerMiddleware is a Redux middleware" name="spawnerMiddleware is a Redux middleware" time="0.01">
    </testcase>
    <testcase classname="spawnerMiddleware adding action spawners can spawn actions in response to specific actions" name="spawnerMiddleware adding action spawners can spawn actions in response to specific actions" time="0.019">
    </testcase>
    <testcase classname="spawnerMiddleware adding action spawners handles if spawner does not return an action" name="spawnerMiddleware adding action spawners handles if spawner does not return an action" time="0.014">
    </testcase>
    <testcase classname="spawnerMiddleware adding action spawners throws error if a spawner is overwritten" name="spawnerMiddleware adding action spawners throws error if a spawner is overwritten" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="modulesSelector" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:29" time="1.08" tests="1">
    <testcase classname="modulesSelector Retrieves modules" name="modulesSelector Retrieves modules" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Checkbox Props" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:29" time="1.025" tests="7">
    <testcase classname="Checkbox Props Contains necessary props keys" name="Checkbox Props Contains necessary props keys" time="0.002">
    </testcase>
    <testcase classname="Checkbox Props Puts keys in component props map" name="Checkbox Props Puts keys in component props map" time="0.002">
    </testcase>
    <testcase classname="isCheckboxProps Returns true if passed value is null" name="isCheckboxProps Returns true if passed value is null" time="0.004">
    </testcase>
    <testcase classname="isCheckboxProps Returns false if passed value is not object" name="isCheckboxProps Returns false if passed value is not object" time="0">
    </testcase>
    <testcase classname="isCheckboxProps Returns true if passed value type is CheckboxProps" name="isCheckboxProps Returns true if passed value type is CheckboxProps" time="0">
    </testcase>
    <testcase classname="isCheckboxProps Returns true if passed value has property _isCheckboxProps and it&apos;s true" name="isCheckboxProps Returns true if passed value has property _isCheckboxProps and it&apos;s true" time="0">
    </testcase>
    <testcase classname="isCheckboxProps Returns false if passed value has property _isCheckboxProps and it&apos;s false or missing" name="isCheckboxProps Returns false if passed value has property _isCheckboxProps and it&apos;s false or missing" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="defaultAppId" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:29" time="1.006" tests="2">
    <testcase classname="defaultAppId gets the id of the default app" name="defaultAppId gets the id of the default app" time="0.005">
    </testcase>
    <testcase classname="defaultAppId gets the the default scope" name="defaultAppId gets the the default scope" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Country Helper" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:30" time="0.944" tests="3">
    <testcase classname="Country Helper Retrieves country display name by country code" name="Country Helper Retrieves country display name by country code" time="0.003">
    </testcase>
    <testcase classname="Country Helper Retrieves not translated country code if no display name found" name="Country Helper Retrieves not translated country code if no display name found" time="0.002">
    </testcase>
    <testcase classname="Country Helper Retrieves not translated country code if no country found" name="Country Helper Retrieves not translated country code if no country found" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="countries" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:30" time="0.976" tests="2">
    <testcase classname="countries behaves as a reducer should" name="countries behaves as a reducer should" time="0.004">
    </testcase>
    <testcase classname="countries saves countries" name="countries saves countries" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="InputBase Props" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:30" time="0.936" tests="7">
    <testcase classname="InputBase Props Contains necessary props keys" name="InputBase Props Contains necessary props keys" time="0.001">
    </testcase>
    <testcase classname="InputBase Props Puts keys in component props map" name="InputBase Props Puts keys in component props map" time="0.002">
    </testcase>
    <testcase classname="isInputProps Returns true if passed value is null" name="isInputProps Returns true if passed value is null" time="0">
    </testcase>
    <testcase classname="isInputProps Returns false if passed value is not object" name="isInputProps Returns false if passed value is not object" time="0">
    </testcase>
    <testcase classname="isInputProps Returns true if passed value type is InputBaseProps" name="isInputProps Returns true if passed value type is InputBaseProps" time="0.001">
    </testcase>
    <testcase classname="isInputProps Returns true if passed value has property _isInputProps and it&apos;s true" name="isInputProps Returns true if passed value has property _isInputProps and it&apos;s true" time="0">
    </testcase>
    <testcase classname="isInputProps Returns false if passed value has property _isInputProps and it&apos;s false or missing" name="isInputProps Returns false if passed value has property _isInputProps and it&apos;s false or missing" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="removeTab" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:30" time="0.889" tests="3">
    <testcase classname="removeTab creates a remove tab action" name="removeTab creates a remove tab action" time="0.003">
    </testcase>
    <testcase classname="setHrefConfig set href config action" name="setHrefConfig set href config action" time="0.001">
    </testcase>
    <testcase classname="setClosingTabHandlerActions set closing tab handler actions" name="setClosingTabHandlerActions set closing tab handler actions" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="setTranslation" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:30" time="0.926" tests="6">
    <testcase classname="setTranslation replaces a i18n message structure with the selected locale&apos;s string" name="setTranslation replaces a i18n message structure with the selected locale&apos;s string" time="0.002">
    </testcase>
    <testcase classname="setTranslation returns the unchanged object if the path isn&apos;t found" name="setTranslation returns the unchanged object if the path isn&apos;t found" time="0.002">
    </testcase>
    <testcase classname="setTranslation replaces with the first string if the given language is unavailable" name="setTranslation replaces with the first string if the given language is unavailable" time="0.002">
    </testcase>
    <testcase classname="setTranslation returns an empty string if no messages are available" name="setTranslation returns an empty string if no messages are available" time="0.001">
    </testcase>
    <testcase classname="setTranslation returns if no object passed" name="setTranslation returns if no object passed" time="0">
    </testcase>
    <testcase classname="setTranslation returns first not empty string if the given language is unavailable" name="setTranslation returns first not empty string if the given language is unavailable" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="curry" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:30" time="0.816" tests="8">
    <testcase classname="curry 0 &lt; curried &lt; arity returns a function" name="curry 0 &lt; curried &lt; arity returns a function" time="0.003">
    </testcase>
    <testcase classname="curry 0 &lt; curried &lt; arity calls wrapped function with curried parameters and call parameters" name="curry 0 &lt; curried &lt; arity calls wrapped function with curried parameters and call parameters" time="0.001">
    </testcase>
    <testcase classname="curry curried = 0 returns a function" name="curry curried = 0 returns a function" time="0.001">
    </testcase>
    <testcase classname="curry curried = 0 has no curried parameters" name="curry curried = 0 has no curried parameters" time="0.001">
    </testcase>
    <testcase classname="curry curried = arity returns a function" name="curry curried = arity returns a function" time="0">
    </testcase>
    <testcase classname="curry curried = arity calls wrapped function with curried parameters" name="curry curried = arity calls wrapped function with curried parameters" time="0.001">
    </testcase>
    <testcase classname="curry curried &gt; arity returns a function" name="curry curried &gt; arity returns a function" time="0">
    </testcase>
    <testcase classname="curry curried &gt; arity calls function with curried parameters" name="curry curried &gt; arity calls function with curried parameters" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="TableProps Props" errors="0" failures="0" skipped="0" timestamp="2021-07-22T19:30:30" time="0.837" tests="7">
    <testcase classname="TableProps Props Contains necessary props keys" name="TableProps Props Contains necessary props keys" time="0.001">
    </testcase>
    <testcase classname="TableProps Props Puts keys in component props map" name="TableProps Props Puts keys in component props map" time="0.003">
    </testcase>
    <testcase classname="isTableProps Returns true if passed value is null" name="isTableProps Returns true if passed value is null" time="0.008">
    </testcase>
    <testcase classname="isTableProps Returns false if passed value is not object" name="isTableProps Returns false if passed value is not object" time="0.001">
    </testcase>
    <testcase classname="isTableProps Returns true if passed value type is TableProps" name="isTableProps Returns true if passed value type is TableProps" time="0">
    </testcase>
    <testcase classname="isTableProps Returns true if passed value has property _isTableProps and it&apos;s true" name="isTableProps Returns true if passed value has property _isTableProps and it&apos;s true" time="0">
    </testcase>
    <testcase classname="isTableProps Returns false if passed value has property _isTableProps and it&apos;s false or missing" name="isTableProps Returns false if passed value has property _isTableProps and it&apos;s false or missing" time="0">
    </testcase>
  </testsuite>
</testsuites>