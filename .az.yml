trigger:
  branches:
    include:
    - feature*
    - bug*
    - version/*
   
pool:
  vmImage: 'ubuntu-latest'

variables:
  - name: BUILD_REACT
    value: true
  - group: coveralls orc-shared
  - group: npm publish token

steps:
- task: Bash@3
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  displayName: 'Push to mirror repository'
  inputs:
    targetType: 'inline'
    script: |
      git push --mirror https://orckestra001@dev.azure.com/orckestra001/OrckestraCommerce/_git/orc-shared_mirror

- task: NodeTool@0
  displayName: 'Use Node 18.x'
  inputs:
    versionSpec: 18.x

- task: Npm@0
  displayName: 'npm install'
  inputs:
    command: 'install'
    arguments: '--verbose'

- task: PublishBuildArtifacts@1
  displayName: 'Publish eresolve-report.txt'
  condition: failed()
  continueOnError: true
  inputs:
    PathtoPublish: 'C:\npm\cache\eresolve-report.txt'
    ArtifactName: 'NpmInstallLog'

- task: Npm@1
  displayName: 'npm prune'
  inputs:
    command: 'custom'
    customCommand: 'prune'

- task: Npm@1
  displayName: 'npm ls --depth=1'
  continueOnError: true
  inputs:
    command: 'custom'
    customCommand: 'ls --depth=1'

- task: Npm@1
  displayName: 'npm run lint'
  inputs:
    command: 'custom'
    customCommand: 'run lint -- --max-warnings 0'

- task: Npm@1
  displayName: 'npm run coverage'
  inputs:
    command: 'custom'
    customCommand: 'run coverage'

- task: Npm@1
  displayName: 'npm run coveralls'
  inputs:
    command: 'custom'
    customCommand: 'run coveralls'
  env:
    CI_NAME: 'Azure DevOps orc-shared'
    CI_BUILD_NUMBER: $(Build.BuildNumber)
    CI_BUILD_URL: $(Build.Repository.Uri)
    CI_BRANCH: $(Build.SourceBranch)
    COVERALLS_REPO_TOKEN: $(CoverallsToken)

- task: PublishCodeCoverageResults@1
  displayName: 'Publish Jest Unit Code Coverage'
  condition: succeededOrFailed()
  inputs:
    codeCoverageTool: cobertura
    summaryFileLocation: coverage/cobertura-coverage.xml
    failIfCoverageEmpty: true

- task: Bash@3
  displayName: 'Detect NPM tag'
  inputs:
    targetType: 'inline'
    script: |
      NPM_TAG=`node_modules/.bin/orc-scripts getDist`
      echo "##vso[task.setvariable variable=NpmTag]$NPM_TAG"

- task: Bash@3
  displayName: 'Detect if we need to publish packages'
  inputs:
    targetType: 'inline'
    script: |
      git describe --exact-match --tags HEAD
      echo "##vso[task.setvariable variable=CanUploadNpmPackage]$?"

- task: Bash@3
  displayName: 'Configure .npmrc with NPM_TOKEN config'
  inputs:
    targetType: 'inline'
    script: |
      echo -e "\r\n//registry.npmjs.org/:_authToken=\${NPM_TOKEN}" >> .npmrc

- task: Npm@1
  displayName: 'npm publish'
  condition: and(succeeded(), eq(variables['CanUploadNpmPackage'], '0'))
  inputs:
    command: 'custom'
    customCommand: 'publish --tag $(NpmTag)'
  env:
    NPM_TOKEN: $(NpmPublishToken)
